using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text.RegularExpressions;
using System.Web;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System.Text;
using System.Security.Cryptography;
using DevExpress.XtraReports.UI;
using System.IO;
using ServiceStack;

namespace TRADENET.Models
{
    public class TnetMainModel : ConnectionModel
    {

    }
    public class modLedger : ConnectionModel
    {
        public DataTable GetClientLedgerSummary(string Code, bool blnSum, string strYear = "")
        {
            //string strDateFrom = "20190401";
            //string strDateTo = "20200331";

            string strDateFrom = "";
            string strDateTo = "";

            if (strYear.Trim() != "")
            {
                strDateFrom = strYear.Split('-')[0].Trim() + "0401";
                strDateTo = strYear.Split('-')[1].Trim() + "0331";
            }

            string NewLn = Environment.NewLine;

            string strSQL = "";
            if (blnSum)
            {
                strSQL = "Select Convert(decimal(15,2), isnull(sum(Closing),0)) From ( " + NewLn +
                        "   Select sum(ld_amount) Closing " + NewLn +
                        "   from ledger with (nolock) " + NewLn +
                        "   where ld_clientcd='" + Code + "' " + NewLn +
                        "   and ld_dt <= '" + strDateTo + "'" + NewLn +
                        "   group by ld_dpid , ld_clientcd " + NewLn +
                        "   union all  " + NewLn +
                        "   select sum(ld_amount) Closing " + NewLn +
                        "   from ledger with (nolock) " + NewLn +
                        "   where  ld_clientcd=(select distinct cm_brkggroup from client_master where cm_cd='" + Code + "') " + NewLn +
                        "   and ld_dt <= '" + strDateTo + "'" + NewLn +
                        "   group by ld_dpid , ld_clientcd " + NewLn +
                        " ) X ";
            }
            else
            {
                strSQL = "Select 'C' as account,ld_clientcd, " + NewLn +
                       " right(rtrim(ld_dpid),1) as exch,ld_dpid, " + NewLn +
                       " sum(case sign(datediff(d,'" + strDateFrom + "', ld_dt)) when - 1 then ld_amount else 0 end) OpenBal," + NewLn +
                       " sum(case sign(datediff(d,'" + strDateFrom + "', ld_dt)) when  -1 then 0 else case ld_debitflag when 'D' then ld_amount else 0 end end) Debit, " + NewLn +
                       " sum(case sign(datediff(d,'" + strDateFrom + "', ld_dt)) when  -1 then 0 else case ld_debitflag     when 'D' then 0 else ld_amount end end) Credit, " + NewLn +
                       " sum(ld_amount) Closing,  " + NewLn +
                       //" CASE substring(ld_dpid,2,1) When 'B'  Then 'BSE' When 'M' then 'MCX' When 'N' Then 'NSE' End +'-'+ CASE substring(ld_dpid,3,1) When 'C'  Then 'CASH' When 'F' " + NewLn +
                       //" then 'DERIVATIVE' When 'K' Then 'CURRENCY' End heading, " + NewLn +
                       // " rtrim(em_dsebino) + ' - ' + substring(ld_dpid, 2, 1) + 'SE / ' +case substring(ld_dpid, 3, 1) when 'C' then 'Cash' else 'FutOpt' end ld_DPName" + NewLn +
                       "CASE substring(ld_dpid, 2, 1) When 'B'  Then 'BSE' When 'M' then 'MCX' When 'N' Then 'NSE' End + '-' + CASE substring(ld_dpid, 3, 1) When 'C'  Then 'CASH' When 'F'  then 'DERIVATIVE' When 'K' Then 'CURRENCY' when 'M' then 'MF'when 'X' then 'Comm'   End ld_DPName" + NewLn +

                       //"CASE substring(ld_dpid,2,1) When 'B'  Then 'BSE' When 'M' then 'MCX' When 'N' Then 'NSE' End + " + NewLn +
                       //" CASE substring(ld_dpid,3,1) When 'C'  Then '' When 'F' then 'DERV' When 'K' Then 'CURRENCY' end exchtitle  " + NewLn +
                       " from ledger ,entity_master " + NewLn +
                       " where ld_clientcd='" + Code + "' " + NewLn +
                       " and ld_dt <= '" + strDateTo + "'" + NewLn +
                       " group by ld_dpid , ld_clientcd ,em_dsebino" + NewLn +
                       " union all  " + NewLn +
                       " select 'M' as account,ld_clientcd, right(rtrim(ld_dpid),1) as exch,ld_dpid, " + NewLn +
                       " sum(case sign(datediff(d,'" + strDateFrom + "',ld_dt)) when -1 then ld_amount else 0 end) OpenBal,sum(case sign(datediff(d,'" + strDateFrom + "',ld_dt)) when -1 then 0 else case ld_debitflag   " + NewLn +
                       " when 'D' then ld_amount else 0 end end) Debit, sum(case sign(datediff(d,'" + strDateFrom + "',ld_dt)) when -1 then 0 else case ld_debitflag when 'D' then 0 else ld_amount end end) Credit, " + NewLn +
                       " sum(ld_amount) Closing," + NewLn +
                       //"CASE substring(ld_dpid,2,1) When 'B'  Then 'BSE' When 'M' then 'MCX' When 'N' Then 'NSE' End +'-'+ CASE substring(ld_dpid,3,1) When 'C'  Then 'CASH(M)'" + NewLn +
                       //" When 'F' then 'DERIVATIVE(M)' When 'K' Then 'CURRENCY(M)' End heading,  " + NewLn +
                       //" rtrim(em_dsebino) + ' - ' + substring(ld_dpid, 2, 1) + 'SE / ' +case substring(ld_dpid, 3, 1) when 'C' then 'Cash' else 'FutOpt' end ld_DPName" + NewLn +
                       //"CASE substring(ld_dpid,2,1) When 'B'  Then 'BSE' When 'M' then 'MCX' When 'N' Then 'NSE' End + CASE substring(ld_dpid,3,1) When 'C'  Then '(M)' When 'F' then 'DERV(M)' When 'K' Then 'CURRENCY(M)' end exchtitle  " + NewLn +
                       "CASE substring(ld_dpid, 2, 1) When 'B'  Then 'BSE' When 'M' then 'MCX' When 'N' Then 'NSE' End + '-' + CASE substring(ld_dpid, 3, 1) When 'C'  Then 'CASH' When 'F'  then 'DERIVATIVE' When 'K' Then 'CURRENCY' when 'M' then 'MF' when 'X' then 'Comm'   End ld_DPName" + NewLn +
                       " from ledger,entity_master " + NewLn +
                       " where  ld_clientcd=(select distinct cm_brkggroup from client_master where cm_cd='" + Code + "') " + NewLn +
                       " and ld_dt <= '" + strDateTo + "'" + NewLn +
                       " group by ld_dpid , ld_clientcd,em_dsebino ";
            }
            LibraryModel mylib = new LibraryModel();
            DataTable dtled = mylib.OpenDataTable(strSQL);
            return dtled;
        }


        public decimal GetClientLedgerSummaryByCode(string Code)
        {
            string CFY = "";
            DateTime today = DateTime.Today;
            if (today.Month <= 3)
            { CFY = today.AddYears(-1).ToString("yyyy") + "-" + today.ToString("yyyy"); }
            else
            { CFY = today.ToString("yyyy") + "-" + today.AddYears(1).ToString("yyyy"); }



            Decimal decHold = 0;
            DataTable dtVal = GetClientLedgerSummary(Code, true, CFY);
            if (dtVal.Rows.Count > 0)
            {
                decHold = Convert.ToDecimal(dtVal.Rows[0][0].ToString());
            }
            return decHold;
        }

        public List<LedgerViewModel> GetClientLedgerSummary(string Code, string strYear, string T2 = "")

        {
            if (T2 != "")
            {
                string strDateFrom = strYear.Split('-')[0].Trim() + "0401";
                string strDateTo = DateTime.Now.AddDays(2).ToString("yyyyMMdd");
            }
            else
            {
                string strDateFrom = strYear.Split('-')[0].Trim() + "0401";
                string strDateTo = strYear.Split('-')[1].Trim() + "0331";
            }



            string NewLn = Environment.NewLine;
            //LEDGER SUMMARY
            DataTable dtLedger = GetClientLedgerSummary(Code, false, strYear);
            List<LedgerViewModel> ledview = new List<LedgerViewModel>();
            ledview = dtLedger.AsEnumerable()
            .Select(row => new LedgerViewModel
            {
                Account = row.Field<string>("account"),
                ClientCd = row.Field<string>("ld_clientcd"),
                Exchange = row.Field<string>("ld_DPName"),
                OpeningBal = row.Field<decimal>("OpenBal"),
                Debit = row.Field<decimal>("Debit"),
                Credit = row.Field<decimal>("Credit"),
                Balance = row.Field<decimal>("Closing"),
                DPID = row.Field<string>("ld_dpid")
            }).ToList();

            return ledview;
        }

        //public IEnumerable<LedgerModel> GetLedger(string Select, string Code, string FromDate, string ToDate, string strDPID = "", string cmbActType = "0", string cmbLedgerList = "0", string chkConfirmation = "0", string chkMrgnlegr = "0")
        //{
        //    List<LedgerModel> uList = new List<LedgerModel>();
        //    Boolean IsSubroker = false;
        //    string strDrCr = "";
        //    string chkLedgerList = "";
        //    string chrSpecialClient = "";


        //    try
        //    {
        //        string strDPIDWhere = "";
        //        if (strDPID.Trim() != "")
        //        {
        //            String[] Dpid = strDPID.Trim().Split(',');
        //            for (int i = 0; i < Dpid.Length; i++)
        //            {
        //                if (Dpid[i].Trim() != "")
        //                {
        //                    strDPIDWhere += "'" + Dpid[i].Trim() + "',";
        //                }

        //            }
        //            if (Strings.Right(strDPIDWhere.Trim(), 1) == ",")
        //            {
        //                strDPIDWhere = Strings.Left(strDPIDWhere.Trim(), strDPIDWhere.Trim().Length - 1);
        //            }
        //            if (strDPIDWhere.Trim() != "")
        //            {
        //                strDPIDWhere = " and Right(Rtrim(ld_dpid),2) in ( " + strDPIDWhere + ")";
        //            }
        //        }


        //        string strClientWhere = "";
        //        if (Code.Trim() != "")
        //        {
        //            if (Select.Trim() == "CL")
        //            {
        //                strClientWhere = " and cm_cd = '" + Code.Trim() + "' ";
        //            }
        //            else if (Select.Trim() == "FM")
        //            {
        //                strClientWhere = " and cm_familycd = '" + Code.Trim() + "' ";
        //            }
        //            else if (Select.Trim() == "GR")
        //            {
        //                strClientWhere = " and cm_groupcd = '" + Code.Trim() + "' ";
        //            }
        //            else if (Select.Trim() == "BR")
        //            {
        //                strClientWhere = " and cm_brboffcode = '" + Code.Trim() + "' ";
        //            }
        //        }


        //        if (!IsSubroker)
        //        {s
        //            if (cmbActType == "0")
        //            {
        //                strClientWhere = " and cm_schedule=49843750";
        //            }
        //            else if (cmbActType == "2")
        //            {
        //            }
        //            // strClient = " "
        //            else
        //            {
        //                strClientWhere = " cm_schedule=49843750";
        //            }
        //        }



        //        if (cmbLedgerList == "1")
        //        {
        //            strDrCr = " and ld_debitflag = 'D' ";
        //        }
        //        else if (cmbLedgerList == "2")
        //        {
        //            strDrCr = " and ld_debitflag = 'C' ";
        //        }
        //        else
        //        {
        //            strDrCr = " ";
        //        }


        //        if (chkConfirmation == "0")
        //        {
        //            int intSelected = 0;

        //            string[] LedgerList = chkLedgerList.Trim().Split(',');
        //            for (int icount = 0, loopTo = (LedgerList.Length) - 1; icount <= loopTo; icount++)
        //            {
        //                if (chkLedgerList == "1")
        //                {
        //                    intSelected += 1;
        //                }
        //            }
        //        }




        //        UtilityModel myutil = new UtilityModel();
        //        LibraryModel mylib = new LibraryModel();

        //        if (chrSpecialClient == "0")
        //        {
        //            strClientWhere = strClientWhere + " and cm_specialyn <> 'Y' ";
        //        }

        //        if (!IsSubroker)
        //        {
        //            strClientWhere = strClientWhere + "and exists " + myutil.LoginAccess("ld_clientcd");
        //        }

        //        if (cmbActType == "1")
        //        {
        //            strClientWhere = " and ld_clientcd in (select distinct cm_brkggroup from client_master where " + strClientWhere + " )";
        //        }


        //        if (chkConfirmation == "1")
        //        {
        //            strSQL = "select rtrim(cm_name) + ' ['+rtrim(ld_clientcd)+']' as Code, ld_clientcd, ld_dt,ld_particular,ld_amount ld_debit, 0.0 ld_credit, ld_debitflag,  ld_documenttype, case ld_documentno when 0 then  case ld_documenttype When 'B' Then ld_documenttype + '/' + Ltrim(Rtrim(convert(char,ld_documentno))) else '' end  else ld_documenttype + '/' + Ltrim(Rtrim(convert(char,ld_documentno))) end ld_documentno , ld_entryno , isnull(ld_chequeno,'') ld_chequeno,cm_add1,cm_add2,cm_add3,cm_add4,cm_panno ,'1' as flag, ld_common,'' as ld_unclear , substring(ld_dpid, 2, 2) as ES,ld_commondt" + myutil.newline();
        //        }
        //        else
        //        {
        //            strSQL = "select rtrim(cm_name) + ' ['+rtrim(ld_clientcd)+']' as Code, ld_clientcd, ld_dt,ld_particular,ld_amount ld_debit, 0.0 ld_credit, ld_debitflag,  ld_documenttype, case ld_documentno when 0 then  case ld_documenttype When 'B' Then ld_documenttype + '/' + Ltrim(Rtrim(convert(char,ld_documentno))) else '' end  else ld_documenttype + '/' + Ltrim(Rtrim(convert(char,ld_documentno))) end ld_documentno , ld_entryno , isnull(ld_chequeno,'') ld_chequeno,cm_add1,cm_add2,cm_add3,cm_add4,cm_panno ,'1' as flag, ld_common,'' as ld_unclear , substring(ld_dpid, 2, 2) as ES,ld_commondt" + myutil.newline();
        //        }
        //        strSQL += "from Ledger, Client_master" + myutil.newline();
        //        if (cmbActType == "2")
        //        {
        //            strSQL = strSQL + " ,MrgTdgFin_Clients where ld_clientcd =  Rtrim(MTFC_CMCD) + '" + mylib.GetSysPARM("MTFP_SUFFIX") + "' and MTFC_CMCD = cm_cd ";
        //        }
        //        else
        //        {
        //            strSQL = strSQL + " where (ld_clientcd=cm_cd " + (Convert.ToBoolean(chkMrgnlegr) ? " or ld_clientcd=cm_brkggroup" : "") + ")";
        //        }
        //        // strSQL += "where ld_clientcd=cm_cd " + strDPIDWhere + myutil.newline();
        //        strSQL += "and cm_schedule=49843750" + myutil.newline();


        //        strSQL += strClientWhere + myutil.newline();
        //        strSQL += " and exists " + myutil.LoginAccess("ld_clientcd");
        //        strSQL += "and cm_specialyn <> 'Y'" + myutil.newline();

        //        strSQL += "and ld_dt >= '" + FromDate + "' and ld_dt <='" + ToDate + "'" + myutil.newline();

        //        strSQL += " and left(ld_DPID,1)= '" + HttpContext.Current.Session["CompanyCode"].ToString() + "'";
        //        strSQL += "union all" + myutil.newline();
        //        strSQL += "select   rtrim(cm_name) + ' ['+rtrim(ld_clientcd)+']' as Code, ld_clientcd,'" + FromDate + "' ld_dt, 'Opening Balance' as ld_particular,sum(ld_amount) as ld_amount,0, case sign(sum(ld_amount)) when -1 then 'C' else 'D' end as ld_debitflag ,'' as ld_documenttype,'' as ld_documentno, 0 as ld_entryno ,'' as ld_chequeno,cm_add1,cm_add2,cm_add3,cm_add4,cm_panno  ,'0' as flag, '' as ld_common,'' as ld_unclear,'' ld_dpid,''" + myutil.newline();
        //        strSQL += "from Ledger, Client_master" + myutil.newline();
        //        strSQL += "where ld_clientcd=cm_cd  " + strDPIDWhere + myutil.newline();
        //        strSQL += "and cm_schedule=49843750" + myutil.newline();
        //        strSQL += strClientWhere + myutil.newline();
        //        strSQL += " and exists " + myutil.LoginAccess("ld_clientcd");
        //        strSQL += "and cm_specialyn <> 'Y'  and ld_dt<'" + FromDate + "'" + myutil.newline();
        //        strSQL += " and left(ld_DPID,1)= '" + HttpContext.Current.Session["CompanyCode"].ToString() + "'";
        //        strSQL += "group by ld_clientcd, cm_name,cm_add1,cm_add2,cm_add3,cm_add4,cm_panno" + myutil.newline();
        //        strSQL += "having sum(ld_amount)<>0" + myutil.newline();
        //        strSQL += "order by ld_clientcd,flag,ld_dt" + myutil.newline();



        //        DataTable dt = mylib.OpenDataTable(strSQL);

        //        string strClient = "";
        //        Decimal dblBal = 0;
        //        Decimal Debit = 0;
        //        Decimal Credit = 0;
        //        String strParticular = null;
        //        string strDate = null;
        //        if (dt.Rows.Count > 0)
        //        {
        //            strClient = dt.Rows[0]["ld_clientcd"].ToString().Trim();
        //        }
        //        foreach (DataRow dr in dt.Rows)
        //        {
        //            if (strClient.Trim() != dr["ld_clientcd"].ToString().Trim())
        //            {
        //                dblBal = 0;
        //            }

        //            strClient = dr["ld_clientcd"].ToString().Trim();
        //            Debit = Convert.ToDecimal(dr["ld_debit"]);
        //            strParticular = dr["ld_particular"].ToString().Trim();
        //            strDate = dr["ld_dt"].ToString().Trim();
        //            //strDate = myutil.dtos(strDate);
        //            strDate = strDate.Substring(6, 2) + "/" + strDate.Substring(4, 2) + "/" + strDate.Substring(0, 4);
        //            dblBal += Debit;
        //            Credit = 0;
        //            if (Debit < 0)
        //            {
        //                Credit = Debit * -1;
        //                Debit = 0;
        //            }
        //            Decimal dblShowBal = dblBal > 0 ? dblBal : dblBal * (-1);
        //            string flag = dblBal > 0 ? "Dr" : "Cr";
        //            if (dr["ld_chequeno"].ToString().Trim() != "")
        //            {
        //                strParticular = "[" + dr["ld_chequeno"].ToString().Trim() + "] " + dr["ld_particular"].ToString().Trim();
        //            }

        //            uList.Add(new Models.LedgerModel
        //            {
        //                ClientCd = dr["ld_clientcd"].ToString().Trim(),
        //                ClientName = dr["code"].ToString().Trim(),
        //                ExSeg = dr["ES"].ToString().Trim(),
        //                Voucher = dr["ld_documentno"].ToString().Trim(),
        //                Date = strDate,
        //                Particular = strParticular.Trim(),
        //                Debit = Debit,
        //                Credit = Credit,
        //                Balance = dblShowBal,
        //                Flag = flag,
        //                DocType = dr["ld_documenttype"].ToString().Trim(),
        //                Common = dr["ld_common"].ToString().Trim(),
        //                CommonDt = dr["ld_commondt"].ToString().Trim(),
        //                ld_clientcd = dr["ld_clientcd"].ToString().Trim(),


        //            });
        //        }
        //        return uList;
        //    }
        //    catch (Exception)
        //    {

        //        throw;
        //    }
        //}

        //public IEnumerable<LedgerModel> GetLedger(string Select, string Code, string FromDate, string ToDate, string strDPID)
        //{
        //    // string strDpId = "";
        //    int iTemp;
        //    string strDocFilter;
        //    bool blnDocMargin;
        //    bool blnDocBill;
        //    bool blnDocOpBal;
        //    string strDrCr;
        //    string strGroupFields = "";
        //    string cmbLedgerList = "0";
        //    string chkConfirmation = "0";
        //    string strFields = "";
        //    string chkMrgnlegr = "0";
        //    // string chkLedgerList = "";
        //    int iTempIndex;


        //    List<LedgerModel> uList = new List<LedgerModel>();

        //    try
        //    {

        //        blnDocMargin = true;
        //        blnDocBill = true;
        //        blnDocOpBal = true;
        //        string chrSpecialClient = "0";
        //        strDocFilter = "";

        //        string[] chkLedgerList = { "Receipts", "Payments", "Journals", "Debit Notes", "Credit Notes", "Bills", "Margins", "Expenses", "Opening Bal" };
        //        string[] arrTemp = new string[1];


        //        if (chkConfirmation == "1")
        //        {
        //            int intSelected = 9;

        //            strDocFilter = "";

        //            iTempIndex = 0;
        //            iTemp = 1;

        //            for (int i = 0; i < chkLedgerList.Length; i++)
        //            {

        //                if (chkLedgerList[i].ToString().Substring(0, 1) == "B")
        //                {
        //                    blnDocBill = true;
        //                }
        //                else if (chkLedgerList[i].ToString().Substring(0, 1) == "M")
        //                {
        //                    blnDocMargin = true;
        //                }
        //                else if (chkLedgerList[i].ToString().Substring(0, 1) == "O")
        //                {
        //                    blnDocOpBal = true;
        //                }
        //                else
        //                {
        //                    Array.Resize(ref arrTemp, iTempIndex);
        //                    arrTemp[iTemp] = "'" + chkLedgerList[i].ToString().Substring(0, 1) + "'";
        //                    iTemp = iTemp + 1;
        //                    iTempIndex = iTempIndex + 1;
        //                }

        //            }

        //            if (string.Join(",", arrTemp).Trim().Length > 0)
        //            {
        //                strDocFilter = strDocFilter + string.Join(",", arrTemp) + ")";
        //            }
        //            else
        //            {
        //                strDocFilter = "";
        //            }

        //            if (blnDocBill == true & blnDocMargin == true)
        //            {
        //                strDocFilter = strDocFilter + ((strDocFilter.Length > 0) ? " or " : " and ") + " ld_documentType = 'B' and (  CharIndex('BILL',Upper(ld_particular),1) > 0 Or CharIndex('EXER/ASSGN',Upper(ld_particular),1) > 0 Or  CharIndex('MRGN',Upper(ld_particular),1) > 0 ) " + (((strDocFilter).Length > 0) ? ")" : "");
        //            }
        //            else if (blnDocBill == true)
        //            {
        //                strDocFilter = strDocFilter + ((strDocFilter.Length > 0) ? " or " : " and ") + " ld_documentType = 'B' and (  CharIndex('BILL',Upper(ld_particular),1) > 0 Or CharIndex('EXER/ASSGN',Upper(ld_particular),1) > 0)" + (((strDocFilter).Length > 0) ? ")" : "");
        //            }
        //            else if (blnDocMargin == true)
        //            {
        //                strDocFilter = strDocFilter + ((strDocFilter.Length > 0) ? " or " : " and ") + " ld_documentType = 'B' and ( CharIndex('MRGN',Upper(ld_particular),1) > 0 )" + (((strDocFilter).Length > 0) ? ")" : "");
        //            }
        //            else if (!string.IsNullOrEmpty(strDocFilter.Trim()))
        //            {
        //                strDocFilter = strDocFilter + ")";
        //            }
        //        }



        //        if (cmbLedgerList == "1")
        //        {
        //            strDrCr = " and ld_debitflag = 'D' ";
        //        }
        //        else if (cmbLedgerList == "2")
        //        {
        //            strDrCr = " and ld_debitflag = 'C' ";
        //        }
        //        else
        //        {
        //            strDrCr = " ";
        //        }

        //        string strDPIDWhere = "";
        //        string strCondition = "";

        //        if (strDPID.Trim() != "")
        //        {
        //            String[] Dpid = strDPID.Trim().Split(',');
        //            for (int i = 0; i < Dpid.Length; i++)
        //            {
        //                if (Dpid[i].Trim() != "")
        //                {
        //                    strDPIDWhere += "'" + Dpid[i].Trim() + "',";
        //                }

        //            }
        //            if (Strings.Right(strDPIDWhere.Trim(), 1) == ",")
        //            {
        //                strDPIDWhere = Strings.Left(strDPIDWhere.Trim(), strDPIDWhere.Trim().Length - 1);
        //            }
        //            if (strDPIDWhere.Trim() != "")
        //            {
        //                strDPIDWhere = " and Right(Rtrim(ld_dpid),2) in ( " + strDPIDWhere + ")";
        //            }
        //        }
        //        string strClientWhere = "";

        //        string cmbActType = "0";

        //        if (cmbActType == "0")
        //        {
        //            strClientWhere = " and cm_schedule=49843750 ";
        //        }
        //        else if (cmbActType == "2")     // Application("CMSCHEDULE") remove for L account
        //        {
        //        }
        //        // strClient = " "
        //        else
        //        {
        //            strClientWhere = " cm_schedule=49843750 ";
        //        }


        //        if (Code.Trim() != "")
        //        {
        //            if (Select.Trim() == "CL")
        //            {
        //                strClientWhere = " and cm_cd = '" + Code.Trim() + "' ";
        //            }
        //            else if (Select.Trim() == "FM")
        //            {
        //                strClientWhere = " and cm_familycd = '" + Code.Trim() + "' ";
        //            }
        //            else if (Select.Trim() == "GR")
        //            {
        //                strClientWhere = " and cm_groupcd = '" + Code.Trim() + "' ";
        //            }
        //            else if (Select.Trim() == "BR")
        //            {
        //                strClientWhere = " and cm_brboffcode = '" + Code.Trim() + "' ";
        //            }
        //        }
        //        string strSql = "";
        //        // Boolean IsSubroker = false;
        //        UtilityModel myutil = new UtilityModel();
        //        LibraryModel myLib = new LibraryModel();

        //        if (chrSpecialClient == "0")
        //        {
        //            strClientWhere = strClientWhere + " and cm_specialyn <> 'Y' ";
        //        }

        //        //if (!IsSubroker)
        //        //{
        //        //    strClientWhere = strClientWhere + "and  exists " + myutil.LoginAccess("ld_clientcd");
        //        //}

        //        if (cmbActType == "1")
        //        {
        //            strClientWhere = " and ld_clientcd in (select distinct cm_brkggroup from client_master where " + strClientWhere + " )";
        //        }

        //        strFields = " rtrim(cm_name) + ' ['+rtrim(ld_clientcd)+']' as Code, ld_clientcd, ld_dt,ld_particular + case when isnull(se_endt,'')= '' then '' else ' ('+ SUBSTRING(se_endt,7,2)+'/'+ SUBSTRING(se_endt,5,2)+'/'+SUBSTRING(se_endt,3,2)+')' end ld_particular ,ld_amount ld_debit, 0.0 ld_credit, ld_debitflag, ";
        //        strFields = strFields + " ld_documenttype, case ld_documentno when 0 then  case ld_documenttype When 'B' Then ld_documenttype + '/' + Ltrim(Rtrim(convert(char,ld_documentno))) else '' end  else ld_documenttype + '/' + Ltrim(Rtrim(convert(char,ld_documentno))) end ld_documentno , ld_entryno , isnull(ld_chequeno,'') ld_chequeno,cm_add1,cm_add2,cm_add3,cm_add4,cm_panno ";
        //        strSql = "select " + strFields + ",'1' as flag, ld_common,'' as ld_unclear ,";
        //        strSql = strSql + " substring(ld_dpid, 2, 2) as ES,ld_commondt from Ledger left join Settlements on LD_Documenttype='B' and LD_Common = se_stlmnt and rtrim(se_endt)<>'' and PATINDEX('%/%',ld_particular )=0, Client_master ";
        //        if (cmbActType == "2")
        //        {
        //            strSql = strSql + (" ,MrgTdgFin_Clients where ld_clientcd =  Rtrim(MTFC_CMCD) + '" + myLib.GetSysParmSt("MTFP_SUFFIX", "") + "' and MTFC_CMCD = cm_cd ");
        //        }
        //        else
        //        {
        //            strSql = strSql + " where (ld_clientcd=cm_cd " + (chkMrgnlegr == "1" ? " or ld_clientcd=cm_brkggroup" : "") + ")";
        //        }

        //        strSql = strSql + strDPIDWhere + strClientWhere + strCondition + strDocFilter + strDrCr + myutil.newline();
        //        strSql += " and exists " + myutil.LoginAccess("ld_clientcd");



        //        strSql = strSql + "and ld_dt >= '" + FromDate + "' and ld_dt <='" + ToDate + "'" + strDocFilter + strDrCr;
        //        if (chkConfirmation == "1" | blnDocOpBal == true)
        //        {
        //            strFields = " rtrim(cm_name) + ' ['+rtrim(ld_clientcd)+']' as Code, ld_clientcd,'" + FromDate + "' as ld_dt, 'Opening Balance' as ld_particular,sum(ld_amount) as ld_amount,0, case sign(sum(ld_amount)) when -1 then 'C' else 'D' end as ld_debitflag ,'' as ld_documenttype,'' as ld_documentno, 0 as ld_entryno ,'' as ld_chequeno,cm_add1,cm_add2,cm_add3,cm_add4,cm_panno ";
        //            strGroupFields = " group by ld_clientcd, cm_name,cm_add1,cm_add2,cm_add3,cm_add4,cm_panno ";
        //            strSql = strSql + " union all select  " + strFields + " ,'0' as flag, '' as ld_common,'' as ld_unclear,'' ld_dpid,'' from Ledger, Client_master ";
        //            if (cmbActType == "2")
        //            {
        //                strSql = strSql + " ,MrgTdgFin_Clients where ld_clientcd =  Rtrim(MTFC_CMCD) + '" + myLib.GetSysParmSt("MTFP_SUFFIX", "") + "' and MTFC_CMCD = cm_cd ";
        //            }
        //            else
        //            {
        //                strSql = strSql + " where (ld_clientcd=cm_cd " + (chkMrgnlegr == "1" ? " or ld_clientcd=cm_brkggroup" : "") + ")";
        //            }

        //            strSql = strSql + strDPIDWhere + strClientWhere + myutil.newline();
        //            strSql += " and exists " + myutil.LoginAccess("ld_clientcd");

        //            strSql = strSql + " and ld_dt<'" + FromDate + "' ";
        //            strSql = strSql + strGroupFields + " having sum(ld_amount)<>0 ";
        //        }

        //        strSql = strSql + "order by ld_clientcd,flag,ld_dt";

        //        //strSQL = "select rtrim(cm_name) + ' ['+rtrim(ld_clientcd)+']' as Code, ld_clientcd, ld_dt,ld_particular,ld_amount ld_debit, 0.0 ld_credit, ld_debitflag,  ld_documenttype, case ld_documentno when 0 then  case ld_documenttype When 'B' Then ld_documenttype + '/' + Ltrim(Rtrim(convert(char,ld_documentno))) else '' end  else ld_documenttype + '/' + Ltrim(Rtrim(convert(char,ld_documentno))) end ld_documentno , ld_entryno , isnull(ld_chequeno,'') ld_chequeno,cm_add1,cm_add2,cm_add3,cm_add4,cm_panno ,'1' as flag, ld_common,'' as ld_unclear , substring(ld_dpid, 2, 2) as ES,ld_commondt" + myutil.newline();
        //        //strSQL += "from Ledger, Client_master" + myutil.newline();
        //        //strSQL += "where ld_clientcd=cm_cd " + strDPIDWhere + myutil.newline();
        //        //strSQL += "and cm_schedule=49843750" + myutil.newline();
        //        //strSQL += strClientWhere + myutil.newline();
        //        //strSQL += " and exists " + myutil.LoginAccess("ld_clientcd");
        //        //strSQL += "and cm_specialyn <> 'Y'" + myutil.newline();
        //        //strSQL += "and ld_dt >= '" + FromDate + "' and ld_dt <='" + ToDate + "'" + myutil.newline();
        //        //strSQL += " and left(ld_DPID,1)= '" + HttpContext.Current.Session["CompanyCode"].ToString() + "'";
        //        //strSQL += "union all" + myutil.newline();
        //        //strSQL += "select   rtrim(cm_name) + ' ['+rtrim(ld_clientcd)+']' as Code, ld_clientcd,'" + FromDate + "' ld_dt, 'Opening Balance' as ld_particular,sum(ld_amount) as ld_amount,0, case sign(sum(ld_amount)) when -1 then 'C' else 'D' end as ld_debitflag ,'' as ld_documenttype,'' as ld_documentno, 0 as ld_entryno ,'' as ld_chequeno,cm_add1,cm_add2,cm_add3,cm_add4,cm_panno  ,'0' as flag, '' as ld_common,'' as ld_unclear,'' ld_dpid,''" + myutil.newline();
        //        //strSQL += "from Ledger, Client_master" + myutil.newline();
        //        //strSQL += "where ld_clientcd=cm_cd  " + strDPIDWhere + myutil.newline();
        //        //strSQL += "and cm_schedule=49843750" + myutil.newline();
        //        //strSQL += strClientWhere + myutil.newline();
        //        //strSQL += " and exists " + myutil.LoginAccess("ld_clientcd");
        //        //strSQL += "and cm_specialyn <> 'Y'  and ld_dt<'" + FromDate + "'" + myutil.newline();
        //        //strSQL += " and left(ld_DPID,1)= '" + HttpContext.Current.Session["CompanyCode"].ToString() + "'";
        //        //strSQL += "group by ld_clientcd, cm_name,cm_add1,cm_add2,cm_add3,cm_add4,cm_panno" + myutil.newline();
        //        //strSQL += "having sum(ld_amount)<>0" + myutil.newline();
        //        //strSQL += "order by ld_clientcd,flag,ld_dt" + myutil.newline();
        //        LibraryModel mylib = new LibraryModel();
        //        DataTable dt = mylib.OpenDataTable(strSql);

        //        //strSql = "select rc_srno , rc_receiptdt, rc_clientcd, rc_amount,rc_debitflag ";
        //        //strSql += "from Receipts, client_master where rc_dpid<>'X' AND rc_clientcd=cm_cd ";
        //        //strSql += "and isnull(rc_cleareddt,'')='' ";
        //        //strSql += " and exists " + myutil.LoginAccess("ld_clientcd");
        //        //strSql += "and rc_receiptdt between '" + FromDate + "' and '" + ToDate + "' ";

        //        //DataTable dt = mylib.OpenDataTable(strSql);

        //        //double dblAmount = 0.0;
        //        //{
        //        //    for (int u = 0, loopTo = dt.Rows.Count - 1; u <= loopTo; u++)
        //        //    {
        //        //        dblAmount = Convert.ToDouble(dt.Rows[u]["rc_amount"]);
        //        //        for (int j = 0, loopTo1 = dt.Rows.Count - 1; j <= loopTo1; j++)
        //        //        {
        //        //            if (instr(1, "RP", dt.Rows[j]["ld_documenttype"]) > 0)
        //        //            {
        //        //                if (dt.Rows[j]["ld_clientcd"] == dt.Rows[u]["rc_clientcd"] & dt.Rows[u]["ld_debitflag"] == dt.Rows[u]["rc_debitflag"])
        //        //                {
        //        //                    if ((dt.Rows[u]["ld_dt"]) == dt.Rows[u]["rc_receiptdt"])
        //        //                    {
        //        //                        if (dt.Rows[u]["ld_debit"] == dt.Rows[u]["rc_amount"])
        //        //                        {
        //        //                            if (dblAmount == Convert.ToDouble(dt.Rows[u]["ld_debit"]))
        //        //                            {
        //        //                                if (dt.Rows[u]["rc_srno"] == Conversion.Val(string.Mid(dt.Rows[u]["ld_documentno"], 3, 7)))
        //        //                                {
        //        //                                    dt.Rows[u]["ld_unclear"] = "U";
        //        //                                    break;
        //        //                                }
        //        //                            }
        //        //                        }
        //        //                    }
        //        //                }
        //        //            }
        //        //        }
        //        //    }
        //        //}


        //        string strClient = "";
        //        Decimal dblBal = 0;
        //        Decimal Debit = 0;
        //        Decimal Credit = 0;
        //        String strParticular = null;
        //        string strDate = null;
        //        if (dt.Rows.Count > 0)
        //        {
        //            strClient = dt.Rows[0]["ld_clientcd"].ToString().Trim();
        //        }
        //        foreach (DataRow dr in dt.Rows)
        //        {
        //            if (strClient.Trim() != dr["ld_clientcd"].ToString().Trim())
        //            {
        //                dblBal = 0;
        //            }

        //            strClient = dr["ld_clientcd"].ToString().Trim();
        //            Debit = Convert.ToDecimal(dr["ld_debit"]);
        //            strParticular = dr["ld_particular"].ToString().Trim();
        //            strDate = dr["ld_dt"].ToString().Trim();
        //            //strDate = myutil.dtos(strDate);
        //            strDate = strDate.Substring(6, 2) + "/" + strDate.Substring(4, 2) + "/" + strDate.Substring(0, 4);
        //            dblBal += Debit;
        //            Credit = 0;
        //            if (Debit < 0)
        //            {
        //                Credit = Debit * -1;
        //                Debit = 0;
        //            }
        //            Decimal dblShowBal = dblBal > 0 ? dblBal : dblBal * (-1);
        //            string flag = dblBal > 0 ? "Dr" : "Cr";
        //            if (dr["ld_chequeno"].ToString().Trim() != "")
        //            {
        //                strParticular = "[" + dr["ld_chequeno"].ToString().Trim() + "] " + dr["ld_particular"].ToString().Trim();
        //            }

        //            uList.Add(new Models.LedgerModel
        //            {
        //                ClientCd = dr["ld_clientcd"].ToString().Trim(),
        //                ClientName = dr["code"].ToString().Trim(),
        //                ExSeg = dr["ES"].ToString().Trim(),
        //                Voucher = dr["ld_documentno"].ToString().Trim(),
        //                Date = strDate,
        //                Particular = strParticular.Trim(),
        //                Debit = Debit,
        //                Credit = Credit,
        //                Balance = dblShowBal,
        //                Flag = flag,
        //                DocType = dr["ld_documenttype"].ToString().Trim(),
        //                Common = dr["ld_common"].ToString().Trim(),
        //                CommonDt = dr["ld_commondt"].ToString().Trim(),
        //                ld_clientcd = dr["ld_clientcd"].ToString().Trim(),


        //            });
        //        }
        //        return uList;
        //    }
        //    catch (Exception)
        //    {

        //        throw;
        //    }
        //}

        public object GetReportSession(string repoSessionName)
        {
            XtraReport report = new XtraReport();

            return report.Parameters[repoSessionName].Value;
        }



        public IEnumerable<LedgerModel> GetLedger(string Select, string Code1, string Code, string FromDate, string ToDate, string strDPID, string strLedgerListid, string strchkConfirmation, string strcmbLedgerList, string strcmbActType, string chkMrgnlegr, Boolean isReport = false)
        {
            // string strDpId = "";
            int iTemp;
            int iTempIndex;
            string strDocFilter;
            bool blnDocMargin;
            bool blnDocBill;
            bool blnDocOpBal;
            string strDrCr;
            string strGroupFields = "";
            double dblAmount = 0.0;
            //string chkConfirmation = "0";
            string strFields = "";
            //string chkMrgnlegr = "";


            List<LedgerModel> uList = new List<LedgerModel>();
            UtilityModel myutil = new UtilityModel();
            LibraryModel myLib = new LibraryModel();

            HttpContext.Current.Session["CMSCHEDULE"] = myLib.fnGetSysParam("CMSCHEDULE");

            //FromDate = myutil.dtos(FromDate);
            //ToDate = myutil.dtos(ToDate);

            try
            {

                blnDocMargin = true;
                blnDocBill = true;
                blnDocOpBal = true;
                string chrSpecialClient = "0";
                strDocFilter = "";
                string[] chkLedgerList = strLedgerListid.Split(',');
                string[] arrTemp = new string[0];

                string strsql = "select um_brcode, substring(um_specialrights ,4,1) um_spClntYn,  (select count(*) from entity_master) um_Companies from user_master where um_user_id='" + myutil.gstrUserCd() + "'";

                DataTable dt1 = myLib.OpenDataTable(strsql);

                if (dt1.Rows.Count > 0)
                {
                    chrSpecialClient = dt1.Rows[0]["um_spClntYn"].ToString();

                }
                if (strchkConfirmation == "0")
                {
                    int intSelected = 9;

                    strDocFilter = "";
                    if (!(chkLedgerList.Length == intSelected))
                    {
                        blnDocOpBal = false;
                        blnDocBill = false;
                        blnDocMargin = false;
                        strDocFilter = " and ( ld_documenttype in ( ";
                        iTemp = 0;
                        iTempIndex = 1;
                        for (int i = 0; i < chkLedgerList.Length; i++)
                        {
                            if (chkLedgerList[i].ToString() != "")
                            {

                                if (chkLedgerList[i].ToString().Substring(0, 1) == "B")
                                {
                                    blnDocBill = true;
                                }
                                else if (chkLedgerList[i].ToString().Substring(0, 1) == "M")
                                {
                                    blnDocMargin = true;
                                }
                                else if (chkLedgerList[i].ToString().Substring(0, 1) == "O")
                                {
                                    blnDocOpBal = true;
                                }
                                else
                                {
                                    Array.Resize(ref arrTemp, iTempIndex);
                                    arrTemp[iTemp] = "'" + chkLedgerList[i].ToString().Substring(0, 1) + "'";
                                    iTemp = iTemp + 1;
                                    iTempIndex = iTempIndex + 1;
                                }
                            }
                        }

                        if (string.Join(",", arrTemp).Trim().Length > 0)
                        {
                            strDocFilter = strDocFilter + string.Join(",", arrTemp) + ")";
                        }
                        else
                        {
                            strDocFilter = "";
                        }

                        if (blnDocBill == true & blnDocMargin == true)
                        {
                            strDocFilter = strDocFilter + ((strDocFilter.Length > 0) ? " or " : " and ") + " ld_documentType = 'B' and (  CharIndex('BILL',Upper(ld_particular),1) > 0 Or CharIndex('EXER/ASSGN',Upper(ld_particular),1) > 0 Or  CharIndex('MRGN',Upper(ld_particular),1) > 0 ) " + (((strDocFilter).Length > 0) ? ")" : "");
                        }
                        else if (blnDocBill == true)
                        {
                            strDocFilter = strDocFilter + ((strDocFilter.Length > 0) ? " or " : " and ") + " ld_documentType = 'B' and (  CharIndex('BILL',Upper(ld_particular),1) > 0 Or CharIndex('EXER/ASSGN',Upper(ld_particular),1) > 0)" + (((strDocFilter).Length > 0) ? ")" : "");
                        }
                        else if (blnDocMargin == true)
                        {
                            strDocFilter = strDocFilter + ((strDocFilter.Length > 0) ? " or " : " and ") + " ld_documentType = 'B' and ( CharIndex('MRGN',Upper(ld_particular),1) > 0 )" + (((strDocFilter).Length > 0) ? ")" : "");
                        }
                        else if (!string.IsNullOrEmpty(strDocFilter.Trim()))
                        {
                            strDocFilter = strDocFilter + ")";
                        }
                    }
                }


                if (strcmbLedgerList == "1")
                {
                    strDrCr = " and ld_debitflag = 'D' ";
                }
                else if (strcmbLedgerList == "2")
                {
                    strDrCr = " and ld_debitflag = 'C' ";
                }
                else
                {
                    strDrCr = " ";
                }

                string strDPIDWhere = "";
                string strCondition = "";


                if (FromDate != "" & ToDate != "")
                {
                    strCondition = strCondition + (Strings.Trim(ToDate) == myutil.dtos(DateTime.Today.ToString("dd/MM/yyyy")) ? " and ld_dt >= '" + FromDate + "'" : " and ld_dt >= '" + FromDate + "' and ld_dt <='" + ToDate + "'");
                }
                else if (Strings.Trim(FromDate) != "" & Strings.Trim(ToDate) == "")
                {
                    strCondition = strCondition + " and ld_dt >= '" + Strings.Trim(myutil.dtos(FromDate)) + "'";
                }
                else if (Strings.Trim(FromDate) == "" & Strings.Trim(ToDate) != "")
                {
                    strCondition = strCondition + (Strings.Trim(ToDate) == DateTime.Today.ToString("dd/MM/yyyy") ? "" : " and ld_dt <= '" + ToDate + "' ");
                }



                String[] Dpid = strDPID.Trim().Split(',');
                for (int i = 0; i < Dpid.Length; i++)
                {
                    if (Dpid[i].Trim() != "")
                    {
                        strDPIDWhere += "'" + Dpid[i].Trim() + "',";
                    }

                }
                if (Strings.Right(strDPIDWhere.Trim(), 1) == ",")
                {
                    strDPIDWhere = Strings.Left(strDPIDWhere.Trim(), strDPIDWhere.Trim().Length - 1);
                }
                if (strDPIDWhere.Trim() != "")
                {
                    strDPIDWhere = " and Right(Rtrim(ld_dpid),2) in ( " + strDPIDWhere + ")";
                }

                string strClientWhere = "";

                Boolean IsSubroker = false;
                if (Code.Trim() != "" && Convert.ToInt32(myLib.fnFireQuery("Client_master", "count(0)", " cm_schedule=" + ((isReport) ? GetReportSession("CMSCHEDULE").ToString() : HttpContext.Current.Session["CMSCHEDULE"]) + " and cm_cd", Strings.Trim(Code), false)) == 0)
                {
                    IsSubroker = Convert.ToInt32(myLib.fnFireQuery("Client_master,SubBrokers", "count(0)", " cm_subbroker=RM_CD  " + HttpContext.Current.Session["LoginAccessOld"] + "  and RM_GLActCode", Strings.Trim(Code), false)) > 0;
                }

                if (!IsSubroker)
                {
                    if (strcmbActType == "0")
                    {
                        strClientWhere = " and cm_schedule='" + HttpContext.Current.Session["CMSCHEDULE"] + "'";
                    }
                    else if (strcmbActType == "2")     // Application("CMSCHEDULE") remove for L account
                    {
                    }
                    // strClient = " "
                    else
                    {
                        strClientWhere = "cm_schedule='" + HttpContext.Current.Session["CMSCHEDULE"] + "'";
                    }
                }


                if (!string.IsNullOrEmpty(Strings.Trim(Code.Trim())))
                {
                    if (Select.Trim() == "CL")
                    {
                        if (Code.Trim() != "" & Code1.Trim() != "" & IsSubroker == false)
                        {
                            strClientWhere = strClientWhere + "and cm_cd >= '" + Code.Trim() + "' and cm_cd <= '" + Code1.Trim() + "'";
                        }
                        else if (Code.Trim() != "" & Code1.Trim() == "" & IsSubroker == false)
                        {
                            strClientWhere = strClientWhere + "and cm_cd = '" + Code.Trim() + "'";
                        }
                        else if (Code.Trim() == "" & Code1.Trim() != "")
                        {
                            strClientWhere = strClientWhere + "and cm_cd <= '" + Code1.Trim() + "'";
                        }
                        else if (Code.Trim() != "" & IsSubroker == true)
                        {
                            strClientWhere = strClientWhere + " and cm_cd in (select RM_GLActCode  from SubBrokers ,Client_master where  cm_subbroker = RM_CD and RM_GLActCode = '" + Code.Trim() + "'" + HttpContext.Current.Session["LoginAccessOld"] + " )";
                        }
                    }
                    else if (Select.Trim() == "FM")
                    {
                        strClientWhere = strClientWhere + " and cm_familycd = '" + Code.Trim() + "' ";
                    }
                    else if (Select.Trim() == "GR")
                    {
                        strClientWhere = strClientWhere + " and cm_groupcd = '" + Code.Trim() + "'";
                    }
                    else if (Select.Trim() == "SB")
                    {
                        strClientWhere = strClientWhere + " and cm_subbroker = '" + Code.Trim() + "' ";
                    }
                    else if (Select.Trim() == "RM")
                    {
                        strClientWhere = strClientWhere + " and rtrim(cm_dpactno) = '" + Code.Trim() + "' ";
                    }
                }

                //if (Code.Trim() != "")
                //{
                //    if (Select.Trim() == "CL")
                //    {
                //        strClientWhere = " and cm_cd = '" + Code.Trim() + "' ";
                //    }
                //    else if (Select.Trim() == "FM")
                //    {
                //        strClientWhere = " and cm_familycd = '" + Code.Trim() + "' ";
                //    }
                //    else if (Select.Trim() == "GR")
                //    {
                //        strClientWhere = " and cm_groupcd = '" + Code.Trim() + "' ";
                //    }
                //    else if (Select.Trim() == "BR")
                //    {
                //        strClientWhere = " and cm_brboffcode = '" + Code.Trim() + "' ";
                //    }
                //}
                string strSql = "";



                if (chrSpecialClient == "0")
                {
                    strClientWhere = strClientWhere + " and cm_specialyn <> 'Y' ";
                }

                if (!IsSubroker)
                {
                    strClientWhere = strClientWhere + HttpContext.Current.Session["LoginAccessOld"];
                }

                if (strcmbActType == "1")
                {
                    strClientWhere = " and ld_clientcd in (select distinct cm_brkggroup from client_master where " + strClientWhere + " )";
                }

                strFields = " rtrim(cm_name) + ' ['+rtrim(ld_clientcd)+']' as Code, ld_clientcd, ld_dt,ld_particular + case when isnull(se_endt,'')= '' then '' else ' ('+ SUBSTRING(se_endt,7,2)+'/'+ SUBSTRING(se_endt,5,2)+'/'+SUBSTRING(se_endt,3,2)+')' end ld_particular ,ld_amount ld_debit, 0.0 ld_credit, ld_debitflag, ";
                strFields = strFields + " ld_documenttype, case ld_documentno when 0 then  case ld_documenttype When 'B' Then ld_documenttype + '/' + Ltrim(Rtrim(convert(char,ld_documentno))) else '' end  else ld_documenttype + '/' + Ltrim(Rtrim(convert(char,ld_documentno))) end ld_documentno , ld_entryno , isnull(ld_chequeno,'') ld_chequeno,cm_add1,cm_add2,cm_add3,cm_add4,cm_panno,cm_pincode ";
                strSql = "select " + strFields + ",'1' as flag, ld_common,'' as ld_unclear ,";
                strSql = strSql + " substring(ld_dpid, 2, 2) as ES,ld_commondt from Ledger left join Settlements on LD_Documenttype='B' and LD_Common = se_stlmnt and rtrim(se_endt)<>'' and PATINDEX('%/%',ld_particular )=0, Client_master ";
                if (strcmbActType == "2")
                {
                    strSql = strSql + (" ,MrgTdgFin_Clients where ld_clientcd =  Rtrim(MTFC_CMCD) + '" + myLib.GetSysParmSt("MTFP_SUFFIX", "") + "' and MTFC_CMCD = cm_cd ");
                }
                else
                {
                    strSql = strSql + " where (ld_clientcd=cm_cd " + (chkMrgnlegr == "1" ? " or ld_clientcd=cm_brkggroup" : "") + ")";
                }

                strSql = strSql + strDPIDWhere + strClientWhere + strCondition + strDocFilter + strDrCr + myutil.newline();
                //strSql += " and exists " + myutil.LoginAccess("ld_clientcd");



                // strSql = strSql + "and ld_dt >= '" + FromDate + "' and ld_dt <='" + ToDate + "'" + strDocFilter + strDrCr;
                if (strchkConfirmation == "1" | blnDocOpBal == true)
                {
                    strFields = " rtrim(cm_name) + ' ['+rtrim(ld_clientcd)+']' as Code, ld_clientcd,'" + FromDate + "' as ld_dt, 'Opening Balance' as ld_particular,sum(ld_amount) as ld_amount,0, case sign(sum(ld_amount)) when -1 then 'C' else 'D' end as ld_debitflag ,'' as ld_documenttype,'' as ld_documentno, 0 as ld_entryno ,'' as ld_chequeno,cm_add1,cm_add2,cm_add3,cm_add4,cm_panno,cm_pincode ";
                    strGroupFields = " group by ld_clientcd, cm_name,cm_add1,cm_add2,cm_add3,cm_add4,cm_panno,cm_pincode ";
                    strSql = strSql + " union all select  " + strFields + " ,'0' as flag, '' as ld_common,'' as ld_unclear,'' ld_dpid,'' from Ledger, Client_master ";
                    if (strcmbActType == "2")
                    {
                        strSql = strSql + " ,MrgTdgFin_Clients where ld_clientcd =  Rtrim(MTFC_CMCD) + '" + myLib.GetSysParmSt("MTFP_SUFFIX", "") + "' and MTFC_CMCD = cm_cd ";
                    }
                    else
                    {
                        strSql = strSql + " where (ld_clientcd=cm_cd " + (chkMrgnlegr == "1" ? " or ld_clientcd=cm_brkggroup" : "") + ")";
                    }

                    strSql = strSql + strDPIDWhere + strClientWhere + myutil.newline();
                    // strSql += " and exists " + myutil.LoginAccess("ld_clientcd");

                    strSql = strSql + " and ld_dt<'" + FromDate + "' ";
                    strSql = strSql + strGroupFields + " having sum(ld_amount)<>0 ";
                }

                strSql = strSql + "order by ld_clientcd,flag,ld_dt";

                //strSQL = "select rtrim(cm_name) + ' ['+rtrim(ld_clientcd)+']' as Code, ld_clientcd, ld_dt,ld_particular,ld_amount ld_debit, 0.0 ld_credit, ld_debitflag,  ld_documenttype, case ld_documentno when 0 then  case ld_documenttype When 'B' Then ld_documenttype + '/' + Ltrim(Rtrim(convert(char,ld_documentno))) else '' end  else ld_documenttype + '/' + Ltrim(Rtrim(convert(char,ld_documentno))) end ld_documentno , ld_entryno , isnull(ld_chequeno,'') ld_chequeno,cm_add1,cm_add2,cm_add3,cm_add4,cm_panno ,'1' as flag, ld_common,'' as ld_unclear , substring(ld_dpid, 2, 2) as ES,ld_commondt" + myutil.newline();
                //strSQL += "from Ledger, Client_master" + myutil.newline();
                //strSQL += "where ld_clientcd=cm_cd " + strDPIDWhere + myutil.newline();
                //strSQL += "and cm_schedule=49843750" + myutil.newline();
                //strSQL += strClientWhere + myutil.newline();
                //strSQL += " and exists " + myutil.LoginAccess("ld_clientcd");
                //strSQL += "and cm_specialyn <> 'Y'" + myutil.newline();
                //strSQL += "and ld_dt >= '" + FromDate + "' and ld_dt <='" + ToDate + "'" + myutil.newline();
                //strSQL += " and left(ld_DPID,1)= '" + HttpContext.Current.Session["CompanyCode"].ToString() + "'";
                //strSQL += "union all" + myutil.newline();
                //strSQL += "select   rtrim(cm_name) + ' ['+rtrim(ld_clientcd)+']' as Code, ld_clientcd,'" + FromDate + "' ld_dt, 'Opening Balance' as ld_particular,sum(ld_amount) as ld_amount,0, case sign(sum(ld_amount)) when -1 then 'C' else 'D' end as ld_debitflag ,'' as ld_documenttype,'' as ld_documentno, 0 as ld_entryno ,'' as ld_chequeno,cm_add1,cm_add2,cm_add3,cm_add4,cm_panno  ,'0' as flag, '' as ld_common,'' as ld_unclear,'' ld_dpid,''" + myutil.newline();
                //strSQL += "from Ledger, Client_master" + myutil.newline();
                //strSQL += "where ld_clientcd=cm_cd  " + strDPIDWhere + myutil.newline();
                //strSQL += "and cm_schedule=49843750" + myutil.newline();
                //strSQL += strClientWhere + myutil.newline();
                //strSQL += " and exists " + myutil.LoginAccess("ld_clientcd");
                //strSQL += "and cm_specialyn <> 'Y'  and ld_dt<'" + FromDate + "'" + myutil.newline();
                //strSQL += " and left(ld_DPID,1)= '" + HttpContext.Current.Session["CompanyCode"].ToString() + "'";
                //strSQL += "group by ld_clientcd, cm_name,cm_add1,cm_add2,cm_add3,cm_add4,cm_panno" + myutil.newline();
                //strSQL += "having sum(ld_amount)<>0" + myutil.newline();
                //strSQL += "order by ld_clientcd,flag,ld_dt" + myutil.newline();
                LibraryModel mylib = new LibraryModel();
                DataTable dt = mylib.OpenDataTable(strSql);


                DataTable DTUnclear = new DataTable();

                strSQL = "select rc_srno , rc_receiptdt, rc_clientcd, rc_amount,rc_debitflag ";
                strSQL = strSQL + "from Receipts, client_master where rc_dpid<>'X' AND rc_clientcd=cm_cd ";
                strSQL = strSQL + "and isnull(rc_cleareddt,'')='' " + HttpContext.Current.Session["LoginAccessOld"]; // ' Session("LoginAccess")
                strSQL = strSQL + "and rc_receiptdt between '" + Strings.Trim(FromDate) + "' and '" + Strings.Trim(ToDate) + "' ";

                DTUnclear = mylib.OpenDataTable(strSQL);

                for (int u = 0; u <= DTUnclear.Rows.Count - 1; u++)
                {
                    dblAmount = Convert.ToDouble(DTUnclear.Rows[u]["rc_amount"]);
                    for (int j = 0; j <= dt.Rows.Count - 1; j++)

                    {
                        string s = "RP";
                        if (s.Contains(dt.Rows[j]["ld_documenttype"].ToString().Trim()) == true)
                        {
                            if (dt.Rows[j]["ld_clientcd"].ToString().Trim() == DTUnclear.Rows[u]["rc_clientcd"].ToString().Trim() && dt.Rows[j]["ld_debitflag"].ToString().Trim() == DTUnclear.Rows[u]["rc_debitflag"].ToString().Trim())
                            {
                                if (dt.Rows[j]["ld_dt"].ToString().Trim() == DTUnclear.Rows[u]["rc_receiptdt"].ToString().Trim())
                                {
                                    if (dt.Rows[j]["ld_debit"].ToString().Trim() == DTUnclear.Rows[u]["rc_amount"].ToString().Trim())
                                    {
                                        if (dblAmount == Convert.ToDouble(dt.Rows[j]["ld_debit"]))
                                        {
                                            if (DTUnclear.Rows[u]["rc_srno"].ToString().Trim() == (Strings.Mid(dt.Rows[j]["ld_documentno"].ToString().Trim(), 3, 7)))
                                            {
                                                dt.Rows[j]["ld_unclear"] = "U";
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                string strClient = "";
                Decimal dblBal = 0;
                Decimal Debit = 0;
                Decimal Credit = 0;
                String strParticular = null;
                string strDate = null;
                if (dt.Rows.Count > 0)
                {
                    strClient = dt.Rows[0]["ld_clientcd"].ToString().Trim();
                }
                foreach (DataRow dr in dt.Rows)
                {
                    if (strClient.Trim() != dr["ld_clientcd"].ToString().Trim())
                    {
                        dblBal = 0;
                    }

                    strClient = dr["ld_clientcd"].ToString().Trim();
                    Debit = Convert.ToDecimal(dr["ld_debit"]);
                    strParticular = dr["ld_particular"].ToString().Trim();
                    strDate = dr["ld_dt"].ToString().Trim();
                    //strDate = myutil.dtos(strDate);
                    strDate = strDate.Substring(6, 2) + "/" + strDate.Substring(4, 2) + "/" + strDate.Substring(0, 4);
                    dblBal += Debit;
                    Credit = 0;
                    if (Debit < 0)
                    {
                        Credit = Debit * -1;
                        Debit = 0;
                    }
                    Decimal dblShowBal = dblBal > 0 ? dblBal : dblBal * (-1);
                    string flag = dblBal > 0 ? "Dr" : "Cr";
                    if (dr["ld_chequeno"].ToString().Trim() != "")
                    {
                        strParticular = "[" + dr["ld_chequeno"].ToString().Trim() + "] " + dr["ld_particular"].ToString().Trim();
                    }

                    uList.Add(new Models.LedgerModel
                    {
                        ClientCd = dr["ld_clientcd"].ToString().Trim(),
                        ClientName = dr["code"].ToString().Trim(),
                        ExSeg = dr["ES"].ToString().Trim(),
                        Voucher = dr["ld_documentno"].ToString().Trim(),
                        Date = strDate,
                        Particular = strParticular.Trim(),
                        Debit = Debit,
                        Credit = Credit,
                        Balance = dblShowBal,
                        Flag = flag,
                        DocType = dr["ld_documenttype"].ToString().Trim(),
                        Common = dr["ld_common"].ToString().Trim(),
                        CommonDt = dr["ld_commondt"].ToString().Trim(),
                        ld_clientcd = dr["ld_clientcd"].ToString().Trim(),
                        Add1 = dr["cm_add1"].ToString().Trim(),
                        Add2 = dr["cm_add2"].ToString().Trim(),
                        Add3 = dr["cm_add3"].ToString().Trim(),
                        Add4 = dr["cm_add4"].ToString().Trim(),
                        Panno = dr["cm_panno"].ToString().Trim(),
                        Pincode = dr["cm_pincode"].ToString().Trim(),
                        unclear = dr["ld_unclear"].ToString().Trim(),

                    });
                }
                return uList;
            }
            catch (Exception)
            {

                throw;
            }
        }

        public IEnumerable<LedgerModel> GetLedgerCom(string Select, string Code, string FromDate, string ToDate, string strDPID, string strcmbActType)

        {
            LibraryModel mylib = new LibraryModel(true);
            UtilityModel myutil = new UtilityModel();
            UtilityDBModel mydbutil = new UtilityDBModel();

            string strClient = "";
            string strFields = "";
            string strCondition = "";
            string strGroupFields = "";
            string strSql = "";
            string cm_schedule = "49843750";
            SqlTransaction tran1;
            string strDpId = "";
            Boolean IsSubroker = false;
            string chrSpecialClient;
            string strDPIDWhere = "";
            double dblAmount = 0.0;
            DataTable dt = new DataTable();
            DataTable dtclear = new DataTable();

            FromDate = myutil.dtos(FromDate);
            ToDate = myutil.dtos(ToDate);

            List<LedgerModel> uList = new List<LedgerModel>();

            string ExCommex = "";
            string[] strArray = strDPID.Split(',');

            bool Cofirst = true;
            foreach (string obj in strArray)
            {
                if (obj.Length < 2)
                {
                    if (Cofirst)
                    {
                        ExCommex = obj;
                        Cofirst = false;
                    }
                    else
                    {
                        ExCommex = obj + "," + ExCommex;
                    }
                }

                //your insert query
            }

            chrSpecialClient = "0";
            strSql = "select um_brcode, substring(um_specialrights ,4,1) um_spClntYn, " + " (select count(*) from entity_master) um_Companies" + " from user_master where um_user_id='" + HttpContext.Current.Session["gstrUsercd"] + "'";

            SqlConnection SQLConnComex = mydbutil.commexTemp_conn("Commex");

            mylib.OpenDataTable(strSql, SQLConnComex);

            //if (dt.Rows.Count > 0)
            //{
            //    chrSpecialClient = dt.Rows[0]["um_spClntYn"].ToString();

            // if(Strings.Len((dt.Rows[0]["um_brcode"]) = 0 || (dt.Rows[0]["um_Companies"]) * 2 = Strings.Len(dt.Rows[0]["um_brcode"])
            //        { }
            //    else
            //    {
            //    }
            //}
            //else
            //{
            //}


            //if (strDPID.Trim() != "")
            //{
            //    String[] Dpid = strDPID.Trim().Split(',');
            //    for (int i = 0; i < Dpid.Length; i++)
            //    {
            //        if (Dpid[i].Trim() != "")
            //        {
            //            strDPIDWhere += "'" + Dpid[i].Trim() + "',";
            //        }

            //    }
            //    if (Strings.Right(strDPIDWhere.Trim(), 1) == ",")
            //    {
            //        strDPIDWhere = Strings.Left(strDPIDWhere.Trim(), strDPIDWhere.Trim().Length - 1);
            //    }
            //    if (strDPIDWhere.Trim() != "")
            //    {
            //        strDPIDWhere = " and Right(Rtrim(ld_dpid),2) in ( " + strDPIDWhere + ")";
            //    }
            //}
            // Boolean IsSubroker = false;

            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {
                curCon.Open();

                if (!string.IsNullOrEmpty(Strings.Trim(Code)) && Convert.ToInt32(mylib.fnFireQuery("Client_master", "count(0)", " cm_schedule=" + cm_schedule + " and cm_cd", Strings.Trim(Code), false, curCon)) == 0)
                {
                    IsSubroker = Convert.ToInt32(mylib.fnFireQuery("Client_master,SubBrokers", "count(0)", " cm_subbroker=RM_CD  " + HttpContext.Current.Session["LoginAccessOld"] + "  and RM_GLActCode", Strings.Trim(Code), false, curCon)) > 0;
                }

                curCon.Close();

            }


            if (!IsSubroker)
            {
                if (strcmbActType == "0")
                {
                    strClient = " and cm_schedule=" + cm_schedule + " ";
                }
                else
                {
                    strClient = " cm_schedule=" + cm_schedule + " ";
                }
            }

            if (Select.Trim() != "")
            {
                switch (Select)
                {
                    case "CL":
                        {
                            //strClient = " and cm_cd in ('acs9098', '26555')";
                            strClient = strClient + " and cm_cd = '" + Code + "'";
                            break;
                        }

                    case "GR":
                        {
                            strClient = strClient + " and cm_groupcd = '" + Code + "'";
                            break;
                        }

                    case "FM":
                        {
                            strClient = strClient + " and cm_familycd = '" + Code + "'";
                            break;
                        }

                    case "SB":
                        {
                            strClient = strClient + " and cm_subbroker = '" + Code + "'";
                            break;
                        }

                    case "BR":
                        {
                            strClient = strClient + " and cm_brboffcode = '" + Code + "'";
                            break;
                        }
                    case "ALL":
                        {
                            strClient = strClient + "";
                            break;
                        }
                }
            }

            strDpId = " and substring(ld_dpid,2,1) in ('" + strDPID.Replace(",", "','") + "')";
            strCondition = "";
            if (!string.IsNullOrEmpty(FromDate) & !string.IsNullOrEmpty(ToDate))
            {
                strCondition = strCondition + " and ld_dt >= '" + FromDate + "' and ld_dt <='" + ToDate + "'";
            }
            else if (!string.IsNullOrEmpty(FromDate) & string.IsNullOrEmpty(ToDate))
            {
                strCondition = strCondition + " and ld_dt >= '" + ToDate + "'";
            }
            else if (string.IsNullOrEmpty(FromDate) & !string.IsNullOrEmpty(ToDate))
            {
                strCondition = strCondition + " and ld_dt <= '" + ToDate + "' ";
            }




            if (chrSpecialClient == "0")
            {
                strClient = strClient + " and cm_specialyn <> 'Y' ";
            }

            if (!IsSubroker)
            {
                strClient = Convert.ToString(strClient) + " " + HttpContext.Current.Session["LoginAccessOld"];

            }

            if (strcmbActType == "1")
            {
                strClient = " and ld_clientcd in (select distinct cm_brkggroup from client_master where " + strClient + " )";
            }

            strFields = "rtrim(cm_name) + ' ['+rtrim(cm_cd)+']' as Code, ld_clientcd, ld_dt,ld_particular,ld_amount ld_debit, 0.0 ld_credit, ld_debitflag, ld_documenttype, case ld_documentno when 0 then '' else ld_documenttype + substring(convert(char(7),1000000+convert(numeric, ld_documentno)),2,6) end ld_documentno , ld_entryno , isnull(ld_chequeno,'') ld_chequeno,cm_add1,cm_add2,cm_add3,cm_add4,cm_panno ";
            strSql = "select  " + strFields + ",'1' as flag, ld_common,'' as ld_unclear,substring(ld_dpid,2,1) as Exch  ";
            strSql += " from Ledger, Client_master where";
            strSql = strSql + " ld_clientcd=cm_cd  " + strDpId + strClient + strCondition;
            strFields = " rtrim(cm_name) + ' ['+rtrim(cm_cd)+']' as Code, ld_clientcd,'" + FromDate + "' as ld_dt, 'Opening Balance' as ld_particular,sum(ld_amount) as ld_amount,0, case sign(sum(ld_amount)) when -1 then 'C' else 'D' end as ld_debitflag ,'' as ld_documenttype,'' as ld_documentno, 0 as ld_entryno ,'' as ld_chequeno,cm_add1,cm_add2,cm_add3,cm_add4,cm_panno ";
            strGroupFields = " group by ld_clientcd, cm_cd, cm_name,cm_add1,cm_add2,cm_add3,cm_add4,cm_panno ";
            strSql = strSql + " union all select  " + strFields + " ,'0' as flag, '' as ld_common,'' as ld_unclear,'' ld_dpid from Ledger, Client_master where ld_clientcd=cm_cd " + strDpId + strClient;
            strSql = strSql + " and ld_dt<'" + FromDate + "' ";
            strSql = strSql + strGroupFields + " having sum(ld_amount)<>0 order by ld_clientcd, ld_dt,flag ";


            string StrTranStat = "B";
            StrTranStat = "C";
            SQLConnComex = mydbutil.commexTemp_conn("Commex");

            dt = mylib.OpenDataTable(strSql, SQLConnComex);



            strSql = "select rc_srno , rc_receiptdt, rc_clientcd, rc_amount,rc_debitflag ";
            strSql = strSql + "from Receipts, client_master where rc_dpid<>'X' AND rc_clientcd=cm_cd ";
            strSql = strSql + "and isnull(rc_cleareddt,'')='' " + HttpContext.Current.Session["LoginAccessOld"];
            strSql = strSql + "and rc_receiptdt between '" + FromDate + "' and '" + ToDate + "' ";

            if (SQLConnComex.State == ConnectionState.Closed)
            {
                SQLConnComex.Open();
            }

            dtclear = mylib.OpenDataTable(strSql, SQLConnComex);





            for (int u = 0; u <= dtclear.Rows.Count - 1; u++)
            {
                dblAmount = Convert.ToDouble(dtclear.Rows[u]["rc_amount"]);
                for (int j = 0; j <= dt.Rows.Count - 1; j++)
                {
                    if ((Strings.InStr("RP", Convert.ToString(dt.Rows[j]["ld_documenttype"])) > 0))
                    {
                        if (dt.Rows[j]["ld_clientcd"] == dtclear.Rows[u]["rc_clientcd"] & dt.Rows[j]["ld_debitflag"] == dtclear.Rows[u]["rc_debitflag"])
                        {
                            if ((dt.Rows[j]["ld_dt"]) == dtclear.Rows[u]["rc_receiptdt"])
                            {
                                if (dblAmount == Convert.ToDouble(dt.Rows[j]["ld_debit"]))
                                {
                                    if (dtclear.Rows[u]["rc_srno"].ToString() == (Strings.Mid(dt.Rows[j]["ld_documentno"].ToString().Trim(), 2, 7)))
                                    {
                                        dt.Rows[j]["ld_unclear"] = "U";
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }



            Decimal dblBal = 0;
            Decimal Debit = 0;
            Decimal Credit = 0;
            String strParticular = null;
            string strDate = null;
            if (dt.Rows.Count > 0)
            {
                strClient = dt.Rows[0]["ld_clientcd"].ToString().Trim();
            }
            foreach (DataRow dr in dt.Rows)
            {
                if (strClient.Trim() != dr["ld_clientcd"].ToString().Trim())
                {
                    dblBal = 0;
                }

                strClient = dr["ld_clientcd"].ToString().Trim();
                Debit = Convert.ToDecimal(dr["ld_debit"]);
                strParticular = dr["ld_particular"].ToString().Trim();
                strDate = dr["ld_dt"].ToString().Trim();
                //strDate = myutil.dtos(strDate);
                strDate = strDate.Substring(6, 2) + "/" + strDate.Substring(4, 2) + "/" + strDate.Substring(0, 4);
                dblBal += Debit;
                Credit = 0;
                if (Debit < 0)
                {
                    Credit = Debit * -1;
                    Debit = 0;
                }
                Decimal dblShowBal = dblBal > 0 ? dblBal : dblBal * (-1);
                string flag = dblBal > 0 ? "Dr" : "Cr";
                if (dr["ld_chequeno"].ToString().Trim() != "")
                {
                    strParticular = "[" + dr["ld_chequeno"].ToString().Trim() + "] " + dr["ld_particular"].ToString().Trim();
                }

                uList.Add(new Models.LedgerModel
                {
                    ClientCd = dr["ld_clientcd"].ToString().Trim(),
                    ClientName = dr["code"].ToString().Trim(),
                    ExSeg = dr["Exch"].ToString().Trim(),
                    Voucher = dr["ld_documentno"].ToString().Trim(),
                    Date = strDate,
                    Particular = strParticular.Trim(),
                    Debit = Debit,
                    Credit = Credit,
                    Balance = dblShowBal,
                    //Flag = flag,
                    //DocType = dr["ld_documenttype"].ToString().Trim(),
                    //Common = dr["ld_common"].ToString().Trim(),
                    //CommonDt = dr["ld_commondt"].ToString().Trim(),
                    ld_clientcd = dr["ld_clientcd"].ToString().Trim(),
                    Add1 = dr["cm_add1"].ToString().Trim(),
                    Add2 = dr["cm_add2"].ToString().Trim(),
                    Add3 = dr["cm_add3"].ToString().Trim(),
                    Add4 = dr["cm_add4"].ToString().Trim(),
                    //Panno = dr["cm_panno"].ToString().Trim(),



                });


            }



            return uList;

        }


        public DataTable GetComBillPrint(string strDpid, string Code, string FromDt)
        {
            strDpid = strDpid.Replace("X", "");
            Double dblReverse = 0;
            string strsql = "";
            string strBillstDt;
            string strBillenDt;
            LibraryModel mylib = new LibraryModel(true);
            UtilityModel myutil = new UtilityModel();
            UtilityDBModel mydbutil = new UtilityDBModel();
            string IsTplusCommex;
            if ((string)HttpContext.Current.Session["IsTplusCommex"] == "Y")
            {
                IsTplusCommex = "Y";
            }
            else
            {
                IsTplusCommex = "N";
            }

            Boolean blnWhere = false;
            string strMode = "";
            string strClient = "";
            string strSqlDel;
            string strCondition = "";
            Boolean blnRecMTM = true;
            string strBilltype = "";
            if (FromDt.Length > 8) { FromDt = myutil.dtos(FromDt); }



            strBillstDt = FromDt;
            strBillenDt = FromDt;

            blnWhere = true;
            strCondition = strCondition + " and cm_cd >= '" + Code.Trim() + "' and cm_cd <='" + Code.Trim() + "'";

            SqlConnection SQLConnComex = mydbutil.commexTemp_conn("Commex");
            {
                SQLConnComex.Open();

                {
                    strsql = " CREATE TABLE #Tempdates11 ([bd_dt] [char] (8) NOT NULL )";

                    mylib.ExecSQL(strsql, SQLConnComex);

                    //strsql = "select count(*) from Fholiday_master where hm_companycode = '" + HttpContext.Current.Session["CommCompanyCode"] + "'";
                    strsql = "select count(*) from Fholiday_master where hm_companycode = '" + HttpContext.Current.Session["CommCompanyCode"] + "'";
                    strsql = strsql + " and hm_exchange in ( '" + (IsTplusCommex == "Y" ? strDpid.Replace("X", "") : strDpid) + "')";
                    strsql = strsql + " and hm_dt = '" + strBillstDt + "'";
                    mylib.ExecSQL(strsql, SQLConnComex);

                    DataTable dtHoliday = new DataTable();

                    if (dtHoliday.Rows.Count == 0)
                    {
                        strsql = "insert into #Tempdates11 values('" + strBillstDt + "')";
                        mylib.ExecSQL(strsql, SQLConnComex);
                    }
                    // strBillstDt = myLib.dtos(objutility.mfnDateAdd(Library.eAddDate.eDay, 1, strBillstDt))
                    //strBillstDt = myutil.dtos(mylib.AddDayDT(, strBillstDt));

                    strsql = "drop table #billcharges";
                    mylib.ExecSQL(strsql, SQLConnComex);

                    strsql = "CREATE TABLE [dbo].[#billcharges] (";
                    strsql = strsql + "[bc_dt] [char] (8) NOT NULL,";
                    strsql = strsql + "[bc_clientcd] [char] (8) NOT NULL,";
                    strsql = strsql + "[bc_desc] [char] (40) NOT NULL,";
                    strsql = strsql + "[bc_amount] [money] NOT NULL,";
                    strsql = strsql + "[bc_billno] [numeric] NOT NULL";
                    strsql = strsql + ")";
                    mylib.ExecSQL(strsql, SQLConnComex);

                    strsql = "drop table #fobill";
                    mylib.ExecSQL(strsql, SQLConnComex);

                    strsql = "CREATE TABLE #fobill (";
                    strsql = strsql + "[tx_controlflag] [numeric] (18,1) NOT NULL ,";
                    strsql = strsql + "[tx_dt] [char] (8) NOT NULL ,";
                    strsql = strsql + "[tx_clientcd] [char] (8) NOT NULL ,";
                    strsql = strsql + "[tx_mainbrcd] [char] (8) NOT NULL ,";
                    strsql = strsql + "[tx_seriesid] [numeric]  NOT NULL ,";
                    strsql = strsql + "[tx_desc] char(45) NOT NULL,";
                    strsql = strsql + "[tx_bqty] [numeric] (18,3) NOT NULL ,";
                    strsql = strsql + "[tx_sqty] [numeric] (18,3) NOT NULL ,";
                    strsql = strsql + "[tx_rate] [money]  NOT NULL ,";
                    strsql = strsql + "[tx_mainbrrate] [money]  NOT NULL ,";
                    strsql = strsql + "[tx_marketrate] [money]  NOT NULL ,";
                    strsql = strsql + "[tx_servicetax] [money]  NOT NULL ,";
                    strsql = strsql + "[tx_closerate] [money]  NOT NULL ,";
                    strsql = strsql + "[tx_sortlist] [numeric] NOT NULL,";
                    strsql = strsql + "[tx_prodtype] [char] (2) NOT NULL,";
                    strsql = strsql + "[tx_value] [money] NOT NULL, ";
                    strsql = strsql + "[tx_multiplier] [money] NOT Null,"; // ADD
                    strsql = strsql + "[tx_brokerage] [money]   ,";
                    strsql = strsql + "[tx_tradeid] [char] (7) ,";
                    strsql = strsql + "[tx_subtradeid] [char] (7) ,";
                    strsql = strsql + "[tx_orderid] [char] (20) ,";
                    strsql = strsql + "[tx_time] [char] (8) ,";
                    strsql = strsql + "[tx_ordertime] [char] (8) ";
                    strsql = strsql + ")";
                    mylib.ExecSQL(strsql, SQLConnComex);

                    //string strDate;
                    //if (FromDt != "" & ToDt!= "")
                    //{
                    //    strDate = " between '" + FromDt + "' ";
                    //    strDate = strDate + " and '" + ToDt + "'";
                    //}


                    //strsql = "select tx_sortlist,tx_dt,tx_billno,tx_controlflag,tx_clientcd,";
                    //strsql = strsql + " tx_seriesid,tx_desc,";
                    //strsql = strsql + " tx_bqty,tx_sqty,tx_rate,tx_closerate,tx_value,tx_brokerage,";
                    //strsql = strsql + " sm_sname,sm_desc,sm_productcd,sm_symbol,sm_expirydt,sm_strikeprice,";
                    //strsql = strsql + " sm_callput,sm_optionstyle,cm_name,cm_add1,cm_add2,cm_add3,cm_tele1,";
                    //strsql = strsql + " cm_tele2,cm_email, cm_sebino, cm_panno, cm_add4, cm_pincode, sm_prodtype,cm_familycd,cm_brboffcode , cm_subbroker ";
                    //strsql = strsql + " from #fobill,Series_master,Client_master";
                    //strsql = strsql + " where tx_clientcd = cm_cd and tx_seriesid = sm_seriesid " + objApplicationUser.fnLoginFilter(); // '' Session("LoginAccess")
                    //strsql = strsql + " and sm_exchange in ('"+ ("IsTplusCommex"== "Y"? strDpid.Replace("X", ""): strDpid) + "')";
                    //strsql = strsql + " and tx_controlflag < 10";

                    //if (blnWhere == false)
                    //{
                    //    if (strMode != "E")
                    //    {
                    //        strsql = strsql + " and  cm_billflag = '" + strClient + "'";
                    //    }
                    //}

                    if (Strings.InStr(1, "SD", (IsTplusCommex == "Y" ? strDpid.Replace("X", "") : strDpid)) > 0)
                    {

                        strsql = "insert into #fobill (tx_controlflag,tx_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,tx_desc,tx_bqty,tx_sqty,tx_rate,tx_mainbrrate,";
                        strsql = strsql + "tx_marketrate,tx_servicetax,tx_closerate,tx_sortlist,tx_prodtype,tx_value,tx_multiplier) ";
                        strsql = strsql + " select 7 td_controlflag,bd_dt,td_clientcd,td_mainbrcd,";
                        strsql = strsql + " td_seriesid,'',td_bqty,td_sqty,";
                        strsql = strsql + " td_rate,td_mainbrrate,td_mainbrrate,";
                        strsql = strsql + " td_servicetax,0.0000 td_closeprice,";
                        strsql = strsql + " case sm_prodtype when 'CF' then 1 when 'CO' then 2 else 6 end td_sortlist,";
                        strsql = strsql + " sm_prodtype, 0, sm_multiplier ";
                        strsql = strsql + " From Trades, #Tempdates11, Series_master,Client_master";
                        strsql = strsql + " Where td_clientcd = cm_cd and td_exchange = sm_exchange and td_seriesid = sm_seriesid";
                        strsql = strsql + " and sm_expirydt >= bd_dt and  td_dt = bd_dt and td_companycode = '" + HttpContext.Current.Session["CommCompanyCode"] + "'";
                        strsql = strsql + " and td_exchange = '" + (IsTplusCommex == "Y" ? strDpid.Replace("X", "") : strDpid) + "'";
                        strsql = strsql + strCondition;
                        mylib.ExecSQL(strsql, SQLConnComex);



                        strsql = "insert into #fobill (tx_controlflag,tx_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,tx_desc,tx_bqty,tx_sqty,tx_rate,tx_mainbrrate,";
                        strsql = strsql + "tx_marketrate,tx_servicetax,tx_closerate,tx_sortlist,tx_prodtype,tx_value,tx_multiplier) ";
                        strsql = strsql + " select 7 td_controlflag,bd_dt,td_clientcd,td_mainbrcd,";
                        strsql = strsql + " td_seriesid,'',td_sqty,td_bqty,";
                        strsql = strsql + " td_marketrate,td_mainbrrate,td_mainbrrate,";
                        strsql = strsql + " 0,0.0000 td_closeprice,";
                        strsql = strsql + " case sm_prodtype when 'CF' then 1 when 'CO' then 2 else 6 end td_sortlist,";
                        strsql = strsql + " sm_prodtype, 0, sm_multiplier ";
                        strsql = strsql + " From Trades, #Tempdates11, Series_master,Client_master";
                        strsql = strsql + " Where td_clientcd = cm_cd and td_exchange = sm_exchange and td_seriesid = sm_seriesid";
                        strsql = strsql + " and td_dt = bd_dt and td_orderdt <> bd_dt ";
                        strsql = strsql + " and td_companycode = '" + HttpContext.Current.Session["CommCompanyCode"] + "'";
                        strsql = strsql + " and td_exchange = '" + (IsTplusCommex == "Y" ? strDpid.Replace("X", "") : strDpid) + "'";
                        strsql = strsql + strCondition;
                        mylib.ExecSQL(strsql, SQLConnComex);


                        strsql = "insert into #fobill (tx_controlflag,tx_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,tx_desc,tx_bqty,tx_sqty,tx_rate,tx_mainbrrate,";
                        strsql = strsql + "tx_marketrate,tx_servicetax,tx_closerate,tx_sortlist,tx_prodtype,tx_value,tx_multiplier) ";
                        strsql = strsql + " select 7 td_controlflag,bd_dt,td_clientcd,td_mainbrcd,";
                        strsql = strsql + " td_seriesid,'',td_bqty,td_sqty,";
                        strsql = strsql + " td_marketrate,td_mainbrrate,td_mainbrrate,";
                        strsql = strsql + " 0,0.0000 td_closeprice,";
                        strsql = strsql + " case sm_prodtype when 'CF' then 1 when 'CO' then 2 else 6 end td_sortlist,";
                        strsql = strsql + " sm_prodtype, 0, sm_multiplier ";
                        strsql = strsql + " From Trades, #Tempdates11, Series_master,Client_master";
                        strsql = strsql + " Where td_clientcd = cm_cd and td_exchange = sm_exchange and td_seriesid = sm_seriesid";
                        strsql = strsql + " and td_dt <> bd_dt and td_orderdt = bd_dt and td_companycode = '" + HttpContext.Current.Session["CommCompanyCode"] + "'";
                        strsql = strsql + " and td_exchange = '" + (IsTplusCommex == "Y" ? strDpid.Replace("X", "") : strDpid) + "'";
                        strsql = strsql + strCondition;
                        mylib.ExecSQL(strsql, SQLConnComex);

                        //Service tax here
                        strsql = "insert into #billcharges select tx_dt,tx_clientcd,'SERVICE TAX',round(sum(tx_servicetax),2),0 from #fobill,#Tempdates11,Client_master";
                        strsql = strsql + " where tx_clientcd = cm_cd and tx_dt = bd_dt";
                        strsql = strsql + strCondition;
                        strsql = strsql + " group by tx_dt,tx_clientcd having sum(tx_servicetax) > 0";
                        mylib.ExecSQL(strsql, SQLConnComex);

                        //Charges here
                        //from specialcharges start

                        strsql = strsql + " where fc_clientcd = cm_cd and fc_dt = bd_dt";
                        strsql = strsql + strCondition;
                        if (strCondition == "")
                        {
                            strsql = strsql + " and fc_clientcd not in(select distinct tx_mainbrcd from #fobill)";
                        }

                        strsql = strsql + " and fc_companycode = '" + HttpContext.Current.Session["CommCompanyCode"] + "'";
                        strsql = strsql + " and fc_exchange = '" + (IsTplusCommex == "Y" ? strDpid.Replace("X", "") : strDpid) + "'";
                        strsql = strsql + " group by fc_dt,fc_clientcd,fc_desc having round(sum(fc_amount),2) <> 0";
                        mylib.ExecSQL(strsql, SQLConnComex);

                        strsql = "insert into #billcharges select fc_dt,fc_clientcd,'SERVICE TAX',round(sum(fc_servicetax),2),0 from Fspecialcharges,#Tempdates11,Client_master";
                        strsql = strsql + " where fc_clientcd = cm_cd and fc_dt = bd_dt";
                        strsql = strsql + strCondition;
                        if (strCondition == "")
                        {
                            strsql = strsql + " and fc_clientcd not in(select distinct tx_mainbrcd from #fobill)";
                        }

                        strsql = strsql + " and fc_companycode = '" + HttpContext.Current.Session["CommCompanyCode"] + "'";
                        strsql = strsql + " and fc_exchange = '" + (IsTplusCommex == "Y" ? strDpid.Replace("X", "") : strDpid) + "'";
                        strsql = strsql + " group by fc_dt,fc_clientcd,fc_desc having round(sum(fc_servicetax),2) <> 0";
                        mylib.ExecSQL(strsql, SQLConnComex);

                        // -----------from specialcharges end

                        //--------------Update values for MTM and Premium
                        strsql = "update #fobill set tx_value = Round((tx_bqty - tx_sqty)*(tx_rate)*tx_multiplier,4)";
                        strsql = strsql + " Where tx_controlflag = '7'";
                        mylib.ExecSQL(strsql, SQLConnComex);

                        //'---------------Update values for MTM and Premium end

                        //'Consolidated charges into Billtrx

                        strsql = "insert into #fobill (tx_controlflag,tx_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,tx_desc,tx_bqty,tx_sqty,tx_rate,tx_mainbrrate,";
                        strsql = strsql + "tx_marketrate,tx_servicetax,tx_closerate,tx_sortlist,tx_prodtype,tx_value,tx_multiplier) ";
                        strsql = strsql + " select 10 ,bc_dt,bc_clientcd,bc_clientcd,";
                        strsql = strsql + " 1,upper(bc_desc),0 td_bqty,0 td_sqty,";
                        strsql = strsql + " 0,0 td_mainbrrate,0 td_mainbrrate,";
                        strsql = strsql + " 0 td_servicetax,0.0000 td_closeprice,";
                        strsql = strsql + " 10 td_sortlist,";
                        strsql = strsql + " 'XX',round(sum(bc_amount),2),0";
                        strsql = strsql + " From #billcharges group by bc_dt,bc_clientcd,bc_desc";
                        mylib.ExecSQL(strsql, SQLConnComex);

                    }
                    else
                    {
                        strsql = "insert into #fobill (tx_controlflag,tx_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,tx_desc,tx_bqty,tx_sqty,tx_rate,tx_mainbrrate,";
                        strsql = strsql + "tx_marketrate,tx_servicetax,tx_closerate,tx_sortlist,tx_prodtype,tx_value,tx_multiplier) ";
                        strsql = strsql + " select 1 td_controlflag,'" + FromDt + "',td_clientcd,td_mainbrcd,";
                        strsql = strsql + " td_seriesid,'',case sign(sum(td_bqty - td_sqty)) when 1 then abs(sum(td_bqty - td_sqty)) else 0 end  td_bqty,";
                        strsql = strsql + " case sign(sum(td_bqty - td_sqty)) when 1 then 0 else abs(sum(td_bqty - td_sqty)) end td_sqty,";
                        strsql = strsql + " 0.0000 td_rate,0.0000 td_mainbrrate,0.0000 td_mainbrrate,";
                        strsql = strsql + " 0.0000 td_servicetax,0.0000 td_closeprice,";
                        strsql = strsql + " case sm_prodtype when 'CF' then 1 else 6 end td_sortlist,";
                        strsql = strsql + " sm_prodtype,0,sm_multiplier";
                        strsql = strsql + " From Trades , Series_master,Client_master ";
                        strsql = strsql + " Where td_clientcd = cm_cd and td_exchange = sm_exchange ";
                        strsql = strsql + " " + HttpContext.Current.Session["LoginAccessOld"];
                        strsql = strsql + " And td_seriesid = sm_seriesid ";
                        strsql = strsql + " and sm_expirydt >= '" + FromDt + "' and td_dt < '" + FromDt + "'";
                        strsql = strsql + " and td_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                        strsql = strsql + " and td_exchange in ('" + (IsTplusCommex == "Y" ? strDpid.Replace("X", "") : strDpid) + "') and sm_prodtype in('CF')";
                        strsql = strsql + strCondition;
                        strsql = strsql + " group by td_clientcd,td_mainbrcd,td_seriesid,sm_prodtype,sm_multiplier";
                        strsql = strsql + " having sum(td_bqty - td_sqty) <> 0";
                        mylib.ExecSQL(strsql, SQLConnComex);



                        //if (strBilltype == "D")
                        //{

                        strsql = "insert into #fobill (tx_controlflag,tx_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,tx_desc,tx_bqty,tx_sqty,";
                        strsql = strsql + " tx_rate,tx_mainbrrate,tx_marketrate,tx_servicetax,tx_closerate,tx_sortlist,tx_prodtype,";
                        strsql = strsql + " tx_value,tx_multiplier)";
                        strsql = strsql + " select 2 td_controlflag,td_dt,td_clientcd,td_mainbrcd,";
                        strsql = strsql + " td_seriesid,'',td_bqty,td_sqty,";
                        strsql = strsql + " td_rate,td_mainbrrate,td_mainbrrate,";
                        strsql = strsql + " td_servicetax,0.0000 td_closeprice,";
                        strsql = strsql + " case sm_prodtype when 'CF' then 1 else 6 end td_sortlist,";
                        strsql = strsql + " sm_prodtype,0,sm_multiplier";
                        strsql = strsql + " From Trades ,Series_master,Client_master ";
                        strsql = strsql + " Where td_clientcd = cm_cd and td_exchange = sm_exchange ";
                        //strsql = strsql + " and exists " + myutil.LoginAccess("td_clientcd");
                        strsql = strsql + " " + HttpContext.Current.Session["LoginAccessOld"];
                        strsql = strsql + " and td_seriesid = sm_seriesid";  // '' Session("LoginAccess")
                        strsql = strsql + " and sm_expirydt >= '" + FromDt + "'";
                        strsql = strsql + " and td_dt between '" + FromDt + "' and '" + FromDt + "'";
                        strsql = strsql + " and td_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' and td_exchange in ( '" + (IsTplusCommex == "Y" ? strDpid.Replace("X", "") : strDpid) + "')";
                        strsql = strsql + strCondition;
                        mylib.ExecSQL(strsql, SQLConnComex);

                        //}
                        //else
                        //{

                        //    strsql = "insert into #fobill (tx_controlflag,tx_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,tx_desc,tx_bqty,tx_sqty,";
                        //    strsql = strsql + " tx_rate,tx_mainbrrate,tx_marketrate,tx_servicetax,tx_closerate,tx_sortlist,tx_prodtype,";
                        //    strsql = strsql + " tx_value,tx_multiplier)";
                        //    strsql = strsql + " select 2 td_controlflag,td_dt,td_clientcd,td_mainbrcd,";
                        //    strsql = strsql + " td_seriesid,'',sum(td_bqty),sum(td_sqty),";
                        //    strsql = strsql + " sum(td_rate*(td_sqty + td_bqty))/sum(td_sqty + td_bqty),sum(td_mainbrrate*(td_sqty + td_bqty))/sum(td_sqty + td_bqty),sum(td_mainbrrate*(td_sqty + td_bqty))/sum(td_sqty + td_bqty),";
                        //    strsql = strsql + " sum(td_servicetax),0.0000 td_closeprice,";
                        //    strsql = strsql + " case sm_prodtype when 'CF' then 1 when 'CO' then 2 else 6 end td_sortlist,";
                        //    strsql = strsql + " sm_prodtype, 0, sm_multiplier ";
                        //    strsql = strsql + " From Trades, Series_master,Client_master";
                        //    strsql = strsql + " Where td_clientcd = cm_cd and td_exchange = sm_exchange ";
                        //    //   strsql = strsql + " and exists " + myutil.LoginAccess("td_clientcd");
                        //    strsql = strsql + " and td_seriesid = sm_seriesid";
                        //    strsql = strsql + " and sm_expirydt >= '" + FromDt + "'";
                        //    strsql = strsql + " and td_dt between '" + FromDt + "' and '" + FromDt + "'";
                        //    strsql = strsql + " and td_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' and td_exchange in ( '" + ("IsTplusCommex" == "Y" ? strDpid.Replace("X", "") : strDpid) + "')";
                        //    strsql = strsql + strCondition;
                        //    strsql = strsql + " Group by td_dt,td_clientcd,td_mainbrcd,td_seriesid,sm_prodtype,td_bsflag,sm_multiplier";
                        //    mylib.ExecSQL(strsql, SQLConnComex);

                        //}


                        strsql = "insert into #fobill (tx_controlflag,tx_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,tx_desc,tx_bqty,tx_sqty,";
                        strsql = strsql + " tx_rate,tx_mainbrrate,tx_marketrate,tx_servicetax,tx_closerate,tx_sortlist,tx_prodtype,";
                        strsql = strsql + " tx_value,tx_multiplier)";  // above three lines added by rajesh till first bracket
                        strsql = strsql + " select 9 tx_controlflag,bd_dt,tx_clientcd,tx_mainbrcd, tx_seriesid,'', ";
                        strsql = strsql + " case sign(sum(tx_bqty - tx_sqty)) when 1 then abs(sum(tx_bqty - tx_sqty)) else 0 end  tx_bqty, ";
                        strsql = strsql + " case sign(sum(tx_bqty - tx_sqty)) when 1 then 0 else abs(sum(tx_bqty - tx_sqty)) end tx_sqty, ";
                        strsql = strsql + " 0.0000 tx_rate,0.0000 tx_mainbrrate,0.0000 tx_mainbrrate, 0.0000 tx_servicetax,0.0000 tx_closeprice, ";
                        strsql = strsql + " case sm_prodtype when 'CF' then 1 else 6 end tx_sortlist, sm_prodtype,0,sm_multiplier";
                        strsql = strsql + " From #fobill  , #Tempdates11 , Series_master,Client_master ";
                        strsql = strsql + " Where tx_clientcd = cm_cd and sm_exchange in ('" + (IsTplusCommex == "Y" ? strDpid.Replace("X", "") : strDpid) + "')  And tx_seriesid = sm_seriesid ";
                        strsql = strsql + " and sm_expirydt >= bd_dt and  tx_dt < bd_dt ";
                        strsql = strsql + " and sm_prodtype in('CF') ";
                        strsql = strsql + " and tx_controlflag not in ( '9','3') ";
                        strsql = strsql + " group by bd_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,sm_prodtype,sm_multiplier";
                        strsql = strsql + " Having Sum(tx_bqty - tx_sqty) <> 0 ";
                        if (!blnRecMTM)
                        {

                            strsql = strsql + " Union All ";
                            strsql = strsql + " select 3 tx_controlflag,bd_dt,tx_clientcd,tx_mainbrcd, tx_seriesid,'', ";
                            strsql = strsql + " case sign(sum(tx_bqty - tx_sqty)) when 1 then 0 else abs(sum(tx_bqty - tx_sqty)) end tx_bqty, ";
                            strsql = strsql + " case sign(sum(tx_bqty - tx_sqty)) when 1 then abs(sum(tx_bqty - tx_sqty)) else 0 end  tx_sqty, ";
                            strsql = strsql + " 0.0000 tx_rate,0.0000 tx_mainbrrate,0.0000 tx_mainbrrate, 0.0000 tx_servicetax,0.0000 tx_closeprice, ";
                            strsql = strsql + " case sm_prodtype when 'CF' then 1 else 6 end tx_sortlist, sm_prodtype,0,sm_multiplier";
                            strsql = strsql + " From #fobill  , #Tempdates11 , Series_master,Client_master ";
                            strsql = strsql + " Where tx_clientcd = cm_cd and sm_exchange in ('" + (IsTplusCommex == "Y" ? strDpid.Replace("X", "") : strDpid) + "') And tx_seriesid = sm_seriesid ";
                            strsql = strsql + " and sm_expirydt >= bd_dt and  tx_dt <= bd_dt ";
                            strsql = strsql + " and sm_prodtype in('CF') ";
                            strsql = strsql + " and tx_controlflag not in ( '9','3') ";
                            strsql = strsql + " group by bd_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,sm_prodtype,sm_multiplier";
                            strsql = strsql + " Having Sum(tx_bqty - tx_sqty) <> 0 ";
                            mylib.ExecSQL(strsql, SQLConnComex);

                        }

                        strsql = " Update #fobill set tx_controlflag = '1' where tx_controlflag = '9' ";
                        mylib.ExecSQL(strsql, SQLConnComex);


                        strsql = "insert into #fobill (tx_controlflag,tx_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,tx_desc,tx_bqty,tx_sqty,tx_rate,tx_mainbrrate,";
                        strsql = strsql + "tx_marketrate,tx_servicetax,tx_closerate,tx_sortlist,tx_prodtype,tx_value,tx_multiplier) ";
                        strsql = strsql + " select Case dl_type When 'DL' Then 7 When 'PD' Then 8 When 'SL' Then 9 When 'DS' Then 9.5 Else 0 End td_controlflag,dl_BillDate,dl_clientcd,dl_mainbrcd,";
                        strsql = strsql + " dl_seriesid,'',dl_Bqty td_bqty,";
                        strsql = strsql + " dl_SQty td_sqty,";
                        strsql = strsql + " dl_rate td_rate, dl_mainbrrate td_mainbrrate, dl_marketrate td_mainbrrate,";
                        strsql = strsql + " dl_servicetax td_servicetax,0.0000 td_closeprice,";
                        strsql = strsql + " case sm_prodtype when 'CF' then 1 else 6 end + 3 td_sortlist,";
                        strsql = strsql + " sm_prodtype,0,sm_multiplier";
                        strsql = strsql + " From Delivery , Series_master,Client_master ";
                        strsql = strsql + " Where dl_clientcd = cm_cd and dl_exchange = sm_exchange ";
                        //     strsql = strsql + " and exists " + myutil.LoginAccess("dl_clientcd");
                        strsql = strsql + " " + HttpContext.Current.Session["LoginAccessOld"];
                        strsql = strsql + " And dl_seriesid = sm_seriesid ";  // 'Session("LoginAccess")
                        strsql = strsql + " and dl_BillDate between '" + FromDt + "' and '" + FromDt + "'";
                        strsql = strsql + " and dl_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                        strsql = strsql + " and dl_exchange in ('" + (IsTplusCommex == "Y" ? strDpid.Replace("X", "") : strDpid) + "') and sm_prodtype in('CF')";
                        strsql = strsql + strCondition;

                        mylib.ExecSQL(strsql, SQLConnComex);

                        //Service tax here
                        strsql = "insert into #billcharges select tx_dt,tx_clientcd,'SERVICE TAX',round(sum(tx_servicetax),2),0 from #fobill,#Tempdates11,Client_master";
                        strsql = strsql + " where tx_clientcd = cm_cd and tx_dt = bd_dt";
                        strsql = strsql + strCondition;
                        strsql = strsql + " group by tx_dt,tx_clientcd having sum(tx_servicetax) > 0";
                        mylib.ExecSQL(strsql, SQLConnComex);


                        //Update Previous close and today's close prices
                        strsql = "update #fobill set tx_closerate = ms_lastprice from #fobill,Market_summary";
                        strsql = strsql + " where ms_seriesid = tx_seriesid and tx_controlflag in('1','2')";
                        strsql = strsql + " and ms_exchange in ('" + (IsTplusCommex == "Y" ? strDpid.Replace("X", "") : strDpid) + "')";
                        strsql = strsql + " and ms_dt = tx_dt";
                        mylib.ExecSQL(strsql, SQLConnComex);

                        strsql = "update #fobill set tx_rate = ms_prcloseprice from #fobill,Market_summary";
                        strsql = strsql + " where ms_seriesid = tx_seriesid and tx_controlflag = 1";
                        strsql = strsql + " and ms_exchange in ('" + (IsTplusCommex == "Y" ? strDpid.Replace("X", "") : strDpid) + "')";
                        strsql = strsql + " and ms_dt = tx_dt";
                        mylib.ExecSQL(strsql, SQLConnComex);


                        if (blnRecMTM == false)   //Record Wise MTM
                        {
                            strsql = "update #fobill set tx_rate = ms_lastprice from #fobill,Market_summary";
                            strsql = strsql + " where ms_seriesid = tx_seriesid and tx_controlflag = 3";
                            strsql = strsql + " and ms_exchange in ('" + (IsTplusCommex == "Y" ? strDpid.Replace("X", "") : strDpid) + "')";
                            strsql = strsql + " and ms_dt = tx_dt";
                        }


                        //      'Charges here
                        //-----------from specialcharges start

                        strsql = "insert into #billcharges select fc_dt,fc_clientcd,fc_desc,round(sum(fc_amount),2),0 from Fspecialcharges,#Tempdates11,Client_master";
                        strsql = strsql + " where fc_clientcd = cm_cd and fc_dt = bd_dt";
                        strsql = strsql + strCondition;
                        if (strCondition == "")
                        {
                            strsql = strsql + " and fc_clientcd not in(select distinct tx_mainbrcd from #fobill)";
                        }
                        strsql = strsql + " and fc_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                        strsql = strsql + " and fc_exchange in ('" + (IsTplusCommex == "Y" ? strDpid.Replace("X", "") : strDpid) + "')";
                        strsql = strsql + " group by fc_dt,fc_clientcd,fc_desc having round(sum(fc_amount),2) <> 0";
                        mylib.ExecSQL(strsql, SQLConnComex);

                        strsql = "insert into #billcharges select fc_dt,fc_clientcd,'SERVICE TAX',round(sum(fc_servicetax),2),0 from Fspecialcharges,#Tempdates11,Client_master";
                        strsql = strsql + " where fc_clientcd = cm_cd and fc_dt = bd_dt";
                        strsql = strsql + strCondition;
                        if (strCondition == "")
                        {
                            strsql = strsql + " and fc_clientcd not in(select distinct tx_mainbrcd from #fobill)";
                        }

                        strsql = strsql + " and fc_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                        strsql = strsql + " and fc_exchange in ('" + (IsTplusCommex == "Y" ? strDpid.Replace("X", "") : strDpid) + "')";
                        strsql = strsql + " group by fc_dt,fc_clientcd,fc_desc having round(sum(fc_servicetax),2) <> 0";

                        mylib.ExecSQL(strsql, SQLConnComex);

                        //-----------from specialcharges end

                        //--------------Update values for MTM and Premium
                        if (blnRecMTM == false)  // 'Record Wise MTM
                        {

                            strsql = "update #fobill set tx_value = round(((case tx_controlflag when 5  then (tx_bqty + tx_sqty)*" + dblReverse + " when 6 then (tx_bqty + tx_sqty)*" + dblReverse + " else (tx_bqty - tx_sqty) end) *tx_rate)*tx_multiplier,4)";
                            mylib.ExecSQL(strsql, SQLConnComex);

                        }
                        else
                        {
                            strsql = "update #fobill set tx_value = round((((tx_bqty - tx_sqty)*tx_rate) - ((tx_bqty - tx_sqty)*tx_closerate))*tx_multiplier,4)";
                            strsql = strsql + " where tx_prodtype in('CF')";
                            mylib.ExecSQL(strsql, SQLConnComex);


                            strsql = "update #fobill set tx_value = round(((case tx_controlflag when 5  then (tx_bqty + tx_sqty)*" + dblReverse + " when 6 then (tx_bqty + tx_sqty)*" + dblReverse + " else (tx_bqty - tx_sqty) end) *tx_rate)*tx_multiplier,4)";
                            strsql = strsql + " where tx_prodtype not in ('CF')";
                            mylib.ExecSQL(strsql, SQLConnComex);
                        }

                        //---------------Update values for MTM and Premium end

                        strsql = "insert into #fobill(tx_controlflag,tx_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,tx_desc,tx_bqty,tx_sqty,tx_rate,tx_mainbrrate,";
                        strsql = strsql + " tx_marketrate,tx_servicetax,tx_closerate,tx_sortlist,tx_prodtype,tx_value,tx_multiplier)";
                        strsql = strsql + " select 10 ,bc_dt,bc_clientcd,bc_clientcd,";
                        strsql = strsql + " 1,upper(bc_desc),0 td_bqty,0 td_sqty,";
                        strsql = strsql + " 0,0 td_mainbrrate,0 td_mainbrrate,";
                        strsql = strsql + " 0 td_servicetax,0.0000 td_closeprice,";
                        strsql = strsql + " 10 td_sortlist,";
                        strsql = strsql + " 'XX',round(sum(bc_amount),2),0 ";
                        strsql = strsql + " From #billcharges group by bc_dt,bc_clientcd,bc_desc";
                        mylib.ExecSQL(strsql, SQLConnComex);

                    }

                    // ''''Changed
                    strsql = "insert into #fobill(tx_controlflag,tx_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,tx_desc,tx_bqty,tx_sqty,tx_rate,tx_mainbrrate,";
                    strsql = strsql + " tx_marketrate,tx_servicetax,tx_closerate,tx_sortlist,tx_prodtype,tx_value,tx_multiplier)";
                    strsql = strsql + " select 90 ,fb_billdt,fb_clientcd,fb_clientcd,";
                    strsql = strsql + " 1,'[PREV. DAY MRGN.]',0 td_bqty,0 td_sqty,";
                    strsql = strsql + " 0,0 td_mainbrrate,0 td_mainbrrate,";
                    strsql = strsql + " 0 td_servicetax,0.0000 td_closeprice,";
                    strsql = strsql + " 90 td_sortlist,";
                    strsql = strsql + " 'XX',round(fb_margin1,2),0 ";
                    strsql = strsql + " From #Tempdates11,Fbills,Client_master";
                    strsql = strsql + " where fb_clientcd = cm_cd and fb_billdt = bd_dt";
                    strsql = strsql + " and fb_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                    strsql = strsql + " and fb_exchange in ('" + (IsTplusCommex == "Y" ? strDpid.Replace("X", "") : strDpid) + "')";
                    strsql = strsql + "  and fb_margin1 <> 0 and fb_postmrgyn = 'Y' ";
                    strsql = strsql + strCondition;

                    mylib.ExecSQL(strsql, SQLConnComex);
                    //..till here

                    // ''''Changed
                    strsql = "insert into #fobill (tx_controlflag,tx_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,tx_desc,tx_bqty,tx_sqty,tx_rate,tx_mainbrrate,"; // changed
                    strsql = strsql + " tx_marketrate,tx_servicetax,tx_closerate,tx_sortlist,tx_prodtype,tx_value,tx_multiplier)";
                    strsql = strsql + " select 91 ,fb_billdt,fb_clientcd,fb_clientcd,";
                    strsql = strsql + " 1,'[CURR. DAY MRGN.]',0 td_bqty,0 td_sqty,";
                    strsql = strsql + " 0,0 td_mainbrrate,0 td_mainbrrate,";
                    strsql = strsql + " 0 td_servicetax,0.0000 td_closeprice,";
                    strsql = strsql + " 91 td_sortlist,";
                    strsql = strsql + " 'XX',round(fb_margin2,2),0 ";
                    strsql = strsql + " From #Tempdates11,Fbills,Client_master";
                    strsql = strsql + " where fb_clientcd = cm_cd and fb_billdt = bd_dt";
                    strsql = strsql + " and fb_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                    strsql = strsql + " and fb_exchange in ('" + (IsTplusCommex == "Y" ? strDpid.Replace("X", "") : strDpid) + "')";
                    strsql = strsql + " and fb_margin2 <> 0 and fb_postmrgyn = 'Y' ";
                    strsql = strsql + strCondition;
                    mylib.ExecSQL(strsql, SQLConnComex);
                    //..till here
                    strsql = "alter table #fobill add tx_billno numeric default(0) NOT NULL";
                    mylib.ExecSQL(strsql, SQLConnComex);

                    strsql = "update #fobill set tx_billno = fb_billno from #fobill,Fbills where fb_clientcd = tx_clientcd ";
                    strsql = strsql + " and fb_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                    strsql = strsql + " and fb_exchange in ('" + (IsTplusCommex == "Y" ? strDpid.Replace("X", "") : strDpid) + "')";
                    strsql = strsql + " and fb_billdt = tx_dt ";

                    mylib.ExecSQL(strsql, SQLConnComex);


                    string strDate;
                    if (FromDt != "" && FromDt != "")
                    {
                        strDate = " between '" + FromDt + "' ";
                        strDate = strDate + " and '" + FromDt + "'";
                    }
                    strsql = "select tx_sortlist,tx_dt,tx_billno,tx_controlflag,tx_clientcd,";
                    strsql = strsql + " tx_seriesid,tx_desc,";
                    strsql = strsql + " tx_bqty,tx_sqty,tx_rate,tx_closerate,tx_value,tx_brokerage,";
                    strsql = strsql + " sm_sname,sm_desc,sm_productcd,sm_symbol,sm_expirydt,sm_strikeprice,";
                    strsql = strsql + " sm_callput,sm_optionstyle,cm_name,cm_add1,cm_add2,cm_add3,cm_tele1,";
                    strsql = strsql + " cm_tele2,cm_email, cm_sebino, cm_panno, cm_add4, cm_pincode, sm_prodtype,cm_familycd,cm_brboffcode , cm_subbroker ";
                    strsql = strsql + " from #fobill,Series_master,Client_master";
                    strsql = strsql + " where tx_clientcd = cm_cd and tx_seriesid = sm_seriesid ";
                    //strSQL = strSQL + "and exists " + myutil.LoginAccess("td_clientcd");                  
                    strsql = strsql + " " + HttpContext.Current.Session["LoginAccessOld"];
                    strsql = strsql + " and sm_exchange in ('" + (IsTplusCommex == "Y" ? strDpid.Replace("X", "") : strDpid) + "')";
                    strsql = strsql + " and tx_controlflag < 10";
                    if (blnWhere == false)
                    {
                        if (strMode != "E")
                        {
                            strsql = strsql + " and  cm_billflag = 'A'";
                        }
                    }
                    strsql = strsql + " union all";
                    strsql = strsql + " select tx_sortlist,tx_dt,tx_billno,tx_controlflag,tx_clientcd,";
                    strsql = strsql + " tx_seriesid,tx_desc,";
                    strsql = strsql + " tx_bqty,tx_sqty,tx_rate,tx_closerate,tx_value,tx_brokerage,";
                    strsql = strsql + " '' sm_sname,'' sm_desc,'' sm_productcd,'' sm_symbol,'' sm_expirydt,";
                    strsql = strsql + " 0 sm_strikeprice,";
                    strsql = strsql + " 'X' sm_callput,'X' sm_optionstyle,";
                    strsql = strsql + " cm_name,cm_add1,cm_add2,cm_add3,cm_tele1,cm_tele2,cm_email, cm_sebino, cm_panno,cm_add4, cm_pincode,'EF' as sm_prodtype,cm_familycd,cm_brboffcode , cm_subbroker ";
                    strsql = strsql + " from #fobill,Client_master";
                    strsql = strsql + " where tx_clientcd = cm_cd ";
                    //       strSQL = strSQL + "and exists " + myutil.LoginAccess("td_clientcd");
                    strsql = strsql + " " + HttpContext.Current.Session["LoginAccessOld"];
                    strsql = strsql + " and tx_controlflag >= 10";
                    //if (blnWhere == false)
                    //{
                    //    strsql = strsql + " and  cm_billflag = '" + Select + "'";
                    //}
                    if (strMode == "E")
                    {
                        strsql = strsql + " and cm_email != ''";
                    }
                    strsql = strsql + " order by tx_clientcd,tx_dt,tx_sortlist,sm_symbol,tx_seriesid,tx_controlflag,tx_desc";



                    DataTable dt = mylib.OpenDataTable(strsql, SQLConnComex);
                    return dt;
                }

            }

        }

        public List<LedgerModel> GetClientLedger(string Select, string Code, string curyear, string strDPID = "", string strDPIDMargin = "")
        {

            var date1 = curyear.Split('-')[0].Trim() + "0401";
            var date2 = curyear.Split('-')[1].Trim() + "0331";
            string strDPIDWhere = "";
            string strDPIDMarginWhere = "";

            if (strDPID == "")
            {
                strDPIDWhere = "";
            }
            else
            {
                for (int i = 0; i < strDPID.Split(',').Length; i++)
                {
                    if (strDPID.Split(',')[i].Trim() != "")
                    {
                        strDPIDWhere += "'" + Strings.Right(strDPID.Split(',')[i].Trim(), 2) + "',";
                    }
                }
                if (Strings.Right(strDPIDWhere.Trim(), 1) == ",")
                {
                    strDPIDWhere = Strings.Left(strDPIDWhere.Trim(), strDPIDWhere.Trim().Length - 1);
                }
                strDPIDWhere = " and Right(Rtrim(ld_dpid),2) in ( " + strDPIDWhere.Trim() + " ) ";
            }

            if (strDPIDMargin == "")
            {
                strDPIDMarginWhere = "";
            }
            else
            {
                for (int i = 0; i < strDPIDMargin.Split(',').Length; i++)
                {
                    if (strDPIDMargin.Split(',')[i].Trim() != "")
                    {
                        strDPIDMarginWhere += "'" + Strings.Right(strDPIDMargin.Split(',')[i].Trim(), 2) + "',";
                    }
                }
                if (Strings.Right(strDPIDMarginWhere.Trim(), 1) == ",")
                {
                    strDPIDMarginWhere = Strings.Left(strDPIDMarginWhere.Trim(), strDPIDMarginWhere.Trim().Length - 1);
                }
                strDPIDMarginWhere = " and Right(Rtrim(ld_dpid),2) in ( " + strDPIDMarginWhere.Trim() + " ) ";
            }

            var newLine = Environment.NewLine;

            string strSQL = "";
            if (strDPID.Trim() != "")
            {
                strSQL = "select rtrim(cm_name) + ' ['+rtrim(ld_clientcd)+']' as Code, ld_clientcd, ld_dt,ld_particular,ld_amount ld_debit, 0.0 ld_credit, ld_debitflag,  ld_documenttype, case ld_documentno when 0 then  case ld_documenttype When 'B' Then ld_documenttype + '/' + Ltrim(Rtrim(convert(char,ld_documentno))) else '' end  else ld_documenttype + '/' + Ltrim(Rtrim(convert(char,ld_documentno))) end ld_documentno , ld_entryno , isnull(ld_chequeno,'') ld_chequeno,cm_add1,cm_add2,cm_add3,cm_add4,cm_panno ,'1' as flag, ld_common,'' as ld_unclear , substring(ld_dpid, 2, 2) as ES,ld_commondt,ld_dpid" + newLine;
                strSQL += "from Ledger, Client_master" + newLine;
                strSQL += "where ld_clientcd=cm_cd  and ld_clientcd = '" + Code + "' " + newLine;
                strSQL += strDPIDWhere + newLine;
                strSQL += "and ld_dt >= '" + date1 + "' and ld_dt <='" + date2 + "'" + newLine;
                strSQL += "union all" + newLine;
                strSQL += "select   rtrim(cm_name) + ' ['+rtrim(ld_clientcd)+']' as Code, ld_clientcd,'" + date1 + "' ld_dt, 'Opening Balance' as ld_particular,sum(ld_amount) as ld_amount,0, case sign(sum(ld_amount)) when -1 then 'C' else 'D' end as ld_debitflag ,'' as ld_documenttype,'' as ld_documentno, 0 as ld_entryno ,'' as ld_chequeno,cm_add1,cm_add2,cm_add3,cm_add4,cm_panno  ,'0' as flag, '' as ld_common,'' as ld_unclear,'' ld_dpid,'',ld_dpid" + newLine;
                strSQL += "from Ledger, Client_master" + newLine;
                strSQL += "where ld_clientcd=cm_cd  and ld_clientcd = '" + Code + "'  " + newLine;
                strSQL += strDPIDWhere + newLine;
                strSQL += "and ld_dt<'" + date1 + "'" + newLine;
                strSQL += "group by ld_clientcd, cm_name,cm_add1,cm_add2,cm_add3,cm_add4,cm_panno,ld_dpid" + newLine;
                strSQL += "having sum(ld_amount)<>0" + newLine;
            }
            if (strDPIDMargin.Trim() != "")
            {
                if (strSQL.Trim() != "")
                {
                    strSQL += " Union All ";
                }
                strSQL += "select rtrim(cm_name) + ' ['+rtrim(ld_clientcd)+']' as Code, ld_clientcd, ld_dt,ld_particular,ld_amount ld_debit, 0.0 ld_credit, ld_debitflag,  ld_documenttype, case ld_documentno when 0 then  case ld_documenttype When 'B' Then ld_documenttype + '/' + Ltrim(Rtrim(convert(char,ld_documentno))) else '' end  else ld_documenttype + '/' + Ltrim(Rtrim(convert(char,ld_documentno))) end ld_documentno , ld_entryno , isnull(ld_chequeno,'') ld_chequeno,cm_add1,cm_add2,cm_add3,cm_add4,cm_panno ,'1' as flag, ld_common,'' as ld_unclear , substring(ld_dpid, 2, 2) as ES,ld_commondt,ld_dpid" + newLine;
                strSQL += "from Ledger, Client_master" + newLine;
                strSQL += "where ld_clientcd=cm_cd  and ld_clientcd = (select distinct cm_brkggroup from client_master where cm_cd='" + Code + "') " + newLine;
                strSQL += strDPIDMarginWhere + newLine;
                strSQL += "and ld_dt >= '" + date1 + "' and ld_dt <='" + date2 + "'" + newLine;
                strSQL += "union all" + newLine;
                strSQL += "select   rtrim(cm_name) + ' ['+rtrim(ld_clientcd)+']' as Code, ld_clientcd,'" + date1 + "' ld_dt, 'Opening Balance' as ld_particular,sum(ld_amount) as ld_amount,0, case sign(sum(ld_amount)) when -1 then 'C' else 'D' end as ld_debitflag ,'' as ld_documenttype,'' as ld_documentno, 0 as ld_entryno ,'' as ld_chequeno,cm_add1,cm_add2,cm_add3,cm_add4,cm_panno  ,'0' as flag, '' as ld_common,'' as ld_unclear,'' ld_dpid,'',ld_dpid" + newLine;
                strSQL += "from Ledger, Client_master" + newLine;
                strSQL += "where ld_clientcd=cm_cd  and ld_clientcd = (select distinct cm_brkggroup from client_master where cm_cd='" + Code + "') " + newLine;
                strSQL += strDPIDMarginWhere + newLine;
                strSQL += "and ld_dt<'" + date1 + "'" + newLine;
                strSQL += "group by ld_clientcd, cm_name,cm_add1,cm_add2,cm_add3,cm_add4,cm_panno,ld_dpid" + newLine;
                strSQL += "having sum(ld_amount)<>0" + newLine;
            }
            strSQL += "order by ld_clientcd,flag,ld_dt" + newLine;
            List<LedgerModel> iList = new List<LedgerModel>();

            LibraryModel mylib = new LibraryModel();
            DataTable dt = mylib.OpenDataTable(strSQL);

            string strClient = null;
            Decimal dblBal = 0;
            Decimal Debit = 0;
            Decimal Credit = 0;
            String strParticular = null;
            string strDate = null;


            if (dt.Rows.Count > 0)
            {
                strClient = dt.Rows[0]["ld_clientcd"].ToString().Trim();
            }
            foreach (DataRow dr in dt.Rows)
            {
                if (strClient.Trim() != dr["ld_clientcd"].ToString().Trim())
                {
                    dblBal = 0;
                }

                strClient = dr["ld_clientcd"].ToString().Trim();
                Debit = Convert.ToDecimal(dr["ld_debit"]);
                strParticular = dr["ld_particular"].ToString().Trim();
                strDate = dr["ld_dt"].ToString().Trim();
                strDate = strDate.Substring(6, 2) + "/" + strDate.Substring(4, 2) + "/" + strDate.Substring(0, 4);
                dblBal += Debit;
                Credit = 0;
                if (Debit < 0)
                {
                    Credit = Debit * -1;
                    Debit = 0;
                }
                Decimal dblShowBal = dblBal > 0 ? dblBal : dblBal * (-1);
                string flag = dblBal > 0 ? "Dr" : "Cr";
                if (dr["ld_chequeno"].ToString().Trim() != "")
                {
                    strParticular = "[" + dr["ld_chequeno"].ToString().Trim() + "] " + dr["ld_particular"].ToString().Trim();
                }

                iList.Add(new Models.LedgerModel
                {
                    ClientCd = dr["ld_clientcd"].ToString().Trim(),
                    ClientName = dr["code"].ToString().Trim(),
                    ExSeg = dr["ES"].ToString().Trim(),
                    Voucher = dr["ld_documentno"].ToString().Trim(),
                    Date = strDate,
                    Particular = strParticular.Trim(),
                    Debit = Debit,
                    Credit = Credit,
                    Balance = dblShowBal,
                    Flag = flag,
                    DocType = dr["ld_documenttype"].ToString().Trim(),
                    Common = dr["ld_common"].ToString().Trim(),
                    ld_dpid = dr["ld_dpid"].ToString().Trim(),
                    CommonDt = dr["ld_commondt"].ToString().Trim(),
                    ld_clientcd = dr["ld_clientcd"].ToString().Trim(),


                });
            }
            return iList;
        }


        //public IEnumerable<LedgerModel> GetLedgerFromBill(string date = "", string code = "", string strType = "")
        //{

        //    UtilityModel myutil = new UtilityModel();
        //    string strdafrom = "";
        //    string strdato = myutil.gstrDBToday();
        //    string strcurDate = date;

        //    strdafrom = "";
        //    string[] strYear = strcurDate.Split('/');
        //    if (int.Parse(strYear[1].ToString()) > 3)
        //    {
        //        strdafrom = strYear[2].ToString().Trim() + "0401";
        //    }
        //    else
        //    {
        //        int year = int.Parse(strYear[2].ToString()) - 1;
        //        strdafrom = year.ToString().Trim() + "0401";
        //    }

        //    string strClient = " and ld_clientcd='" + code.Trim() + "'";
        //    string result = "A";
        //    string strtable = "ledger";
        //    string newln = myutil.newline();

        //    strSQL = " select ld_clientcd, '' Code,'" + strdafrom + "' ld_dt, 'Opening Balance' ld_particular, 'O' ld_documenttype, 0 ld_documentno,  case sign(sum(ld_amount)) when 1 then 'D' else 'C' end as ld_debitflag, sum(ld_amount) 'ld_debit', 0 ord " + newln;
        //    strSQL += " from " + strtable + " where ld_clientcd='" + code + "'";
        //    if (result == "X")
        //    {
        //        strSQL += " and left(ld_DPID,1)= '" + HttpContext.Current.Session["CompanyCode"].ToString() + "'";
        //    }
        //    if (strType == "Commex")
        //    {
        //        strSQL += " and Right(rtrim(ld_DPID),1)= 'X'";
        //    }
        //    else
        //    {
        //        strSQL += " and Right(rtrim(ld_DPID),1) <> 'X'";
        //    }

        //    //strSQL += " and ld_dt < '" + strdafrom + "'" + strDpid.Trim() + "  group by ld_clientcd having sum(ld_amount)<>0";
        //    strSQL += " and ld_dt < '" + strdafrom + "' group by ld_clientcd having sum(ld_amount)<>0";
        //    strSQL += " union all ";
        //    strSQL += " select ld_clientcd,'' Code,ld_dt, ld_particular, ld_documenttype,ld_documentno, ld_debitflag, ld_amount ld_debit, 1 ord from " + strtable + "";
        //    strSQL += " where ld_clientcd='" + code + "' ";
        //    if (strdato != "XXXXXXXX" || strdato != "")
        //    {
        //        strSQL += " and ld_dt between '" + strdafrom + "'" + " AND '" + strdato + "'";
        //    }
        //    else
        //    {
        //        strSQL += " and ld_dt >= '" + strdafrom + "'";
        //    }

        //    //strSQL += strDpid.Trim();
        //    if (result == "X")
        //    {
        //        strSQL += " and left(ld_DPID,1)= '" + HttpContext.Current.Session["CompanyCode"].ToString() + "'";
        //    }
        //    if (strType == "Commex")
        //    {
        //        strSQL += " and Right(rtrim(ld_DPID),1) = 'X'";
        //    }
        //    else
        //    {
        //        strSQL += " and Right(rtrim(ld_DPID),1) <> 'X'";
        //    }
        //    strSQL += "  order by ord, ld_dt";

        //    //if (strType.Trim = "Commex" And Application("IsTplusCommex") = "N")
        //    LibraryModel mylib = new LibraryModel();
        //    DataTable dtDetail = new DataTable();
        //    if (strType.Trim() == "Commex")
        //    {
        //        // dsDetail = ObjUtility.DataRetriveCommex(strsql)
        //    }
        //    else
        //    {
        //        dtDetail = mylib.OpenDataTable(strSQL);
        //    }
        //    List<LedgerModel> uList = new List<LedgerModel>();
        //    if (dtDetail.Rows.Count > 0)
        //    {
        //        strClient = "";
        //        Decimal dblBal = 0;
        //        Decimal Debit = 0;
        //        Decimal Credit = 0;
        //        String strParticular = null;
        //        string strDate = null;
        //        foreach (DataRow dr in dtDetail.Rows)
        //        {
        //            if (strClient.Trim() != dr["ld_clientcd"].ToString().Trim())
        //            {
        //                dblBal = 0;
        //            }

        //            strClient = dr["ld_clientcd"].ToString().Trim();
        //            Debit = Convert.ToDecimal(dr["ld_debit"]);
        //            strParticular = dr["ld_particular"].ToString().Trim();
        //            strDate = dr["ld_dt"].ToString().Trim();
        //            strDate = strDate.Substring(6, 2) + "/" + strDate.Substring(4, 2) + "/" + strDate.Substring(0, 4);
        //            dblBal += Debit;
        //            Credit = 0;
        //            if (Debit < 0)
        //            {
        //                Credit = Debit * -1;
        //                Debit = 0;
        //            }
        //            Decimal dblShowBal = dblBal > 0 ? dblBal : dblBal * (-1);
        //            string flag = dblBal > 0 ? "Dr" : "Cr";
        //            if (dr.Table.Columns.Contains("ld_chequeno"))
        //            {
        //                if (dr["ld_chequeno"].ToString().Trim() != "")
        //                {
        //                    strParticular = "[" + dr["ld_chequeno"].ToString().Trim() + "] " + dr["ld_particular"].ToString().Trim();
        //                }
        //            }

        //            uList.Add(new Models.LedgerModel
        //            {
        //                ClientCd = dr["ld_clientcd"].ToString().Trim(),
        //                ClientName = dr["code"].ToString().Trim(),
        //                ExSeg = "",
        //                Voucher = "",
        //                Date = strDate,
        //                Particular = strParticular.Trim(),
        //                Debit = Debit,
        //                Credit = Credit,
        //                Balance = dblShowBal,
        //                Flag = flag,
        //                //DocType = ""
        //                 DocType = dr["ld_documenttype"].ToString().Trim(),
        //                Common = dr["ld_common"].ToString().Trim(),
        //                ld_dpid = dr["ld_dpid"].ToString().Trim(),
        //                CommonDt = dr["ld_commondt"].ToString().Trim(),
        //                ld_clientcd = dr["ld_clientcd"].ToString().Trim(),
        //            });
        //        }

        //    }
        //    return uList;
        //}

        public IEnumerable<LedgerModel> GetLedgerFromBill(string date = "", string code = "", string strType = "")
        {
            UtilityDBModel mydbutil = new UtilityDBModel();
            SqlConnection SQLConnComex = mydbutil.commexTemp_conn("Commex");
            if (strType.Contains('X'))
            {
                strType = "Commex";

                SQLConnComex.Open();
            }

            UtilityModel myutil = new UtilityModel();
            string strdafrom = "";
            string strdato = myutil.gstrDBToday();
            string strcurDate = date;

            strdafrom = "";
            string[] strYear = strcurDate.Split('/');
            if (int.Parse(strYear[1].ToString()) > 3)
            {
                strdafrom = strYear[2].ToString().Trim() + "0401";
            }
            else
            {
                int year = int.Parse(strYear[2].ToString()) - 1;
                strdafrom = year.ToString().Trim() + "0401";
            }

            string strClient = " and ld_clientcd='" + code.Trim() + "'";
            string result = "A";
            string strtable = "ledger";
            string newln = myutil.newline();

            strSQL = " select ld_clientcd, '' Code,'" + strdafrom + "' ld_dt, 'Opening Balance' ld_particular, 'O' ld_documenttype,''ld_common,''ld_dpid ,'' as ES ,'O' ld_documentno , ''ld_debitflag, sum(ld_amount) 'ld_debit', 0 ord " + newln;
            strSQL += " from " + strtable + " where ld_clientcd='" + code + "'";
            if (result == "X")
            {
                strSQL += " and left(ld_DPID,1)= '" + HttpContext.Current.Session["CompanyCode"].ToString() + "'";
            }
            if (strType == "Commex" && HttpContext.Current.Session["IsTplusCommex"].ToString() == "Y")
            {
                strSQL += " and Right(rtrim(ld_DPID),1)= 'X'";
            }
            else
            {
                strSQL += " and Right(rtrim(ld_DPID),1) <> 'X'";
            }

            //strSQL += " and ld_dt < '" + strdafrom + "'" + strDpid.Trim() + "  group by ld_clientcd having sum(ld_amount)<>0";
            strSQL += " and ld_dt < '" + strdafrom + "' group by ld_clientcd having sum(ld_amount)<>0";
            strSQL += " union all ";
            strSQL += " select ld_clientcd,'' Code,ld_dt, ld_particular, ld_documenttype,ld_common,ld_dpid,substring(ld_dpid, 2, 2) as ES,case ld_documentno when 0 then  case ld_documenttype When 'B' Then ld_documenttype + '/' + Ltrim(Rtrim(convert(char,ld_documentno))) else '' end  else ld_documenttype + '/' + Ltrim(Rtrim(convert(char,ld_documentno))) end ld_documentno ,  ld_debitflag, ld_amount ld_debit, 1 ord from " + strtable + "";
            strSQL += " where ld_clientcd='" + code + "' ";
            if (strdato != "XXXXXXXX" || strdato != "")
            {
                strSQL += " and ld_dt between '" + strdafrom + "'" + " AND '" + strdato + "'";
            }
            else
            {
                strSQL += " and ld_dt >= '" + strdafrom + "'";
            }

            //strSQL += strDpid.Trim();
            if (result == "X")
            {
                strSQL += " and left(ld_DPID,1)= '" + HttpContext.Current.Session["CompanyCode"].ToString() + "'";
            }
            if (strType == "Commex" && HttpContext.Current.Session["IsTplusCommex"].ToString() == "Y")
            {
                strSQL += " and Right(rtrim(ld_DPID),1) = 'X'";
            }
            else
            {
                strSQL += " and Right(rtrim(ld_DPID),1) <> 'X'";
            }
            strSQL += "  order by ord, ld_dt";

            //if (strType.Trim = "Commex" And Application("IsTplusCommex") = "N")
            LibraryModel mylib = new LibraryModel();
            DataTable dtDetail = new DataTable();
            if (strType.Trim() == "Commex")
            {
                dtDetail = mylib.OpenDataTable(strSQL, SQLConnComex);
            }
            else
            {
                dtDetail = mylib.OpenDataTable(strSQL);
            }
            List<LedgerModel> uList = new List<LedgerModel>();
            if (dtDetail.Rows.Count > 0)
            {
                strClient = "";
                Decimal dblBal = 0;
                Decimal Debit = 0;
                Decimal Credit = 0;
                String strParticular = null;
                string strDate = null;
                foreach (DataRow dr in dtDetail.Rows)
                {
                    if (strClient.Trim() != dr["ld_clientcd"].ToString().Trim())
                    {
                        dblBal = 0;
                    }

                    strClient = dr["ld_clientcd"].ToString().Trim();
                    Debit = Convert.ToDecimal(dr["ld_debit"]);
                    strParticular = dr["ld_particular"].ToString().Trim();
                    strDate = dr["ld_dt"].ToString().Trim();
                    strDate = strDate.Substring(6, 2) + "/" + strDate.Substring(4, 2) + "/" + strDate.Substring(0, 4);
                    dblBal += Debit;
                    Credit = 0;
                    if (Debit < 0)
                    {
                        Credit = Debit * -1;
                        Debit = 0;
                    }
                    Decimal dblShowBal = dblBal > 0 ? dblBal : dblBal * (-1);
                    string flag = dblBal > 0 ? "Dr" : "Cr";
                    if (dr.Table.Columns.Contains("ld_chequeno"))
                    {
                        if (dr["ld_chequeno"].ToString().Trim() != "")
                        {
                            strParticular = "[" + dr["ld_chequeno"].ToString().Trim() + "] " + dr["ld_particular"].ToString().Trim();
                        }
                    }

                    uList.Add(new Models.LedgerModel
                    {
                        ClientCd = dr["ld_clientcd"].ToString().Trim(),
                        ClientName = dr["code"].ToString().Trim(),
                        ExSeg = dr["ES"].ToString().Trim(),
                        Voucher = dr["ld_documentno"].ToString().Trim(),
                        Date = strDate,
                        Particular = strParticular.Trim(),
                        Debit = Debit,
                        Credit = Credit,
                        Balance = dblShowBal,
                        Flag = flag,
                        DocType = dr["ld_documenttype"].ToString().Trim(),
                        Common = dr["ld_common"].ToString().Trim(),
                        ld_dpid = dr["ld_dpid"].ToString().Trim(),
                        CommonDt = dr["ld_dt"].ToString().Trim(),
                        ld_clientcd = dr["ld_clientcd"].ToString().Trim(),

                    });
                }

            }
            return uList;
        }

    }

    public class modBrokerage : ConnectionModel
    {
        //public DataTable GetClientBrokerage(string Select, string Code, string FromDate, string ToDate, string strDPID = "", string ClientType = "")
        //{


        //    string str = "";
        //    string strExch = "";
        //    string strExchCash = "";
        //    double dblBTot = 0;
        //    double dblTTot = 0;
        //    short intSelCount = 0;
        //    string ConnComex = null;
        //    //rptAnalysis.Visible = false;
        //    int i = 0;
        //    string strwhere = "";
        //    string strCommexDB = "";
        //    DataTable dtSum;
        //    LibraryModel mylib = new LibraryModel(true);
        //    UtilityModel myutil = new UtilityModel();
        //    UtilityDBModel mydbutil = new UtilityDBModel();
        //    //var ObjCommexCon = new SqlConnection();
        //    string getuser = myutil.gstrUserCd();

        //    //DataSet  dsDetail = ObjUtility.DataRetriveCommex(strsql)
        //    SqlConnection SQLConnComex = mydbutil.commexTemp_conn("Commex");

        //    string ExCommex = "";
        //    string Exchng = "";
        //    string[] strArray = strDPID.Split(',');
        //    bool first = true;
        //    foreach (string obj in strArray)
        //    {
        //        if (obj.Length >= 2)
        //        {
        //            if (first)
        //            {
        //                Exchng = obj;
        //                first = false;
        //            }
        //            else
        //            {
        //                Exchng = obj + "," + Exchng;
        //            }
        //        }

        //        //your insert query
        //    }
        //    bool Cofirst = true;
        //    foreach (string obj in strArray)
        //    {
        //        if (obj.Length < 2)
        //        {
        //            if (Cofirst)
        //            {
        //                ExCommex = obj;
        //                Cofirst = false;
        //            }
        //            else
        //            {
        //                ExCommex = obj + "," + ExCommex;
        //            }
        //        }

        //        //your insert query
        //    }


        //    // string asd = Application["IsTplusCommex"];
        //    // ObjCommexCon = objApplicationUser.commexTemp_conn(Convert.ToString(Application["IsTplusCommex"]));
        //    //if (UCExSegment.SelectedTplusExcSeg.Trim == "" & UCExSegment.SelectedCommodityExchange.Trim == "")
        //    //{
        //    //    ClientScript.RegisterStartupScript(GetType(), "Message", "alert(\"Please select Exchange Segement  \");", true);
        //    //    return;
        //    //}

        //    using (SqlConnection curCon = new SqlConnection(connectionstring))
        //    {
        //        curCon.Open();
        //        try
        //        {
        //            mylib.ExecSQL("Drop Table #T_BrokAnalysis", curCon);
        //            mylib.ExecSQL("drop table #Clnts ", curCon);
        //        }
        //        catch (Exception)
        //        {

        //        }
        //        finally
        //        {
        //            //------------------------------Start create Tempdates11 table------------------------------------


        //            strSQL = " Create Table #T_BrokAnalysis ( ";
        //            strSQL = strSQL + " t_companycode char(3) not null,";
        //            strSQL = strSQL + " t_Clientcd Varchar(8) not null,";
        //            strSQL = strSQL + " t_Brokerage money not null,  ";
        //            strSQL = strSQL + " t_RemShare money not null ) ";

        //            mylib.ExecSQL(strSQL, curCon);

        //            strSQL = " create index #idx_tBrokAnalysis_companycode_Clientcd ";
        //            strSQL = strSQL + " on #T_BrokAnalysis ( t_companycode ,t_Clientcd )";

        //            mylib.ExecSQL(strSQL, curCon);

        //            strSQL = "select cm_CD LA_CD into #Clnts from client_master, LoginAccess ";
        //            strSQL = strSQL + " where((la_grouping = 'B' and LA_GrCode = cm_brboffcode) or(LA_grouping = 'G' and la_grcode = cm_groupcd)";
        //            strSQL = strSQL + "or(LA_grouping = 'A' and cm_cd = cm_cd) or(LA_grouping = 'C' and la_grcode = cm_cd) or(LA_grouping = 'F' and LA_GrCode = cm_familycd) or(LA_grouping = 'R' and LA_GrCode = cm_subbroker)) and LA_UserId = '"+getuser+"'";
        //            mylib.ExecSQL(strSQL, curCon);
        //            //------------------------------End create Tempdates11 table------------------------------------






        //            //------------------------------Start create Condition table------------------------------------
        //            if (Code != "")
        //            {
        //                if (Select == "CL")
        //                    strwhere += " and cm_Cd = '" + Code.Trim() + "' ";
        //                else if (Select == "FM")
        //                    strwhere += " and cm_familycd = '" + Code.Trim() + "'"; // and cm_familycd= fm_cd "
        //                else if (Select == "GR")
        //                    strwhere += " and cm_groupcd = '" + Code.Trim() + "' "; // and cm_groupcd=gr_cd "
        //                else if (Select == "SB")
        //                    strwhere += " and cm_subbroker = '" + Code.Trim() + "' "; // and cm_subbroker=rm_Cd "
        //                else if (Select == "RM")
        //                    strwhere += " and rtrim(cm_dpactno) = '" + Code.Trim() + "'";
        //                else if (Select == "BR")
        //                    strwhere += " and cm_brboffcode = '" + Code.Trim() + "'";
        //                else if (Select == "ALL")
        //                    strwhere += " ";
        //            }


        //            //------------------------------End create Condition table------------------------------------




        //            //------------------------------First Insert Start------------------------------------
        //            if (strDPID != "")
        //            {
        //                strSQL = "Insert into #T_BrokAnalysis ";
        //                strSQL = strSQL + " select td_companycode + Left(td_stlmnt,1) + 'C' , td_clientcd ,";
        //                strSQL = strSQL + " Sum((td_bqty + td_Sqty) * td_brokerage), 0 ";
        //                strSQL = strSQL + " from Trx With(index(idx_trx_dt_clientcd)), client_master ";
        //                strSQL = strSQL + " where td_dt between '" + FromDate + "' and '" + ToDate + "'";
        //                if (strwhere != "")
        //                    strSQL += strwhere;

        //                strSQL = strSQL + " and td_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' and left(td_stlmnt,1)+'C' in ('" + strDPID.Replace(",", "','") + "')";
        //                strSQL = strSQL + (" and td_clientcd=cm_cd and exists " + myutil.LoginAccess("td_clientcd") + "");



        //                if (ClientType == "Remissier Wise")
        //                    strSQL = strSQL + " and cm_subbroker <> '' ";
        //                strSQL = strSQL + "group by td_companycode + Left(td_stlmnt,1) + 'C', td_clientcd ";
        //                strSQL = strSQL + " union all ";
        //                strSQL = strSQL + " Select CompanyCode , td_clientcd , sum(Brok) , 0 ";
        //                strSQL = strSQL + " From ( ";
        //                strSQL = strSQL + " select td_companycode + td_exchange + td_segment CompanyCode , td_clientcd ,";
        //                strSQL = strSQL + " Sum((td_bqty + td_Sqty) * td_brokerage*sm_multiplier) Brok ";
        //                strSQL = strSQL + " from Trades With(index(idx_trades_dt_clientcd)) , client_master , Series_master , #Clnts   ";
        //                strSQL = strSQL + " where td_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' and td_exchange+td_segment in ('" + strDPID.Replace(",", "','") + "')";
        //                strSQL = strSQL + " and td_exchange = sm_exchange and td_Segment = sm_Segment and td_seriesid = sm_seriesid ";
        //                strSQL = strSQL + " and td_dt between '" + FromDate + "' and '" + ToDate + "'";

        //                if (strwhere != "")
        //                    strSQL += strwhere;

        //                if (ClientType == "Remissier Wise")
        //                    strSQL = strSQL + " and cm_subbroker <> '' ";
        //                strSQL = strSQL + (" and td_clientcd=cm_cd  and cm_cd=LA_CD");
        //                strSQL = strSQL + " group by td_companycode , td_exchange , td_Segment , td_clientcd ";
        //                strSQL = strSQL + " union all ";
        //                strSQL = strSQL + " select ex_companycode + ex_exchange + ex_segment, ex_clientcd ,";
        //                strSQL = strSQL + " Sum((ex_aqty + ex_eqty) * ex_brokerage*sm_multiplier) ";
        //                strSQL = strSQL + " from Exercise , client_master,series_master , #Clnts ";
        //                strSQL = strSQL + " where ex_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' and ex_exchange+ex_segment in ('" + strDPID.Replace(",", "','") + "')";
        //                strSQL = strSQL + " and ex_exchange = sm_exchange and ex_segment = sm_segment and ex_seriesid = sm_seriesid ";
        //                strSQL = strSQL + " and ex_dt between '" + FromDate + "' and '" + ToDate + "'";

        //                if (strwhere != "")
        //                    strSQL += strwhere;

        //                if (ClientType == "Remissier Wise")
        //                    strSQL = strSQL + " and cm_subbroker <> '' ";
        //                strSQL = strSQL + ("and cm_cd = ex_clientcd and cm_cd=LA_CD ");
        //                strSQL = strSQL + " group by ex_companycode , ex_exchange , ex_segment , ex_clientcd ) a ";
        //                strSQL = strSQL + " Group By CompanyCode , td_clientcd  ";

        //                mylib.ExecSQL(strSQL, curCon);



        //                strSQL = "Update #T_BrokAnalysis Set t_RemShare = A.RemShare ";
        //                strSQL = strSQL + " From ( select rs_companycode + Left(rs_stlmnt,1)+ 'C' rs_companycode , rs_clientcd , Sum(rs_hisshare) RemShare ";
        //                strSQL = strSQL + " from Crevenue_sharing , client_master ";
        //                strSQL = strSQL + " where rs_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' and left(rs_stlmnt,1)+'C' in ('" + strDPID.Replace(",", "','") + "')";
        //                strSQL = strSQL + " and rs_dt between '" + FromDate + "' and '" + ToDate + "'";
        //                strSQL = strSQL + (" and rs_clientcd = cm_cd  ");
        //                if (strwhere != "")
        //                    strSQL += strwhere;
        //                strSQL = strSQL + " group by rs_companycode + Left(rs_stlmnt,1)+ 'C',  rs_clientcd ) A ";
        //                strSQL = strSQL + " Where t_companycode = A.rs_companycode and t_Clientcd =  rs_clientcd ";
        //                mylib.ExecSQL(strSQL, curCon);

        //                strSQL = "Update #T_BrokAnalysis Set t_RemShare = A.RemShare ";
        //                strSQL = strSQL + " From ( select rs_companycode + rs_exchange + rs_segment rs_companycode , rs_clientcd , Sum(rs_hisshare) RemShare ";
        //                strSQL = strSQL + " from Frevenue_sharing , client_master, #clnts ";
        //                strSQL = strSQL + " where rs_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' and rs_exchange+rs_segment in ('" + strDPID.Replace(",", "','") + "')";
        //                strSQL = strSQL + " and rs_dt between '" + FromDate + "' and '" + ToDate + "'"; // & Replace(strWhere, "td_", "rs_") & strAdvancefilter
        //                strSQL = strSQL + ("  and rs_clientcd = cm_cd and cm_cd=LA_CD ");
        //                if (strwhere != "")
        //                    strSQL += strwhere;
        //                strSQL = strSQL + " group by rs_companycode + rs_exchange + rs_segment,  rs_clientcd ) A ";
        //                strSQL = strSQL + " Where t_companycode = A.rs_companycode and t_Clientcd =  rs_clientcd ";
        //                mylib.ExecSQL(strSQL, curCon);
        //            }

        //            //------------------------------First Insert End------------------------------------








        //            //------------------------------Second Insert Start------------------------------------
        //            if (SQLConnComex != null && ExCommex != null)
        //            {
        //                strCommexDB = "[" + SQLConnComex.DataSource + "]" + "." + "[" + SQLConnComex.Database + "]" + ".dbo.";
        //                strSQL = "Insert into #T_BrokAnalysis ";
        //                strSQL = strSQL + " Select CompanyCode , td_clientcd , sum(Brok) , 0 ";
        //                strSQL = strSQL + " From ( ";
        //                strSQL = strSQL + " select td_companycode + td_exchange + 'X'  CompanyCode , td_clientcd ,";
        //                strSQL = strSQL + " Sum((td_bqty + td_Sqty) * td_brokerage*sm_multiplier) Brok ";
        //                strSQL = strSQL + " from " + strCommexDB + "Trades , " + strCommexDB + "client_master , " + strCommexDB + "Series_master, #Clnts    ";
        //                strSQL = strSQL + " where td_exchange in ('" + ExCommex.Replace("X", "").Replace(",", "','") + "')";
        //                strSQL = strSQL + " and td_exchange = sm_exchange and td_seriesid = sm_seriesid ";
        //                strSQL = strSQL + " and td_dt between '" + FromDate + "' and '" + ToDate + "'";
        //                if (strwhere != "")
        //                    strSQL += strwhere;

        //                if (ClientType == "Remissier Wise")
        //                    strSQL = strSQL + " and cm_subbroker <> '' ";
        //                strSQL = strSQL + " and td_clientcd=cm_cd and cm_cd=LA_CD ";
        //                strSQL = strSQL + " group by td_companycode , td_exchange , td_clientcd ";
        //                strSQL = strSQL + " union all ";
        //                strSQL = strSQL + " select ex_companycode + ex_exchange +'X' , ex_clientcd ,";
        //                strSQL = strSQL + " Sum((ex_aqty + ex_eqty) * ex_brokerage*sm_multiplier) ";
        //                strSQL = strSQL + " from " + strCommexDB + "Exercise , " + strCommexDB + "client_master, " + strCommexDB + "series_master , #Clnts    ";
        //                strSQL = strSQL + " where ex_exchange in ('" + ExCommex.Replace("X", "").Replace(",", "','") + "')";
        //                strSQL = strSQL + " and ex_exchange = sm_exchange and ex_seriesid = sm_seriesid ";
        //                strSQL = strSQL + " and ex_dt between '" + FromDate + "' and '" + ToDate + "'";
        //                if (strwhere != "")
        //                    strSQL += strwhere;

        //                if (ClientType == "Remissier Wise")
        //                    strSQL = strSQL + " and cm_subbroker <> '' ";
        //                strSQL = strSQL + " and ex_clientcd=cm_cd  and exists " + myutil.LoginAccess("ex_clientcd") + "";
        //                strSQL = strSQL + " group by ex_companycode , ex_exchange , ex_clientcd ) a ";
        //                strSQL = strSQL + " Group By CompanyCode , td_clientcd  ";
        //                mylib.ExecSQL(strSQL, curCon);

        //                strSQL = "Update #T_BrokAnalysis Set t_RemShare = A.RemShare ";
        //                strSQL = strSQL + " From ( select rs_companycode + rs_exchange rs_companycode , rs_clientcd , Sum(rs_hisshare) RemShare ";
        //                strSQL = strSQL + " from  " + strCommexDB + "Frevenue_sharing ,  " + strCommexDB + "client_master , #Clnts  ";
        //                strSQL = strSQL + " where rs_exchange in ('" + ExCommex.Replace("X", "").Replace(",", "','") + "')";
        //                strSQL = strSQL + " and rs_clientcd = cm_cd and cm_cd=LA_CD";
        //                if (strwhere != "")
        //                    strSQL += strwhere;
        //                strSQL = strSQL + " group by rs_companycode + rs_exchange ,  rs_clientcd ) A ";
        //                strSQL = strSQL + " Where t_companycode = A.rs_companycode and t_Clientcd =  rs_clientcd ";
        //                mylib.ExecSQL(strSQL, curCon);
        //            }

        //            //------------------------------Second Insert End------------------------------------



        //            string strFieldCode = "";
        //            string strFieldName = "";
        //            string strFields = "";
        //            string strJoin = "";
        //            string StrData = "";
        //            string StrData1 = "";
        //            string strData2 = "";
        //            string strData3 = "";
        //            string strData4 = "";


        //            if (ClientType == "Client Wise")
        //            {
        //                strFieldCode = "b.cm_cd as Code";
        //                strFieldName = "b.cm_Name as Name";
        //                strFields = "b.cm_cd,b.cm_Name";
        //                strJoin = " and b.cm_cd = cm_cd ";
        //            }
        //            else if (ClientType == "Group Wise")
        //            {
        //                strFieldCode = "gr_cd as Code";
        //                strFieldName = "gr_desc as Name";
        //                strFields = "gr_cd,gr_desc";
        //                strJoin = " and b.gr_cd = gr_cd ";
        //            }
        //            else if (ClientType == "Family Wise")
        //            {
        //                strFieldCode = "fm_cd as Code";
        //                strFieldName = "fm_desc as Name";
        //                strFields = "fm_cd,fm_desc";
        //            }
        //            else if (ClientType == "Branch Wise")
        //            {
        //                strFieldCode = "bm_branchcd as Code";
        //                strFieldName = "bm_branchname as Name";
        //                strFields = "bm_branchcd,bm_branchname";
        //            }
        //            else if (ClientType == "Remissier Wise")
        //            {
        //                strFieldCode = "b.cm_subBroker as Code";
        //                strFieldName = "c.RM_Name as Name";
        //                strFields = "b.cm_subBroker , c.RM_Name  ";
        //                strJoin = " and b.cm_cd = c.RM_CD";
        //            }
        //            else if (ClientType == "RM Wise")
        //            {
        //                strFieldCode = "b.cm_dpactno as Code";
        //                strFieldName = "d.rm_name as Name";
        //                strFields = "b.cm_dpactno , d.rm_name ";
        //            }

        //            strSQL = "select CES_Cd from CompanyExchangeSegments Where CES_CompanyCd = '" + HttpContext.Current.Session["CompanyCode"] + "' and substring(CES_Cd,2,2) in ('" + strDPID.Replace(",BX", "").Replace(",", "','") + "')";
        //            if (ExCommex != "")
        //            {
        //                var ObjCommexCon = new SqlConnection();
        //                if (strDPID != "")
        //                    strSQL += " union all ";
        //                strSQL += " select left(CES_Cd,2)+'X' CES_Cd from " + "[" + SQLConnComex.DataSource + "]" + "." + SQLConnComex.Database + ".dbo.CompanyExchangeSegments Where substring(CES_Cd,2,1) in ('" + ExCommex.Replace("X", "").Replace(",", "','") + "')";
        //            }
        //            DataTable dtExchSet = mylib.OpenDataTable(strSQL, curCon);
        //            //DataTable dtExchSet = mylib.OpenDataTable(strSQL);

        //            ArrayList ArrExchlst = new ArrayList();
        //            ArrExchlst.Add("Code");
        //            ArrExchlst.Add("Name");
        //            ArrExchlst.Add("cm_cd");
        //            ArrExchlst.Add("cm_name");

        //            strSQL = "Select " + strFieldCode + ", " + strFieldName + ", " + strFields + "";

        //            for (i = 0; i <= dtExchSet.Rows.Count - 1; i++)
        //            {
        //                strSQL = strSQL + " , Sum(Case t_companycode When '" + dtExchSet.Rows[i][0].ToString() + "' Then convert(decimal(15,0),t_Brokerage) else 0 end ) " + dtExchSet.Rows[i][0].ToString() + "t_Brokerage  , ";
        //                strSQL = strSQL + " Sum(Case t_companycode When '" + dtExchSet.Rows[i][0].ToString() + "' Then convert(decimal(15,0),t_RemShare) else 0 end ) " + dtExchSet.Rows[i][0].ToString() + "t_RemShare  ";
        //                ArrExchlst.Add(dtExchSet.Rows[i][0].ToString() + "t_Brokerage");
        //                ArrExchlst.Add(dtExchSet.Rows[i][0].ToString() + "t_RemShare");
        //            }
        //            ArrExchlst.Add("t_RemShare");
        //            ArrExchlst.Add("t_Brokerage");
        //            strSQL = strSQL + " , convert(decimal(15,0),Sum(t_RemShare )) t_RemShare ";
        //            strSQL = strSQL + " , convert(decimal(15,0),Sum(t_Brokerage)) t_Brokerage ";
        //            strSQL = strSQL + " From #T_BrokAnalysis , Client_master b left outer join RM_MASTER d on b.cm_dpactno = d.RM_CD left outer join SubBrokers c on b.cm_subBroker = c.RM_CD  , Branch_master , Family_Master , Group_master ";
        //            strSQL = strSQL + " Where t_clientcd = b.cm_cd and b.cm_familycd = fm_cd ";
        //            strSQL = strSQL + " and b.cm_groupcd = gr_cd and b.cm_brboffcode = bm_Branchcd   ";
        //            strSQL = strSQL + " group by " + strFields;
        //            strSQL = strSQL + " Having  (Sum(t_RemShare ) >0 or  Sum(t_Brokerage) > 0)";
        //            strSQL = strSQL + " order by " + strFields;




        //            dtSum = mylib.OpenDataTable(strSQL, curCon);


        //        }



        //        //       List<BrokerageModel> Broview = new List<BrokerageModel>();
        //        //       for (int ie = 4; ie < dtSum.Rows.Count; ie++)
        //        //       {

        //        //           Broview = dtSum.AsEnumerable()
        //        //.Select(row => new BrokerageModel
        //        //{
        //        //    //Code = row.Field<string>("Code"),
        //        //    //Name = row.Field<string>("Name"),

        //        //    ////----------------BSE   	Cash      
        //        //    //dtSum.Columns[i].ColumnName = row.Field<decimal>(dtSum.Columns[i].ColumnName),
        //        //    //BSECashShare = row.Field<decimal>("ABCt_RemShare"),

        //        //    ////----------------NSE   	Cash           
        //        //    //NSECashGross = row.Field<decimal>("ANCt_Brokerage"),
        //        //    //NSECashShare = row.Field<decimal>("ANCt_RemShare"),

        //        //    ////----------------MCX   	Cash      
        //        //    //MCXCashGross = row.Field<decimal>("AMCt_Brokerage"),
        //        //    //MCXCashShare = row.Field<decimal>("AMCt_RemShare"),

        //        //    ////----------------BSE   	F&O        
        //        //    //BSEFOGross = row.Field<decimal>("ABFt_Brokerage"),
        //        //    //BSEFOShare = row.Field<decimal>("ABFt_RemShare"),

        //        //    ////----------------NSE   	F&O       
        //        //    //NSEFOGross = row.Field<decimal>("ANFt_Brokerage"),
        //        //    //NSEFOShare = row.Field<decimal>("ANFt_RemShare"),

        //        //    ////----------------MCX      F & O
        //        //    //MCXFOGross = row.Field<decimal>("AMFt_Brokerage"),
        //        //    //MCXFOShare = row.Field<decimal>("AMFt_RemShare"),

        //        //    ////----------------NSE   	FX        
        //        //    //NSEFXGross = row.Field<decimal>("ANKt_Brokerage"),
        //        //    //NSEFXShare = row.Field<decimal>("ANKt_RemShare"),

        //        //    ////----------------MCX   	FX        
        //        //    //MCXFXGross = row.Field<decimal>("AMKt_Brokerage"),
        //        //    //MCXFXShare = row.Field<decimal>("AMKt_RemShare")
        //        //}).ToList();
        //        //}


        //        return dtSum;
        //    }

        //}

        public DataTable GetClientBrokerage(string Select, string Code, string FromDate, string ToDate, string strDPID = "", string ClientType = "")
        {


            string str = "";
            string strExch = "";
            string strExchCash = "";
            double dblBTot = 0;
            double dblTTot = 0;
            short intSelCount = 0;
            string ConnComex = null;
            //rptAnalysis.Visible = false;
            int i = 0;
            string strwhere = "";
            string strCommexDB = "";
            DataTable dtSum;
            LibraryModel mylib = new LibraryModel(true);
            UtilityModel myutil = new UtilityModel();
            UtilityDBModel mydbutil = new UtilityDBModel();
            //var ObjCommexCon = new SqlConnection();

            //DataSet  dsDetail = ObjUtility.DataRetriveCommex(strsql)
            SqlConnection SQLConnComex = mydbutil.commexTemp_conn("Commex");

            string ExCommex = "";
            string Exchng = "";
            string[] strArray = strDPID.Split(',');
            bool first = true;
            foreach (string obj in strArray)
            {
                if (obj.Length >= 2 && obj != "FX")
                {
                    if (first)
                    {
                        Exchng = obj;
                        first = false;
                    }
                    else
                    {
                        Exchng = obj + "," + Exchng;
                    }
                }

                //your insert query
            }
            bool Cofirst = true;
            foreach (string obj in strArray)
            {
                if (obj == "FX" || obj.Length < 2)
                {
                    if (Cofirst)
                    {
                        ExCommex = obj;
                        Cofirst = false;
                    }
                    else
                    {
                        ExCommex = obj + "," + ExCommex;
                    }
                }

                //your insert query
            }


            // string asd = Application["IsTplusCommex"];
            // ObjCommexCon = objApplicationUser.commexTemp_conn(Convert.ToString(Application["IsTplusCommex"]));
            //if (UCExSegment.SelectedTplusExcSeg.Trim == "" & UCExSegment.SelectedCommodityExchange.Trim == "")
            //{
            //    ClientScript.RegisterStartupScript(GetType(), "Message", "alert(\"Please select Exchange Segement  \");", true);
            //    return;
            //}

            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {
                curCon.Open();
                try
                {
                    mylib.ExecSQL("Drop Table #T_BrokAnalysis", curCon);
                }
                catch (Exception)
                {

                }
                finally
                {
                    //------------------------------Start create Tempdates11 table------------------------------------


                    strSQL = " Create Table #T_BrokAnalysis ( ";
                    strSQL = strSQL + " t_companycode char(3) not null,";
                    strSQL = strSQL + " t_Clientcd Varchar(8) not null,";
                    strSQL = strSQL + " t_Brokerage money not null,  ";
                    strSQL = strSQL + " t_RemShare money not null ) ";

                    mylib.ExecSQL(strSQL, curCon);

                    strSQL = " create index #idx_tBrokAnalysis_companycode_Clientcd ";
                    strSQL = strSQL + " on #T_BrokAnalysis ( t_companycode ,t_Clientcd )";

                    mylib.ExecSQL(strSQL, curCon);

                    //strSQL = " Create Table #Clnts ( ";
                    //strSQL = strSQL + " cm_CD char(15) not null,";
                    //strSQL = strSQL + " cm_CD char(15) not null)";


                    //mylib.ExecSQL(strSQL, curCon);

                    //strSQL = "select cm_CD LA_CD into #Clnts from client_master, LoginAccess where((la_grouping = 'B' and LA_GrCode = cm_brboffcode) or(LA_grouping = 'G' and la_grcode = cm_groupcd) or(LA_grouping = 'A' and cm_cd = cm_cd) or(LA_grouping = 'C' and la_grcode = cm_cd) or(LA_grouping = 'F' and LA_GrCode = cm_familycd) or(LA_grouping = 'R' and LA_GrCode = cm_subbroker)) and LA_UserId = '" + HttpContext.Current.Session["gstrUsercd"] + "' ";
                    //mylib.ExecSQL(strSQL, curCon);
                    //------------------------------End create Tempdates11 table------------------------------------






                    //------------------------------Start create Condition table------------------------------------

                    if (Select == "CL")
                        strwhere += " and cm_Cd = '" + Code.Trim() + "' ";
                    else if (Select == "FM")
                        strwhere += " and cm_familycd = '" + Code.Trim() + "' "; // and cm_familycd= fm_cd "
                    else if (Select == "GR")
                        strwhere += " and cm_groupcd = '" + Code.Trim() + "' "; // and cm_groupcd=gr_cd "
                    else if (Select == "SB")
                        strwhere += " and cm_subbroker = '" + Code.Trim() + "' "; // and cm_subbroker=rm_Cd "
                    else if (Select == "RM")
                        strwhere += " and rtrim(cm_dpactno) = '" + Code.Trim() + "'";
                    else if (Select == "BR")
                        strwhere += " and cm_brboffcode = '" + Code.Trim() + "'";
                    else if (Select == "ALL")
                        strwhere += " ";



                    //------------------------------End create Condition table------------------------------------




                    //------------------------------First Insert Start------------------------------------
                    if (Exchng != "")
                    {
                        strSQL = "Insert into #T_BrokAnalysis ";
                        strSQL = strSQL + " select td_companycode + Left(td_stlmnt,1) + 'C' , td_clientcd ,";
                        strSQL = strSQL + " Sum((td_bqty + td_Sqty) * td_brokerage), 0 ";
                        strSQL = strSQL + " from Trx With(index(idx_trx_dt_clientcd)), client_master";
                        strSQL = strSQL + " where td_dt between '" + FromDate + "' and '" + ToDate + "'";
                        if (strwhere != "")
                            strSQL += strwhere;

                        strSQL = strSQL + " and td_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' and left(td_stlmnt,1)+'C' in ('" + Exchng.Replace(",", "','") + "')";
                        strSQL = strSQL + (" and td_clientcd=cm_cd " + HttpContext.Current.Session["LoginAccessOld"]);



                        if (ClientType == "Remissier Wise")
                            strSQL = strSQL + " and cm_subbroker <> '' ";

                        strSQL = strSQL + "group by td_companycode + Left(td_stlmnt,1) + 'C', td_clientcd ";
                        strSQL = strSQL + " union all ";
                        strSQL = strSQL + " Select CompanyCode , td_clientcd , sum(Brok) , 0 ";
                        strSQL = strSQL + " From ( ";
                        strSQL = strSQL + " select td_companycode + td_exchange + td_segment CompanyCode , td_clientcd ,";
                        strSQL = strSQL + " Sum((td_bqty + td_Sqty) * td_brokerage*sm_multiplier) Brok ";
                        strSQL = strSQL + " from Trades With(index(idx_trades_dt_clientcd)) , client_master , Series_master ";
                        strSQL = strSQL + " where td_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' and td_exchange+td_segment in ('" + Exchng.Replace(",", "','") + "')";
                        strSQL = strSQL + " and td_exchange = sm_exchange and td_Segment = sm_Segment and td_seriesid = sm_seriesid ";
                        strSQL = strSQL + " and td_dt between '" + FromDate + "' and '" + ToDate + "'";

                        if (strwhere != "")
                            strSQL += strwhere;

                        if (ClientType == "Remissier Wise")
                            strSQL = strSQL + " and cm_subbroker <> '' ";

                        strSQL = strSQL + (" and td_clientcd=cm_cd " + HttpContext.Current.Session["LoginAccessOld"]);
                        strSQL = strSQL + " group by td_companycode , td_exchange , td_Segment , td_clientcd ";
                        strSQL = strSQL + " union all ";
                        strSQL = strSQL + " select ex_companycode + ex_exchange + ex_segment, ex_clientcd ,";
                        strSQL = strSQL + " Sum((ex_aqty + ex_eqty) * ex_brokerage*sm_multiplier) ";
                        strSQL = strSQL + " from Exercise , client_master,series_master ";
                        strSQL = strSQL + " where ex_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' and ex_exchange+ex_segment in ('" + Exchng.Replace(",", "','") + "')";
                        strSQL = strSQL + " and ex_exchange = sm_exchange and ex_segment = sm_segment and ex_seriesid = sm_seriesid ";
                        strSQL = strSQL + " and ex_dt between '" + FromDate + "' and '" + ToDate + "'";

                        if (strwhere != "")
                            strSQL += strwhere;

                        if (ClientType == "Remissier Wise")
                            strSQL = strSQL + " and cm_subbroker <> '' ";

                        strSQL = strSQL + (" and ex_clientcd=cm_cd " + HttpContext.Current.Session["LoginAccessOld"]);
                        strSQL = strSQL + " group by ex_companycode , ex_exchange , ex_segment , ex_clientcd ) a ";
                        strSQL = strSQL + " Group By CompanyCode , td_clientcd  ";

                        mylib.ExecSQL(strSQL, curCon);



                        strSQL = "Update #T_BrokAnalysis Set t_RemShare = A.RemShare ";
                        strSQL = strSQL + " From ( select rs_companycode + Left(rs_stlmnt,1)+ 'C' rs_companycode , rs_clientcd , Sum(rs_hisshare) RemShare ";
                        strSQL = strSQL + " from Crevenue_sharing , client_master ";
                        strSQL = strSQL + " where rs_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' and left(rs_stlmnt,1)+'C' in ('" + Exchng.Replace(",", "','") + "')";
                        strSQL = strSQL + " and rs_dt between '" + FromDate + "' and '" + ToDate + "'";
                        strSQL = strSQL + (" and rs_clientcd = cm_cd  " + HttpContext.Current.Session["LoginAccessOld"]);
                        if (strwhere != "")
                            strSQL += strwhere;
                        strSQL = strSQL + " group by rs_companycode + Left(rs_stlmnt,1)+ 'C',  rs_clientcd ) A ";
                        strSQL = strSQL + " Where t_companycode = A.rs_companycode and t_Clientcd =  rs_clientcd ";
                        mylib.ExecSQL(strSQL, curCon);

                        strSQL = "Update #T_BrokAnalysis Set t_RemShare = A.RemShare ";
                        strSQL = strSQL + " From ( select rs_companycode + rs_exchange + rs_segment rs_companycode , rs_clientcd , Sum(rs_hisshare) RemShare ";
                        strSQL = strSQL + " from Frevenue_sharing , client_master ";
                        strSQL = strSQL + " where rs_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' and rs_exchange+rs_segment in ('" + Exchng.Replace(",", "','") + "')";
                        strSQL = strSQL + " and rs_dt between '" + FromDate + "' and '" + ToDate + "'"; // & Replace(strWhere, "td_", "rs_") & strAdvancefilter
                        strSQL = strSQL + (" and rs_clientcd = cm_cd  " + HttpContext.Current.Session["LoginAccessOld"]);
                        if (strwhere != "")
                            strSQL += strwhere;
                        strSQL = strSQL + " group by rs_companycode + rs_exchange + rs_segment,  rs_clientcd ) A ";
                        strSQL = strSQL + " Where t_companycode = A.rs_companycode and t_Clientcd =  rs_clientcd ";
                        mylib.ExecSQL(strSQL, curCon);
                    }

                    //------------------------------First Insert End------------------------------------

                    //------------------------------Second Insert Start------------------------------------
                    if (SQLConnComex != null && ExCommex != null && ExCommex != "")
                    {
                        strCommexDB = "[" + SQLConnComex.DataSource + "]" + "." + "[" + SQLConnComex.Database + "]" + ".dbo.";
                        strSQL = "Insert into #T_BrokAnalysis ";
                        strSQL = strSQL + " Select CompanyCode , td_clientcd , sum(Brok) , 0 ";
                        strSQL = strSQL + " From ( ";
                        strSQL = strSQL + " select td_companycode + td_exchange + 'X'  CompanyCode , td_clientcd ,";
                        strSQL = strSQL + " Sum((td_bqty + td_Sqty) * td_brokerage*sm_multiplier) Brok ";
                        strSQL = strSQL + " from " + strCommexDB + "Trades , " + strCommexDB + "client_master , " + strCommexDB + "Series_master";
                        strSQL = strSQL + " where td_exchange in ('" + ExCommex.Replace("X", "").Replace(",", "','") + "')";
                        strSQL = strSQL + " and td_exchange = sm_exchange and td_seriesid = sm_seriesid ";
                        strSQL = strSQL + " and td_dt between '" + FromDate + "' and '" + ToDate + "'";
                        if (strwhere != "")
                            strSQL += strwhere;

                        if (ClientType == "Remissier Wise")
                            strSQL = strSQL + " and cm_subbroker <> '' ";
                        strSQL = strSQL + " and td_clientcd=cm_cd " + HttpContext.Current.Session["LoginAccessOld"];//LoginAccessCommex
                        strSQL = strSQL + " group by td_companycode , td_exchange , td_clientcd ";
                        strSQL = strSQL + " union all ";
                        strSQL = strSQL + " select ex_companycode + ex_exchange +'X' , ex_clientcd ,";
                        strSQL = strSQL + " Sum((ex_aqty + ex_eqty) * ex_brokerage*sm_multiplier) ";
                        strSQL = strSQL + " from " + strCommexDB + "Exercise , " + strCommexDB + "client_master, " + strCommexDB + "series_master ";
                        strSQL = strSQL + " where ex_exchange in ('" + ExCommex.Replace("X", "").Replace(",", "','") + "')";
                        strSQL = strSQL + " and ex_exchange = sm_exchange and ex_seriesid = sm_seriesid ";
                        strSQL = strSQL + " and ex_dt between '" + FromDate + "' and '" + ToDate + "'";
                        if (strwhere != "")
                            strSQL += strwhere;

                        if (ClientType == "Remissier Wise")
                            strSQL = strSQL + " and cm_subbroker <> '' ";
                        strSQL = strSQL + " and ex_clientcd=cm_cd " + HttpContext.Current.Session["LoginAccessOld"];
                        strSQL = strSQL + " group by ex_companycode , ex_exchange , ex_clientcd ) a ";
                        strSQL = strSQL + " Group By CompanyCode , td_clientcd  ";
                        mylib.ExecSQL(strSQL, curCon);

                        strSQL = "Update #T_BrokAnalysis Set t_RemShare = A.RemShare ";
                        strSQL = strSQL + " From ( select rs_companycode + rs_exchange rs_companycode , rs_clientcd , Sum(rs_hisshare) RemShare ";
                        strSQL = strSQL + " from  " + strCommexDB + "Frevenue_sharing ,  " + strCommexDB + "client_master";
                        strSQL = strSQL + " where rs_exchange in ('" + ExCommex.Replace("X", "").Replace(",", "','") + "')";
                        strSQL = strSQL + " and rs_clientcd = cm_cd " + HttpContext.Current.Session["LoginAccessOld"];
                        if (strwhere != "")
                            strSQL += strwhere;
                        strSQL = strSQL + " group by rs_companycode + rs_exchange ,  rs_clientcd ) A ";
                        strSQL = strSQL + " Where t_companycode = A.rs_companycode and t_Clientcd =  rs_clientcd ";
                        mylib.ExecSQL(strSQL, curCon);
                    }

                    //------------------------------Second Insert End------------------------------------
                    //strSQL = "drop table #Clnts";
                    //mylib.ExecSQL(strSQL, curCon);


                    string strFieldCode = "";
                    string strFieldName = "";
                    string strFields = "";
                    string strJoin = "";
                    string StrData = "";
                    string StrData1 = "";
                    string strData2 = "";
                    string strData3 = "";
                    string strData4 = "";


                    if (ClientType == "Client Wise")
                    {
                        strFieldCode = "b.cm_cd as Code";
                        strFieldName = "b.cm_Name as Name";
                        strFields = "b.cm_cd,b.cm_Name";
                        strJoin = " and b.cm_cd = cm_cd ";
                    }
                    else if (ClientType == "Group Wise")
                    {
                        strFieldCode = "gr_cd as Code";
                        strFieldName = "gr_desc as Name";
                        strFields = "gr_cd,gr_desc";
                        strJoin = " and b.gr_cd = gr_cd ";
                    }
                    else if (ClientType == "Family Wise")
                    {
                        strFieldCode = "fm_cd as Code";
                        strFieldName = "fm_desc as Name";
                        strFields = "fm_cd,fm_desc";
                    }
                    else if (ClientType == "Branch Wise")
                    {
                        strFieldCode = "bm_branchcd as Code";
                        strFieldName = "bm_branchname as Name";
                        strFields = "bm_branchcd,bm_branchname";
                    }
                    else if (ClientType == "Remissier Wise")
                    {
                        strFieldCode = "b.cm_subBroker as Code";
                        strFieldName = "c.RM_Name as Name";
                        strFields = "b.cm_subBroker , c.RM_Name  ";
                        strJoin = " and b.cm_cd = c.RM_CD";
                    }
                    else if (ClientType == "RM Wise")
                    {
                        strFieldCode = "b.cm_dpactno as Code";
                        strFieldName = "d.rm_name as Name";
                        strFields = "b.cm_dpactno , d.rm_name ";
                    }
                    else
                    {
                        strFieldCode = "b.cm_cd as Code";
                        strFieldName = "b.cm_Name as Name";
                        strFields = "b.cm_cd,b.cm_Name";
                        strJoin = " and b.cm_cd = cm_cd ";
                    }

                    strSQL = "select CES_Cd from CompanyExchangeSegments Where CES_CompanyCd = '" + HttpContext.Current.Session["CompanyCode"] + "' and substring(CES_Cd,2,2) in ('" + Exchng.Replace(",BX", "").Replace(",", "','") + "')";

                    if (ExCommex != "")
                    {
                        var ObjCommexCon = new SqlConnection();

                        strSQL += " union all ";
                        strSQL += " select left(CES_Cd,2)+'X' CES_Cd from " + "[" + SQLConnComex.DataSource + "]" + "." + SQLConnComex.Database + ".dbo.CompanyExchangeSegments Where substring(CES_Cd,2,1) in ('" + ExCommex.Replace("X", "").Replace(",", "','") + "')";
                        //strSQL += " select left(CES_Cd,2)+'X' CES_Cd from " +  SQLConnComex.Database + ".dbo.CompanyExchangeSegments Where substring(CES_Cd,2,1) in ('" + ExCommex.Replace("X", "").Replace(",", "','") + "')";
                    }
                    DataTable dtExchSet = mylib.OpenDataTable(strSQL, curCon);
                    //DataTable dtExchSet = mylib.OpenDataTable(strSQL);

                    ArrayList ArrExchlst = new ArrayList();
                    ArrExchlst.Add("Code");
                    ArrExchlst.Add("Name");
                    ArrExchlst.Add("cm_cd");
                    ArrExchlst.Add("cm_name");

                    strSQL = "Select " + strFieldCode + ", " + strFieldName + ", " + strFields + "";

                    for (i = 0; i < dtExchSet.Rows.Count; i++)
                    {
                        strSQL = strSQL + " , Sum(Case t_companycode When '" + dtExchSet.Rows[i][0].ToString() + "' Then convert(decimal(15,0),t_Brokerage) else 0 end ) " + dtExchSet.Rows[i][0].ToString() + "t_Brokerage  , ";
                        strSQL = strSQL + " Sum(Case t_companycode When '" + dtExchSet.Rows[i][0].ToString() + "' Then convert(decimal(15,0),t_RemShare) else 0 end ) " + dtExchSet.Rows[i][0].ToString() + "t_RemShare  ";
                        ArrExchlst.Add(dtExchSet.Rows[i][0].ToString() + "t_Brokerage");
                        ArrExchlst.Add(dtExchSet.Rows[i][0].ToString() + "t_RemShare");
                    }
                    ArrExchlst.Add("t_RemShare");
                    ArrExchlst.Add("t_Brokerage");
                    strSQL = strSQL + " , convert(decimal(15,0),Sum(t_RemShare )) t_RemShare ";
                    strSQL = strSQL + " , convert(decimal(15,0),Sum(t_Brokerage)) t_Brokerage ";
                    strSQL = strSQL + " From #T_BrokAnalysis , Client_master b left outer join RM_MASTER d on b.cm_dpactno = d.RM_CD left outer join SubBrokers c on b.cm_subBroker = c.RM_CD  , Branch_master , Family_Master , Group_master ";
                    strSQL = strSQL + " Where t_clientcd = b.cm_cd and b.cm_familycd = fm_cd ";
                    strSQL = strSQL + " and b.cm_groupcd = gr_cd and b.cm_brboffcode = bm_Branchcd   ";
                    strSQL = strSQL + " group by " + strFields;
                    strSQL = strSQL + " Having  (Sum(t_RemShare ) >0 or  Sum(t_Brokerage) > 0)";
                    strSQL = strSQL + " order by " + strFields;




                    dtSum = mylib.OpenDataTable(strSQL, curCon);


                }



                //       List<BrokerageModel> Broview = new List<BrokerageModel>();
                //       for (int ie = 4; ie < dtSum.Rows.Count; ie++)
                //       {

                //           Broview = dtSum.AsEnumerable()
                //.Select(row => new BrokerageModel
                //{
                //    //Code = row.Field<string>("Code"),
                //    //Name = row.Field<string>("Name"),

                //    ////----------------BSE   	Cash      
                //    //dtSum.Columns[i].ColumnName = row.Field<decimal>(dtSum.Columns[i].ColumnName),
                //    //BSECashShare = row.Field<decimal>("ABCt_RemShare"),

                //    ////----------------NSE   	Cash           
                //    //NSECashGross = row.Field<decimal>("ANCt_Brokerage"),
                //    //NSECashShare = row.Field<decimal>("ANCt_RemShare"),

                //    ////----------------MCX   	Cash      
                //    //MCXCashGross = row.Field<decimal>("AMCt_Brokerage"),
                //    //MCXCashShare = row.Field<decimal>("AMCt_RemShare"),

                //    ////----------------BSE   	F&O        
                //    //BSEFOGross = row.Field<decimal>("ABFt_Brokerage"),
                //    //BSEFOShare = row.Field<decimal>("ABFt_RemShare"),

                //    ////----------------NSE   	F&O       
                //    //NSEFOGross = row.Field<decimal>("ANFt_Brokerage"),
                //    //NSEFOShare = row.Field<decimal>("ANFt_RemShare"),

                //    ////----------------MCX      F & O
                //    //MCXFOGross = row.Field<decimal>("AMFt_Brokerage"),
                //    //MCXFOShare = row.Field<decimal>("AMFt_RemShare"),

                //    ////----------------NSE   	FX        
                //    //NSEFXGross = row.Field<decimal>("ANKt_Brokerage"),
                //    //NSEFXShare = row.Field<decimal>("ANKt_RemShare"),

                //    ////----------------MCX   	FX        
                //    //MCXFXGross = row.Field<decimal>("AMKt_Brokerage"),
                //    //MCXFXShare = row.Field<decimal>("AMKt_RemShare")
                //}).ToList();
                //}


                return dtSum;
            }

        }

        public IEnumerable<ClientBrokMasterModel> FillClientBrok(string Code)
        {
            string strSQL;
            DataTable dtclient = new DataTable();
            LibraryModel mylib = new LibraryModel(true);
            UtilityModel myutil = new UtilityModel();
            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {
                curCon.Open();

                strSQL = "select cm_cd,cm_name,cm_email,cm_mobile,fm_cd, fm_desc,gr_cd, gr_desc ";
                strSQL = strSQL + ",bm_branchcd, bm_branchname, cm_panno";
                strSQL = strSQL + " from Client_Master, family_master, Group_master, client_details";
                strSQL = strSQL + " ,branch_master";
                strSQL = strSQL + " where ce_clientcd = cm_cd  and cm_familycd = fm_cd and cm_groupcd = gr_cd ";
                strSQL = strSQL + " and cm_brboffcode = bm_branchcd";
                strSQL = strSQL + " and cm_cd='" + Code + "' ";
                strSQL = strSQL + " and Left(ce_companycode,1) = '" + HttpContext.Current.Session["CompanyCode"] + "'";

                dtclient = mylib.OpenDataTable(strSQL, curCon);



                strSQL = "Select ce_companycode,ce_brkscheme from client_details where ce_clientcd ='" + Code + "' and Left(ce_companycode,1) = '" + HttpContext.Current.Session["CompanyCode"] + "'  and right(rtrim(ce_companycode),2)  in ('BC','BF','BK', 'NC', 'NF','NK','MC','MF','MK')";

                DataTable dtBrok = mylib.OpenDataTable(strSQL, curCon);

                dtclient.Columns.Add("ABC", typeof(String));
                dtclient.Columns.Add("ABF", typeof(String));
                dtclient.Columns.Add("ABM", typeof(String));
                dtclient.Columns.Add("AMC", typeof(String));
                dtclient.Columns.Add("AMF", typeof(String));
                dtclient.Columns.Add("AMK", typeof(String));
                dtclient.Columns.Add("ANC", typeof(String));
                dtclient.Columns.Add("ANF", typeof(String));
                dtclient.Columns.Add("ANK", typeof(String));
                for (int i = 0; i < dtclient.Rows.Count; i++)
                {
                    for (int K = 0; K < dtBrok.Rows.Count; K++)
                    {
                        if (dtBrok.Rows[K]["ce_companycode"].ToString() == "ABC")
                        { dtclient.Rows[i]["ABC"] = dtBrok.Rows[K]["ce_brkscheme"].ToString(); }

                        if (dtBrok.Rows[K]["ce_companycode"].ToString() == "ABF")
                        { dtclient.Rows[i]["ABF"] = dtBrok.Rows[K]["ce_brkscheme"].ToString(); }

                        if (dtBrok.Rows[K]["ce_companycode"].ToString() == "ABM")
                        { dtclient.Rows[i]["ABM"] = dtBrok.Rows[K]["ce_brkscheme"].ToString(); }
                        else
                        {
                            dtclient.Rows[i]["ABM"] = "NULL";
                        }

                        if (dtBrok.Rows[K]["ce_companycode"].ToString() == "AMC")
                        { dtclient.Rows[i]["AMC"] = dtBrok.Rows[K]["ce_brkscheme"].ToString(); }

                        if (dtBrok.Rows[K]["ce_companycode"].ToString() == "AMF")
                        { dtclient.Rows[i]["AMF"] = dtBrok.Rows[K]["ce_brkscheme"].ToString(); }

                        if (dtBrok.Rows[K]["ce_companycode"].ToString() == "AMK")
                        { dtclient.Rows[i]["AMK"] = dtBrok.Rows[K]["ce_brkscheme"].ToString(); }

                        if (dtBrok.Rows[K]["ce_companycode"].ToString() == "ANF")
                        { dtclient.Rows[i]["ANF"] = dtBrok.Rows[K]["ce_brkscheme"].ToString(); }

                        if (dtBrok.Rows[K]["ce_companycode"].ToString() == "ANC")
                        { dtclient.Rows[i]["ANC"] = dtBrok.Rows[K]["ce_brkscheme"].ToString(); }

                        if (dtBrok.Rows[K]["ce_companycode"].ToString() == "ANK")
                        { dtclient.Rows[i]["ANK"] = dtBrok.Rows[K]["ce_brkscheme"].ToString(); }

                    }



                }



            }

            List<ClientBrokMasterModel> ulist = new List<ClientBrokMasterModel>();


            ulist = dtclient.AsEnumerable()
            .Select(row => new ClientBrokMasterModel
            {
                ClientCd = row.Field<string>("cm_cd").Trim(),
                Panno = row.Field<string>("cm_panno").Trim(),
                Email = row.Field<string>("cm_email").Trim(),
                Mobile = row.Field<string>("cm_mobile").Trim(),

                GroupCd = row.Field<string>("gr_cd").Trim(),
                GroupName = row.Field<string>("gr_desc").Trim(),

                FamilyCd = row.Field<string>("fm_cd").Trim(),
                FamilyName = row.Field<string>("fm_desc").Trim(),

                BranchCd = row.Field<string>("bm_branchcd").Trim(),
                BranchName = row.Field<string>("bm_branchname").Trim(),

                CashBseBrk = row.Field<string>("ABC"),
                CashNSEBrok = row.Field<string>("ANC"),
                CashMCXBrok = row.Field<string>("AMC"),

                FOBseBrk = row.Field<string>("ABF"),
                FONSEBrok = row.Field<string>("ANF"),
                FOMCXBrok = row.Field<string>("AMF"),

                FXBseBrk = row.Field<string>("ABM"),
                FXNSEBrok = row.Field<string>("ANK"),
                FXMCXBrok = row.Field<string>("AMK"),
            }).ToList();

            return ulist;
        }



        public IEnumerable<JsonComboModel> FillComboBrokES(string Segment)
        {
            string strSQL = "";
            DataTable dtBrokES = new DataTable();
            LibraryModel mylib = new LibraryModel(true);
            UtilityModel myutil = new UtilityModel();
            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {
                curCon.Open();

                if (Segment == "BC")
                { strSQL = "select distinct br_scheme from brokerages where br_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "BC' order by br_scheme"; }
                if (Segment == "BF")
                { strSQL = "select distinct br_scheme from Fbrokerages where br_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "BF' order by br_scheme"; }
                if (Segment == "BK")
                { strSQL = "select distinct br_scheme from Fbrokerages where br_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "BK' order by br_scheme"; }
                if (Segment == "NC")
                { strSQL = "select distinct br_scheme from brokerages where br_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "NC' order by br_scheme"; }
                if (Segment == "NF")
                { strSQL = "select distinct br_scheme from Fbrokerages where br_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "NF' order by br_scheme"; }
                if (Segment == "NK")
                { strSQL = "select distinct br_scheme from Fbrokerages where br_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "NK' order by br_scheme"; }
                if (Segment == "MC")
                { strSQL = "select distinct br_scheme from Fbrokerages where br_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "MC' order by br_scheme"; }
                if (Segment == "MF")
                { strSQL = "select distinct br_scheme from Fbrokerages where br_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "MF' order by br_scheme"; }
                if (Segment == "MK")
                { strSQL = "select distinct br_scheme from Fbrokerages where br_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "MK' order by br_scheme"; }


                dtBrokES = mylib.OpenDataTable(strSQL, curCon);

            }


            List<JsonComboModel> ulist = new List<JsonComboModel>();


            ulist = dtBrokES.AsEnumerable()
            .Select(row => new JsonComboModel
            {
                Display = row.Field<string>("br_scheme"),
                Value = row.Field<string>("br_scheme"),


            }).ToList();
            return ulist;
        }
    }
    public class modProfitLoss : ConnectionModel
    {


        public IEnumerable<ProfitLossCashModel> GetProfitLossCash(string code, string Fromdt, string Todt)
        {
            List<ProfitLossCashModel> uList = new List<ProfitLossCashModel>();

            try
            {
                LibraryModel mylib = new LibraryModel(true);
                UtilityModel myutil = new UtilityModel();

                using (SqlConnection curCon = new SqlConnection(connectionstring))
                {
                    curCon.Open();

                    try
                    {
                        mylib.ExecSQL("Drop Table #VX", curCon);
                    }
                    catch (Exception)
                    {

                    }
                    finally
                    {
                        strSQL = @" CREATE TABLE [#VX] (
                                    [td_companycode] [char] (1) NOT NULL ,
                                    [td_stlmnt] [char] (9) NULL ,
                                    [td_clientcd] [char] (8) NULL ,
                                    [td_scripcd] [char] (6) NULL ,
                                    [td_dt] [char] (8) NOT NULL ,
                                    [td_srno] [numeric](18, 0) IDENTITY(1,1) NOT NULL ,
                                    [td_bsflag] [char] (1) NULL ,
                                    [td_bqty] [numeric](18, 0) NULL ,
                                    [td_sqty] [numeric](18, 0) NULL ,
                                    [td_rate] [money] NULL ,
                                    [td_marketrate] [money] NULL ,
                                    [td_flag] [VarChar](1) Not null, 
                                    [td_scripnm] [VarChar](12) Not null,
                                    [td_desc] [VarChar](15) null 
                                    PRIMARY KEY CLUSTERED (td_srno))";
                        mylib.ExecSQL(strSQL, curCon);
                    }

                    try
                    {
                        mylib.ExecSQL("Drop Table #invcharges", curCon);
                    }
                    catch (Exception)
                    {
                    }
                    finally
                    {
                        strSQL = @" CREATE TABLE [#invcharges] (
                                    [ic_stlmnt] [char] (9) NOT NULL ,
                                    [ic_clientcd] [char] (8) NOT NULL ,
                                    [ic_desc] [char] (20) NOT NULL ,
                                    [ic_amount] money
                                    ) ON [PRIMARY]";
                        mylib.ExecSQL(strSQL, curCon);
                    }

                    strSQL = " CREATE index #idx_invcharges_clientcd on #invcharges (ic_clientcd) ";
                    mylib.ExecSQL(strSQL, curCon);

                    string StrTRXIndex = "index(idx_trx_clientcd),";

                    strSQL = "insert into #VX SELECT " + myutil.newline() +
                            " td_companycode ,td_stlmnt ,td_clientcd ,td_scripcd," + myutil.newline() +
                            " td_dt , td_bsflag , sum(td_bqty) ,sum(td_sqty) ,sum(td_rate*(td_bqty+td_sqty)), sum(td_marketrate*(td_bqty+td_sqty)),'Y' td_flag,ss_name,''" + myutil.newline() +
                            " FROM Trx with(" + StrTRXIndex + "nolock) , securities with(nolock) where td_dt between '" + Fromdt + "' and '" + Todt + "'" + myutil.newline() +
                            " and td_cfflag = 'N' and td_clientcd = '" + code + "' and td_Scripcd = ss_cd" + myutil.newline() +
                            " group by td_companycode ,td_stlmnt ,td_clientcd ,td_scripcd, td_dt , td_bsflag,ss_name ";
                    mylib.ExecSQL(strSQL, curCon);


                    strSQL = "insert into #invcharges" + myutil.newline() +
                            " select sh_stlmnt,sh_clientcd,left(sh_desc,12),sh_amount " + myutil.newline() +
                            " from Specialcharges with (nolock),Settlements with (nolock) " + myutil.newline() +
                            " Where sh_stlmnt = se_stlmnt and se_endt between '" + Fromdt + "' and '" + Todt + "' and sh_clientcd =('" + code + "')";
                    mylib.ExecSQL(strSQL, curCon);

                    strSQL = "insert into #invcharges" + myutil.newline() +
                            " select sh_stlmnt,sh_clientcd,left('Service Tax',12),sh_servicetax " + myutil.newline() +
                            " from Specialcharges with (nolock),Settlements with (nolock) where sh_stlmnt = se_stlmnt" + myutil.newline() +
                            " and sh_servicetaxyn = 'Y' and se_endt between '" + Fromdt + "' and '" + Todt + "' " + myutil.newline() +
                            " and sh_clientcd ='" + code + "' ";
                    mylib.ExecSQL(strSQL, curCon);

                    strSQL = "Insert into  #invcharges" + myutil.newline() +
                            " select bc_stlmnt,bc_clientcd,left(cg_desc,12)," + myutil.newline() +
                            " bc_amount from Cbilled_charges with (nolock) ,Charges_master with (nolock) ,Settlements with (nolock)" + myutil.newline() +
                            " Where bc_companycode = cg_companycode And Left(bc_stlmnt, 1) = cg_exchange" + myutil.newline() +
                            " and bc_chargecode = cg_cd and bc_stlmnt = se_stlmnt " + myutil.newline() +
                            " and se_endt between '" + Fromdt + "' and '" + Todt + "' " + myutil.newline() +
                            " and bc_clientcd ='" + code + "' ";
                    mylib.ExecSQL(strSQL, curCon);

                    strSQL = "update #VX set td_rate = Case when (td_bqty+td_sqty) > 0 then td_rate/(td_bqty+td_sqty) else 0 end , td_marketrate= Case When (td_bqty+td_sqty) > 0 then td_marketrate/(td_bqty+td_sqty) else 0 end ";
                    mylib.ExecSQL(strSQL, curCon);

                    strSQL = "Create " + myutil.newline() +
                            " INDEX [VX_clientscripstlmnt] ON [dbo].[#VX]" + myutil.newline() +
                            " ([td_clientcd], [td_scripcd],[td_dt],[td_stlmnt])";
                    mylib.ExecSQL(strSQL, curCon);

                    strSQL = "update a set a.td_flag = 'N' from #VX a" + myutil.newline() +
                            " where a.td_clientcd + a.td_scripcd + a.td_stlmnt" + myutil.newline() +
                            " in(select b.td_clientcd + b.td_scripcd + b.td_stlmnt" + myutil.newline() +
                            " from #VX b where a.td_clientcd = b.td_clientcd" + myutil.newline() +
                            " and a.td_scripcd = b.td_scripcd" + myutil.newline() +
                            " and a.td_stlmnt = b.td_stlmnt" + myutil.newline() +
                            " group by td_clientcd,td_scripcd,td_stlmnt" + myutil.newline() +
                            " having sum(td_bqty) = 0 or sum(td_sqty) = 0)";
                    mylib.ExecSQL(strSQL, curCon);

                    strSQL = "SELECT td_Stlmnt,td_clientcd , td_scripcd,cm_name,td_scripnm," + myutil.newline() +
                            " sum(td_bqty) td_bqty ,sum(td_sqty) td_sqty, sum(td_bqty-td_sqty) net" + myutil.newline() +
                            " FROM #VX,Client_master with (nolock) " + myutil.newline() +
                            " where td_clientcd = cm_cd and td_flag = 'Y'" + myutil.newline() +
                            " group by td_stlmnt,td_clientcd,cm_name,td_scripcd,td_scripnm" + myutil.newline() +
                            " having sum(td_bqty - td_sqty) <> 0" + myutil.newline() +
                            " ORDER BY td_clientcd , td_scripcd  ";

                    DataSet ObjDataSet = new DataSet();
                    ObjDataSet = mylib.OpenDataSet(strSQL, curCon);
                    if (ObjDataSet.Tables[0].Rows.Count > 0)
                    {
                        string strclient = string.Empty;
                        string strscrip = string.Empty;
                        string strstlmnt = string.Empty;
                        string strDelSide = string.Empty;
                        long lngDelQty = 0;
                        long lngLoop = 0;
                        long lngCurSerial = 0;
                        long lngBalqty = 0;
                        foreach (DataRow objdatarow in ObjDataSet.Tables[0].Rows)
                        {
                            strclient = (string)objdatarow["td_Clientcd"];
                            strscrip = (string)objdatarow["td_scripcd"];
                            strstlmnt = (string)objdatarow["td_stlmnt"];
                            if (long.Parse(objdatarow["Net"].ToString()) > 0)
                            {
                                strDelSide = "B";
                            }
                            else
                            {
                                strDelSide = "S";
                            }
                            lngDelQty = System.Math.Abs(long.Parse(objdatarow["Net"].ToString()));

                            strSQL = "select * from #VX where td_clientcd = '" + strclient + "' and td_scripcd = '" + strscrip + "'" + myutil.newline() +
                                    " and td_stlmnt = '" + strstlmnt + "'" + myutil.newline() +
                                    " and td_bsflag = '" + strDelSide + "' order by td_dt desc,td_stlmnt desc";
                            DataSet ObjDataSet1 = new DataSet();
                            ObjDataSet1 = mylib.OpenDataSet(strSQL, curCon);
                            if (ObjDataSet1.Tables[0].Rows.Count > 0)
                            {
                                foreach (DataRow objdatarow1 in ObjDataSet1.Tables[0].Rows)
                                {
                                    lngLoop += 1;
                                    lngCurSerial = long.Parse(objdatarow1["td_SrNo"].ToString());
                                    if (long.Parse(objdatarow1["td_bqty"].ToString()) + long.Parse(objdatarow1["td_sqty"].ToString()) > lngDelQty)
                                    {
                                        lngBalqty = long.Parse(objdatarow1["td_bqty"].ToString()) + long.Parse(objdatarow1["td_sqty"].ToString()) - lngDelQty;
                                        strSQL = " insert into #VX select td_companycode ,td_stlmnt,td_clientcd , td_scripcd, td_dt, td_bsflag,";
                                        if (strDelSide == "B")
                                        {
                                            strSQL += lngBalqty + ", td_sqty";
                                        }
                                        else
                                        {
                                            strSQL += " td_bqty ," + lngBalqty;
                                        }
                                        strSQL += ", td_rate, td_marketrate,td_flag,td_scripnm,'' from #VX where td_srno =" + lngCurSerial;
                                        mylib.ExecSQL(strSQL, curCon);

                                        strSQL = "update #VX set td_flag = 'N' ";
                                        if (strDelSide == "B")
                                        {
                                            strSQL += ",td_bqty = ";
                                        }
                                        else
                                        {
                                            strSQL += ",td_sqty = ";
                                        }
                                        strSQL += +lngDelQty + " where td_srno = " + lngCurSerial;
                                        mylib.ExecSQL(strSQL, curCon);
                                        lngDelQty = 0;
                                    }
                                    else
                                    {
                                        strSQL = "update #VX set td_flag = 'N' where td_srno = " + lngCurSerial;
                                        mylib.ExecSQL(strSQL, curCon);
                                        lngDelQty = lngDelQty - (long.Parse(objdatarow1["td_bqty"].ToString()) + long.Parse(objdatarow1["td_Sqty"].ToString()));
                                    }

                                    if (lngDelQty <= 0)
                                    { break; }
                                }
                            }
                        }
                    }
                    ObjDataSet.Dispose();


                    strSQL = "SELECT td_clientcd , td_scripcd,cm_name,td_scripnm," + myutil.newline() +
                            " sum(td_bqty) td_bqty ,sum(td_sqty) td_sqty, sum(td_bqty-td_sqty) net" + myutil.newline() +
                            " FROM #VX,Client_master with (nolock) " + myutil.newline() +
                            " where td_clientcd = cm_cd " + myutil.newline() +
                            " group by td_clientcd,cm_name,td_scripcd,td_scripnm" + myutil.newline() +
                            " having sum(td_bqty - td_sqty) <> 0" + myutil.newline() +
                            " ORDER BY td_clientcd , td_scripcd  ";

                    DataSet ObjDataSet2 = new DataSet();
                    ObjDataSet2 = mylib.OpenDataSet(strSQL, curCon);
                    if (ObjDataSet2.Tables[0].Rows.Count > 0)
                    {
                        string strclient = string.Empty;
                        string strscrip = string.Empty;
                        string strstlmnt = string.Empty;
                        string strDelSide = string.Empty;
                        long lngDelQty = 0;
                        long lngLoop = 0;
                        long lngCurSerial = 0;
                        long lngBalqty = 0;
                        foreach (DataRow objdatarow in ObjDataSet2.Tables[0].Rows)
                        {
                            strclient = (string)objdatarow["td_Clientcd"];
                            strscrip = (string)objdatarow["td_scripcd"];
                            if (long.Parse(objdatarow["Net"].ToString()) > 0)
                            {
                                strDelSide = "B";
                            }
                            else
                            {
                                strDelSide = "S";
                            }
                            lngDelQty = System.Math.Abs(long.Parse(objdatarow["Net"].ToString()));
                            strSQL = "select * from #VX where td_clientcd = '" + strclient + "' and td_scripcd = '" + strscrip + "'" + myutil.newline() +
                                    " and td_bsflag = '" + strDelSide + "' and td_flag = 'N' order by td_dt desc,td_stlmnt desc";
                            DataSet ObjDataSet1 = new DataSet();
                            ObjDataSet1 = mylib.OpenDataSet(strSQL, curCon);
                            if (ObjDataSet1.Tables[0].Rows.Count > 0)
                            {
                                foreach (DataRow objdatarow1 in ObjDataSet1.Tables[0].Rows)
                                {
                                    lngLoop += 1;
                                    lngCurSerial = long.Parse(objdatarow1["td_SrNo"].ToString());
                                    if (long.Parse(objdatarow1["td_bqty"].ToString()) + long.Parse(objdatarow1["td_sqty"].ToString()) > lngDelQty)
                                    {
                                        lngBalqty = long.Parse(objdatarow1["td_bqty"].ToString()) + long.Parse(objdatarow1["td_sqty"].ToString()) - lngDelQty;
                                        strSQL = " insert into #VX select td_companycode ,td_stlmnt,td_clientcd , td_scripcd, td_dt, td_bsflag,";
                                        if (strDelSide == "B")
                                        {
                                            strSQL += lngBalqty + ", td_sqty";
                                        }
                                        else
                                        {
                                            strSQL += " td_bqty ," + lngBalqty;
                                        }
                                        strSQL += ", td_rate, td_marketrate,td_flag,td_scripnm,'' from #VX where td_srno =" + lngCurSerial;
                                        mylib.ExecSQL(strSQL, curCon);

                                        strSQL = "update #VX set td_flag = 'X' ";
                                        if (strDelSide == "B")
                                        {
                                            strSQL += ",td_bqty = ";
                                        }
                                        else
                                        {
                                            strSQL += ",td_sqty = ";
                                        }
                                        strSQL += +lngDelQty + " where td_srno = " + lngCurSerial;
                                        mylib.ExecSQL(strSQL, curCon);

                                        lngDelQty = 0;
                                    }
                                    else
                                    {
                                        strSQL = "update #VX set td_flag = 'X' where td_srno = " + lngCurSerial;
                                        mylib.ExecSQL(strSQL, curCon);

                                        lngDelQty = lngDelQty - (long.Parse(objdatarow1["td_bqty"].ToString()) + long.Parse(objdatarow1["td_Sqty"].ToString()));
                                    }
                                    if (lngDelQty <= 0)
                                    { break; }
                                }
                            }
                        }
                        ObjDataSet2.Dispose();
                    }

                    strSQL = "update #VX set td_desc = CAse td_flag when 'Y' then 'Square off' else 'Delivery' end ";
                    mylib.ExecSQL(strSQL, curCon);

                    strSQL = " select '1' as Ord, case td_flag When 'Y' Then 1 else 2 end td_flag,ss_Lname td_scripnm ,''td_stlmnt , sum(td_bqty) BQty, convert(decimal(15,2),sum(td_bqty*td_rate)) BAmount ,  case when SUM(td_bqty) <> 0 then convert(decimal(15,2),sum(td_bqty*td_rate)/sum(td_bqty)) else 0 end BRate,  sum(td_sqty) SQty , convert(decimal(15,2),sum(td_sqty*td_rate)) SAmount ,  case when SUM(td_sqty) <> 0 then convert(decimal(15,2),sum(td_sqty*td_rate)/sum(td_sqty)) else 0 end SRate, " + myutil.newline() +
                            " convert(decimal(15,2), sum( case When td_flag <> 'X' Then ((td_sqty-td_bqty) *td_rate) else 0 end)) RProfitLoss,  " + myutil.newline() +
                            " convert(decimal(15,2), sum( case When td_flag = 'X' Then (td_bqty-td_sqty)* ((Case Left(td_stlmnt,1) when 'N' then ss_NSERate else ss_BSERate end) - td_rate) else 0 end)) UProfitLoss,  " + myutil.newline() +
                            " convert(decimal(15,2), sum( case When td_flag = 'X' Then ((td_bqty-td_sqty)) else 0 end)) NetQty,  convert(decimal(15,2), sum( case When td_flag = 'X' Then ((td_sqty-td_bqty) * (Case Left(td_stlmnt,1) when 'N' then ss_NSERate else ss_BSERate end) ) else 0 end))  NetAmount,  " + myutil.newline() +
                            " case When sum( case when td_flag = 'X'  Then (td_bqty-td_sqty) else 0 end) <> 0 then abs(convert(decimal(15,2),sum(Case When td_flag = 'X' Then (td_sqty-td_bqty)*(Case Left(td_stlmnt,1) when 'N' then ss_NSERate else ss_BSERate end) else 0 end )/sum(td_bqty-td_sqty))) else 0 end Nrate, " + myutil.newline() +
                            " isnull(td_desc,'') td_desc,td_scripcd  " + myutil.newline() +
                            " from #VX,securities with(nolock) where td_scripcd=ss_cd " + myutil.newline() +
                            " Group by ss_Lname,case td_flag When 'Y' Then 1 else 2 end ,td_desc,td_scripcd " + myutil.newline() +
                            " Union all " + myutil.newline() +
                          " select '2' Ord,'', ic_desc,'',NULL,NULL,NULL,NULL,NULL,NULL,convert(decimal(15,2),sum(ic_amount)) * (-1),0,NULL,NULL,NULL amt ,'','' from #invcharges" + myutil.newline() +
                            " where ic_amount > 0" + myutil.newline() +
                            " Group by ic_desc " + myutil.newline() +
                            " order by Ord,ss_Lname,td_flag desc";
                    DataTable dtPLReturn = mylib.OpenDataTable(strSQL, curCon);

                    if (dtPLReturn.Rows.Count > 0)
                    {
                        string test1 = string.Empty;

                        uList = dtPLReturn.AsEnumerable()
                        .Select(row => new ProfitLossCashModel
                        {
                            Code = code,
                            Ord = row.Field<string>("Ord"),
                            ScripCd = row.Field<string>("td_scripcd"),
                            Security = row.Field<string>("td_scripnm"),
                            TradeType = row.Field<string>("td_desc"),
                            BuyQty = row.Field<decimal?>("Bqty"),
                            BuyRate = row.Field<decimal?>("BRate"),
                            BuyValue = row.Field<decimal?>("BAmount"),
                            SellQty = row.Field<decimal?>("Sqty"),
                            SellRate = row.Field<decimal?>("SRate"),
                            SellValue = row.Field<decimal?>("SAmount"),
                            NetQty = row.Field<decimal?>("NetQty"),
                            Rate = row.Field<decimal?>("NRate"),
                            Amount = row.Field<decimal?>("NetAmount"),
                            RealizedPL = row.Field<decimal>("RProfitLoss"),
                            UnRealizedPL = row.Field<decimal>("UProfitLoss")
                        }).ToList();
                    }

                    return uList;
                }
            }
            catch (Exception)
            {

                throw;
            }

        }

        public IEnumerable<ProfitLossFOModel> GetProfitLossFO(string strexchange, string strsegment, string code, string Fromdt, string Todt)
        {
            string StrTradesIndex = "";
            LibraryModel myLib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            UtilityDBModel mydbutil = new UtilityDBModel();
            List<ProfitLossFOModel> ulist = new List<ProfitLossFOModel>();
            strsegment = strsegment == "F" ? "F" : "K";

            if (Convert.ToInt16(myLib.fnFireQuery("sysobjects a, sysindexes b", "COUNT(0)", "a.id = b.id and a.name = 'trades' and b.name", "idx_trades_clientcd", false)) == 1)
            {
                StrTradesIndex = "index(idx_trades_dt_clientcd),";
            }

            string strFirstDate = string.Empty;
            string strLastDate = string.Empty;
            string strTable = "";

            try
            {
                using (SqlConnection curCon = new SqlConnection(connectionstring))
                {
                    curCon.Open();

                    DateTime strBillstDt;
                    DateTime strBillenDt;
                    string strdate = string.Empty;

                    try
                    {
                        strSQL = "Drop table #finvdates";
                        myLib.ExecSQL(strSQL, curCon);
                    }
                    catch (Exception e)
                    {
                    }
                    finally
                    {
                        strSQL = @"CREATE TABLE [dbo].[#finvdates] (
                                [bd_dt] [char] (8) NOT NULL 
                                )";
                        myLib.ExecSQL(strSQL, curCon);
                    }

                    strBillstDt = myutil.stod(Fromdt);
                    strBillenDt = myutil.stod(Todt);

                    while (strBillstDt <= strBillenDt)
                    {
                        strdate = myutil.dtos(strBillstDt.ToString("dd/MM/yyyy"));
                        strSQL = "select count(*) cnt from " + strTable + "Fholiday_master with (nolock) where hm_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'" + myutil.newline();
                        strSQL += " and hm_exchange = '" + strexchange + "'";
                        if (strTable.Trim() == "")
                        {
                            strSQL += " and hm_segment ='" + strsegment + "'";
                        }
                        strSQL += " and hm_dt = '" + strdate + "'";
                        DataTable dt = myLib.OpenDataTable(strSQL);
                        if (Convert.ToInt64(dt.Rows[0]["cnt"]) == 0)
                        {
                            myLib.ExecSQL("insert into #finvdates values('" + strdate + "')", curCon);
                        }
                        strBillstDt = strBillstDt.AddDays(1);
                    }


                    try
                    {
                        strSQL = "Drop table #tmpFinvcharges";
                        myLib.ExecSQL(strSQL, curCon);
                    }
                    catch (Exception)
                    {
                    }
                    finally
                    {
                        strSQL = @"CREATE TABLE [#tmpFinvcharges] (
                                    [bc_dt] [char] (8) NOT NULL,
                                    [bc_clientcd] [char] (8) NOT NULL,
                                    [bc_desc] [char] (40) NOT NULL,
                                    [bc_amount] [money] NOT NULL,
                                    [bc_billno] [numeric] NOT NULL
                                    )";
                        myLib.ExecSQL(strSQL, curCon);
                    }



                    try
                    {
                        strSQL = "Drop table #tmpfinvestorrep";
                        myLib.ExecSQL(strSQL, curCon);

                    }
                    catch (Exception e)
                    {
                    }
                    finally
                    {
                        strSQL = @"Create table #tmpfinvestorrep  (
                                fi_dt char(8) not null,
                                fi_clientcd char(8) not null,
                                fi_exchange char(1) not null,
                                fi_seriesid numeric not null,
                                fi_bqty numeric not null,
                                fi_bvalue money not null,
                                fi_sqty numeric not null,
                                fi_svalue money not null,
                                fi_netqty numeric not null,
                                fi_netvalue money not null,
                                fi_rate money not null,
                                fi_closeprice money not null,
                                fi_mtm money not null,
                                fi_listorder numeric not null,
                                fi_controlflag numeric not null,
                                fi_prodtype char(2) not null,
                                fi_type char(1) not null,
                                fi_balfield char(1) not null,
                                fi_multiplier money,
                                fi_segment char(1) not null)";
                        myLib.ExecSQL(strSQL, curCon);

                    }

                    strSQL = "select isnull(min(bd_dt),'" + Fromdt + "'),isNull(max(bd_dt),'" + Todt + "') from #finvdates ";
                    DataTable dtmin = myLib.OpenDataTable(strSQL, curCon);
                    strFirstDate = dtmin.Rows[0][0].ToString();
                    strLastDate = dtmin.Rows[0][1].ToString();


                    //Futures opening
                    strSQL = "Insert into #tmpfinvestorrep  " + myutil.newline() +
                            " Select '" + strFirstDate + "',td_clientcd,td_exchange," + myutil.newline() +
                            " td_seriesid,case sign(sum(td_bqty - td_sqty)) when 1 then abs(sum(td_bqty - td_sqty)) else 0 end  td_bqty," + myutil.newline() +
                            " 0," + myutil.newline() +
                            " case sign(sum(td_bqty - td_sqty)) when 1 then 0 else abs(sum(td_bqty - td_sqty)) end td_sqty,0," + myutil.newline() +
                            " 0,0,0,0 td_closeprice,0," + myutil.newline() +
                            " case sm_prodtype when 'IF' then 1 when 'CF' then 1 when 'TF' then 2 when 'RF' then 2 when 'EF' then 2 when 'IO' then 3 else 4 end td_sortlist," + myutil.newline() +
                            " 1 td_controlflag,sm_prodtype,'N','O',sm_multiplier,td_segment" + myutil.newline() +
                            " From Trades with(" + StrTradesIndex + "nolock),Series_master with (nolock),Client_master with (nolock) " + myutil.newline() +
                            " Where td_clientcd = cm_cd and td_exchange = sm_exchange and td_segment = sm_segment And td_seriesid = sm_seriesid" + myutil.newline() +
                            " and td_clientcd = '" + code + "'" + myutil.newline() +
                            " and sm_expirydt >= '" + strFirstDate + "' and  td_dt < '" + strFirstDate + "'" + myutil.newline() +
                            " and td_exchange = '" + strexchange + "' and td_segment = '" + strsegment + "' and sm_prodtype in('IF','EF','CF','RF','TF')" + myutil.newline() +
                            " and cm_type <> 'C'" + myutil.newline() +
                            " group by td_exchange,td_clientcd,td_seriesid,sm_prodtype,sm_multiplier,td_segment" + myutil.newline() +
                            " having sum(td_bqty - td_sqty) <> 0";
                    myLib.ExecSQL(strSQL, curCon);

                    //Opening for Options
                    strSQL = "insert into #tmpfinvestorrep  ";
                    strSQL += " select '" + strFirstDate + "',td_clientcd,td_exchange,";
                    strSQL += " td_seriesid, sum(case sale when 0 then buy else 0 end) td_bqty,";
                    strSQL += " 0,";
                    strSQL += " sum(case sale when 0 then 0 else sale end) td_sqty,0,";
                    strSQL += " 0,0,sum((buy+sale)*td_rate) / sum((buy+sale)),0 td_closeprice,0,";
                    strSQL += " case sm_prodtype when 'IF' then 1 when 'CF' then 1 when 'TF' then 2 when 'RF' then 2 when 'EF' then 2 when 'IO' then 3 else 4 end td_sortlist,";
                    strSQL += " 1 td_controlflag,sm_prodtype,'N','O',sm_multiplier,'X'";
                    strSQL += " From " + strTable + "vwFoutstandingpos  ";
                    strSQL += " Where sm_expirydt >= '" + strFirstDate + "' and  td_dt < '" + strFirstDate + "'";
                    strSQL += " and td_clientcd = '" + code + "'";
                    strSQL += " and td_exchange = '" + strexchange + "' and td_segment = '" + strsegment + "' and sm_prodtype in('IO','EO','CO')";
                    strSQL += " and cm_type <> 'C'";
                    strSQL += " group by td_exchange,td_clientcd,td_seriesid,sm_prodtype,sm_multiplier,td_segment";
                    strSQL += " having sum(sale - buy) <> 0 ";
                    myLib.ExecSQL(strSQL, curCon);

                    //Futures/Options running
                    strSQL = "insert into #tmpfinvestorrep  " + myutil.newline() +
                            " select td_dt,td_clientcd,td_exchange," + myutil.newline() +
                            " td_seriesid,td_bqty,0,td_sqty,0,0,0," + myutil.newline() +
                            " td_rate,0.0000 td_closeprice,0 mtm," + myutil.newline() +
                            " case sm_prodtype when 'IF' then 1 when 'CF' then 1 when 'TF' then 2 when 'RF' then 2 when 'EF' then 2 when 'IO' then 3 else 4 end td_sortlist," + myutil.newline() +
                            " 2,sm_prodtype,'N','Y',sm_multiplier,td_segment" + myutil.newline() +
                            " From Trades with(" + StrTradesIndex + "nolock) , Series_master with (nolock) ,Client_master with (nolock)" + myutil.newline() +
                            " Where td_clientcd = cm_cd and td_exchange = sm_exchange and td_segment = sm_segment and td_seriesid = sm_seriesid" + myutil.newline() +
                            " and td_clientcd = '" + code + "'" + myutil.newline() +
                            " and td_exchange = '" + strexchange + "' and td_segment = '" + strsegment + "'" + myutil.newline() +
                            " and sm_expirydt >= '" + strFirstDate + "' and td_dt between '" + strFirstDate + "' and '" + strLastDate + "'";
                    myLib.ExecSQL(strSQL, curCon);


                    //Exercise/Assignments
                    strSQL = "insert into #tmpfinvestorrep  " + myutil.newline() +
                            " select ex_dt,ex_clientcd,ex_exchange," + myutil.newline() +
                            " ex_seriesid,ex_eqty,0,ex_aqty,0,0,0," + myutil.newline() +
                            " ex_diffbrokrate,ex_settlerate,0," + myutil.newline() +
                            " case sm_prodtype when 'IF' then 1 when 'CF' then 1 when 'TF' then 2  when 'RF' then 2 when 'EF' then 2 when 'IO' then 3 else 4 end + 5 td_sortlist," + myutil.newline() +
                            " case ex_eaflag when 'E' then 3 else 4 end td_controlflag,sm_prodtype,'N','Y',sm_multiplier,ex_segment" + myutil.newline() +
                            " From Exercise with (nolock), Series_master with (nolock) ,Client_master with (nolock)" + myutil.newline() +
                            " Where ex_clientcd = cm_cd and ex_exchange = sm_exchange and ex_segment = sm_segment And ex_seriesid = sm_seriesid" + myutil.newline() +
                            " and ex_clientcd = '" + code + "'" + myutil.newline() +
                            " and ex_exchange = '" + strexchange + "' and ex_segment ='" + strsegment + "'" + myutil.newline() +
                            " and sm_expirydt >= '" + strFirstDate + "' and  ex_dt between '" + strFirstDate + "' and '" + strLastDate + "'";
                    myLib.ExecSQL(strSQL, curCon);


                    //Reverse Future Outstanding
                    strSQL = "insert into #tmpfinvestorrep  " + myutil.newline() +
                            " select '" + strLastDate + "',fi_clientcd,fi_exchange," + myutil.newline() +
                            " fi_seriesid,case sign(sum(case fi_controlflag when 1 then case fi_dt when '" + strFirstDate + "' then fi_bqty - fi_sqty else 0 end when 2 then fi_bqty - fi_sqty else fi_sqty - fi_bqty end)) when -1 then abs(sum(case fi_controlflag when 1 then case fi_dt when '" + strFirstDate + "' then fi_bqty - fi_sqty else 0 end when 2 then fi_bqty - fi_sqty else fi_sqty - fi_bqty end)) else 0 end td_bqty," + myutil.newline() +
                            " 0," + myutil.newline() +
                            " case sign(sum(case fi_controlflag when 1 then case fi_dt when '" + strFirstDate + "' then fi_bqty - fi_sqty else 0 end when 2 then fi_bqty - fi_sqty else fi_sqty - fi_bqty end)) when 1 then abs(sum(case fi_controlflag when 1 then case fi_dt when '" + strFirstDate + "' then fi_bqty - fi_sqty else 0 end when 2 then fi_bqty - fi_sqty else fi_sqty - fi_bqty end)) else 0 end td_sqty,0," + myutil.newline() +
                            " 0,0,0,0 td_closeprice,0," + myutil.newline() +
                            " case fi_prodtype when 'IF' then 1 when 'CF' then 1 when 'TF' then 2 when 'RF' then 2 when 'EF' then 2 when 'IO' then 3 else 4 end + 6 td_sortlist," + myutil.newline() +
                            " 5 td_controlflag,fi_prodtype,'R','N',sm_multiplier,fi_segment" + myutil.newline() +
                            " From #tmpfinvestorrep  ,Series_master with (nolock)" + myutil.newline() +
                            " Where fi_exchange = sm_exchange and fi_segment = sm_segment and sm_seriesid = fi_seriesid and fi_prodtype in('IF','EF','CF','RF','TF') " + myutil.newline() +
                            " and sm_expirydt <= '" + Todt + "'" + myutil.newline() +
                            " group by fi_exchange,fi_clientcd,fi_seriesid,fi_prodtype,sm_multiplier,fi_segment" + myutil.newline() +
                            " having sum(case fi_controlflag when 1 then case fi_dt when '" + strFirstDate + "' then fi_bqty - fi_sqty else 0 end when 2 then fi_bqty - fi_sqty else fi_sqty - fi_bqty end) <> 0";
                    myLib.ExecSQL(strSQL, curCon);



                    //Update Last Market Price for Options
                    strSQL = "update #tmpfinvestorrep   set fi_rate = case fi_type when 'R' then ms_lastprice else fi_rate end,fi_closeprice = ms_lastprice from #tmpfinvestorrep  ,Market_summary with (nolock)" + myutil.newline() +
                            " where ms_seriesid = fi_seriesid " + myutil.newline() +
                            " and ms_exchange = fi_exchange and ms_segment = fi_segment " + myutil.newline() +
                            " and ms_dt = (select max(ms_dt) from Market_summary with (nolock) where ms_exchange = fi_exchange and ms_segment = fi_segment " + myutil.newline() +
                            " and ms_seriesid = fi_seriesid and ms_lastprice <> 0 and ms_dt <= '" + Todt + "' )" + myutil.newline() +
                            " and fi_prodtype in('IO','EO','CO')";
                    myLib.ExecSQL(strSQL, curCon);


                    //Update Previous close and today's close prices
                    strSQL = "update #tmpfinvestorrep   set fi_closeprice =  isNull((select ms_lastprice From Market_summary with (nolock)" + myutil.newline() +
                            " Where ms_exchange = '" + strexchange + "' and ms_segment ='" + strsegment + "' and ms_seriesid = fi_seriesid " + myutil.newline() +
                            " and ms_dt = (select Max(ms_dt) From Market_Summary with (nolock)" + myutil.newline() +
                            " Where ms_exchange = '" + strexchange + "' and ms_segment ='" + strsegment + "' and ms_seriesid = fi_seriesid " + myutil.newline() +
                            " and ms_dt <='" + Todt + "')),0) " + myutil.newline() +
                            " where fi_controlflag in('1','2') and fi_prodtype in('IF','EF','CF','RF','TF') ";
                    myLib.ExecSQL(strSQL, curCon);


                    //Update close Price If Expiry Trade is Not Generated.
                    strSQL = "update #tmpfinvestorrep   set fi_rate =  ms_lastprice  , fi_closeprice = ms_lastprice " + myutil.newline() +
                            " from #tmpfinvestorrep  ,Market_summary with (nolock) , Series_master with (nolock) " + myutil.newline() +
                            " where sm_Exchange= '" + strexchange + "' and sm_segment = '" + strsegment + "' and sm_seriesid = fi_seriesid " + myutil.newline() +
                            " and sm_exchange = ms_exchange and sm_segment = ms_segment and sm_seriesid = ms_seriesid  and sm_expirydt = ms_dt " + myutil.newline() +
                            " and ms_dt < '" + Todt + "'" + myutil.newline() +
                            " and fi_prodtype in('IF','EF','CF','RF','TF') and fi_type = 'R' ";
                    myLib.ExecSQL(strSQL, curCon);



                    strSQL = "update #tmpfinvestorrep   set fi_rate = ms_prcloseprice from #tmpfinvestorrep  ,Market_summary with (nolock) " + myutil.newline() +
                            " where ms_seriesid = fi_seriesid and fi_controlflag = 1" + myutil.newline() +
                            " and ms_exchange = '" + strexchange + "' and ms_segment ='" + strsegment + "'" + myutil.newline() +
                            " and ms_dt = fi_dt" + myutil.newline() +
                            " and fi_prodtype in('IF','EF','CF','RF','TF')";
                    myLib.ExecSQL(strSQL, curCon);

                    //End of updation of close prices

                    //Service tax here for Trades
                    strSQL = "insert into #tmpFinvcharges select td_dt,td_clientcd,'SERVICE TAX',round(sum(td_servicetax),2),0 from Trades with(" + StrTradesIndex + "nolock) ,#finvdates,Client_master with (nolock),Series_master with (nolock) " + myutil.newline() +
                            " where td_clientcd = cm_cd and td_dt = bd_dt" + myutil.newline() +
                            " and td_exchange = sm_exchange and td_segment = sm_segment " + myutil.newline() +
                            " and td_seriesid = sm_seriesid" + myutil.newline() +
                            " and td_exchange = '" + strexchange + "' and td_segment = '" + strsegment + "'" + myutil.newline() +
                            " and td_clientcd = '" + code + "'" + myutil.newline() +
                            " group by td_dt,td_clientcd having sum(td_servicetax) <> 0";
                    myLib.ExecSQL(strSQL, curCon);



                    //Service tax here for Exercise
                    strSQL = "insert into #tmpFinvcharges select ex_dt,ex_clientcd,'SERVICE TAX',round(sum(ex_servicetax),2),0 from Exercise with (nolock),#finvdates,Client_master with (nolock),Series_master with (nolock)" + myutil.newline() +
                            " where ex_clientcd = cm_cd and ex_dt = bd_dt" + myutil.newline() +
                            " and ex_exchange = sm_exchange and ex_segment = sm_segment " + myutil.newline() +
                            " and ex_seriesid = sm_seriesid" + myutil.newline() +
                            " and ex_clientcd = '" + code + "'" + myutil.newline() +
                            " and ex_exchange = '" + strexchange + "' and ex_segment ='" + strsegment + "'" + myutil.newline() +
                            " group by ex_dt,ex_clientcd having sum(ex_servicetax) <> 0";
                    myLib.ExecSQL(strSQL, curCon);



                    //Charges here
                    //-----------from specialcharges start
                    strSQL = "insert into #tmpFinvcharges select fc_dt,fc_clientcd,fc_desc,round(sum(fc_amount),2),0 from Fspecialcharges with (nolock),#finvdates,Client_master with (nolock)" + myutil.newline() +
                            " where fc_clientcd = cm_cd and fc_dt = bd_dt and fc_desc not like '%Exposure Margin%'" + myutil.newline() +
                            " and fc_clientcd = '" + code + "'" + myutil.newline() +
                            " and fc_desc not like '%{New%' and fc_exchange='" + strexchange + "' and fc_segment='" + strsegment + "' and fc_desc not like '%{Old%'" + myutil.newline() +
                            " and fc_chargecode not in ('EMR') " + myutil.newline() +
                            " group by fc_dt,fc_clientcd,fc_desc having round(sum(fc_amount),2) <> 0";
                    myLib.ExecSQL(strSQL, curCon);


                    strSQL = "insert into #tmpFinvcharges select fc_dt,fc_clientcd,'SERVICE TAX',round(sum(fc_servicetax),2),0 from Fspecialcharges with (nolock),#finvdates,Client_master with (nolock) " + myutil.newline() +
                            " where fc_exchange='" + strexchange + "' and fc_segment='" + strsegment + "' and fc_clientcd = cm_cd and fc_dt = bd_dt" + myutil.newline() +
                            " and fc_clientcd = '" + code + "' and fc_desc not like '%Exposure Margin%'" + myutil.newline() +
                            " group by fc_dt,fc_clientcd,fc_desc having round(sum(fc_servicetax),2) <> 0";
                    myLib.ExecSQL(strSQL, curCon);
                    //-----------from specialcharges end


                    //---------------Update values for MTM and Premium
                    strSQL = "update #tmpfinvestorrep   set fi_bvalue = fi_bqty*fi_rate*fi_multiplier,fi_svalue = fi_sqty*fi_rate*fi_multiplier," + myutil.newline() +
                            "fi_netqty = fi_bqty - fi_sqty,fi_netvalue = (fi_bqty - fi_sqty)*fi_rate*fi_multiplier" + myutil.newline() +
                            " where fi_controlflag not in(3,4)";
                    myLib.ExecSQL(strSQL, curCon);

                    strSQL = "update #tmpfinvestorrep   set fi_bvalue = fi_bqty*fi_rate*fi_multiplier,fi_svalue = fi_sqty*fi_rate*fi_multiplier," + myutil.newline() +
                            "fi_netqty = fi_sqty - fi_bqty,fi_netvalue = (fi_bqty + fi_sqty)*fi_rate*fi_multiplier" + myutil.newline() +
                            " where fi_controlflag in(3,4)";
                    myLib.ExecSQL(strSQL, curCon);

                    strSQL = "update #tmpfinvestorrep   set fi_mtm = round((((fi_sqty - fi_bqty)*fi_rate*fi_multiplier) - ((fi_sqty - fi_bqty)*fi_closeprice*fi_multiplier)),4)" + myutil.newline() +
                            " where fi_prodtype in('IF','EF','CF','RF','TF')";
                    myLib.ExecSQL(strSQL, curCon);

                    strSQL = "update #tmpfinvestorrep   set fi_mtm = round(((case fi_controlflag when 3  then (fi_bqty + fi_sqty) when 4 then (fi_bqty + fi_sqty) else (fi_bqty - fi_sqty)*(-1) end) *fi_rate*fi_multiplier),4)" + myutil.newline() +
                            " where fi_prodtype in('IO','EO','CO')";
                    myLib.ExecSQL(strSQL, curCon);


                    //strSQL = "Select Convert(char(12), sm_seriesid) sm_seriesid,sm_symbol,sm_desc, " + myutil.newline();
                    //strSQL += " case sm_prodtype when 'IF' then 1 when 'CF' then 1 when 'TF' then 2 when 'RF' then 2 when 'EF' then 2 when 'IO' then 3 else 4 end listorder," + myutil.newline();
                    //strSQL += " isNUll(convert(decimal(15,0), sum(case fi_balfield when 'O' then fi_bqty - fi_sqty else 0 end)) ,0) BF," + myutil.newline();
                    //strSQL += " isNUll(convert(decimal(15,0), sum(case fi_type when 'N' then case fi_controlflag when 2 then fi_bqty else 0 end else 0 end)) ,0) buyqty," + myutil.newline();
                    //strSQL += " isNUll(convert(decimal(15,0), sum(case fi_type when 'N' then case fi_controlflag when 2 then fi_sqty else 0 end else 0 end)) ,0) sellqty," + myutil.newline();
                    //strSQL += " isNUll(convert(decimal(15,0), sum(case fi_type when 'N' then case fi_controlflag when 3 then abs(fi_bqty) else 0 end else 0 end)) ,0) exerqty," + myutil.newline();
                    //strSQL += " isNUll(convert(decimal(15,0), sum(case fi_type when 'N' then case fi_controlflag when 4 then abs(fi_sqty) else 0 end else 0 end)) ,0) assgnqty," + myutil.newline();
                    //strSQL += " isNUll(convert(decimal(15,0), sum(case when sm_expirydt <= '" + Todt + "' then 0 else case fi_balfield when 'N' then  0 else (fi_bqty)*case fi_controlflag when 3 then -1 else 1 end  - (fi_sqty)*case fi_controlflag when 4 then -1 else 1 end end end)) ,0) outqty," + myutil.newline();
                    //strSQL += " isNUll(convert(decimal(15,0), sum(case fi_type when 'R' then  fi_sqty - fi_bqty else 0 end)) ,0) closeqty," + myutil.newline();
                    //strSQL += " isNUll(convert(decimal(15,2), sum(fi_mtm)),0) mtm" + myutil.newline();
                    //strSQL += " from #tmpfinvestorrep   a,Client_master with (nolock) ," + strTable + "Series_master with (nolock)" + myutil.newline();
                    //strSQL += " where fi_clientcd = cm_cd and fi_exchange = sm_exchange " + myutil.newline();
                    //if (strTable == "")
                    //{
                    //    strSQL += " and fi_segment = sm_segment " + myutil.newline();
                    //}
                    //strSQL += " and fi_seriesid = sm_seriesid " + myutil.newline();
                    //strSQL += " group by fi_clientcd,fi_seriesid,cm_name,sm_seriesid,sm_prodtype,sm_symbol,sm_sname,sm_desc" + myutil.newline();
                    //strSQL += "  Union all " + myutil.newline();
                    //strSQL += "select '','',bc_desc,'5',0,0,0,0,0,0,0,isnull(convert(decimal(15,2),sum(bc_amount*(-1))),0)  chrg from #tmpFinvcharges" + myutil.newline();
                    //strSQL += " where bc_clientcd = '" + code + "'" + myutil.newline();
                    //strSQL += " group by bc_desc " + myutil.newline();
                    //strSQL += " Having sum(bc_amount*(-1)) <> 0 " + myutil.newline();
                    //strSQL += " order by listorder,sm_symbol";

                    strSQL = " select Convert(char(12), sm_seriesid) sm_seriesid,sm_symbol,sm_desc, ";
                    strSQL += " case sm_prodtype when 'IF' then 1 when 'CF' then 1 when 'TF' then 2 when 'RF' then 2 when 'EF' then 2 when 'IO' then 3 else 4 end listorder,";
                    strSQL += " sum(case fi_balfield when 'O' then fi_bqty - fi_sqty else 0 end) BF,";
                    strSQL += " sum(case fi_type when 'N' then case fi_controlflag when 2 then fi_bqty else 0 end else 0 end) buyqty,";
                    strSQL += " sum(case fi_type when 'N' then case fi_controlflag when 2 then fi_sqty else 0 end else 0 end) sellqty,";
                    strSQL += " sum(case fi_type when 'N' then case fi_controlflag when 3 then abs(fi_bqty) else 0 end else 0 end) exerqty,";
                    strSQL += " sum(case fi_type when 'N' then case fi_controlflag when 4 then abs(fi_sqty) else 0 end else 0 end) assgnqty,";
                    strSQL += " sum(case when sm_expirydt <= '" + Todt + "' then 0 else case fi_balfield when 'N' then  0 else (fi_bqty)*case fi_controlflag when 3 then -1 else 1 end  - (fi_sqty)*case fi_controlflag when 4 then -1 else 1 end end end) outqty,";
                    strSQL += " sum(case fi_type when 'R' then  fi_sqty - fi_bqty else 0 end) closeqty,";
                    strSQL += " convert(decimal(15,2), sum(fi_mtm)) mtm,";
                    strSQL += " convert(decimal(15,2),sum(case fi_type when 'N' then case fi_controlflag when 2 then fi_bvalue else 0 end else 0 end)) buyvalue,";
                    strSQL += " convert(decimal(15,2),sum(case fi_type when 'N' then case fi_controlflag when 2 then fi_svalue else 0 end else 0 end)) sellvalue,";
                    strSQL += " convert(decimal(15,2),case when (sum(case fi_type when 'N' then case fi_controlflag when 2 then fi_bqty else 0 end else 0 end) >0) then ((sum(fi_bvalue)/sum(fi_bqty))/ fi_multiplier) else 0 end) Brate, ";
                    strSQL += " convert(decimal(15,2),case when (sum(case fi_type when 'N' then case fi_controlflag when 2 then fi_sqty else 0 end else 0 end) >0) then ((sum(fi_svalue) /sum(fi_sqty ))/ fi_multiplier) else 0 end) Srate ";
                    strSQL += " ,convert(decimal(15,2),case when (sum(case when sm_expirydt <= '" + Todt + "' then 0 else case fi_balfield when 'N' then  0 else (fi_bqty)*case fi_controlflag when 3 then -1 else 1 end  - (fi_sqty)*case fi_controlflag when 4 then -1 else 1 end end end) >0 and fi_multiplier > 0) then ((sum(fi_netvalue) /sum(case when sm_expirydt <= '" + Todt + "' then 0 else case fi_balfield when 'N' then  0 else (fi_bqty)*case fi_controlflag when 3 then -1 else 1 end  - (fi_sqty)*case fi_controlflag when 4 then -1 else 1 end end end)) / fi_multiplier) else 0 end) outRate ";
                    strSQL += " from #tmpfinvestorrep   a,Client_master with (nolock) ," + strTable + "Series_master with (nolock)";
                    strSQL += " where fi_clientcd = cm_cd and fi_exchange = sm_exchange ";
                    if (strTable == "")
                    {
                        strSQL += " and fi_segment = sm_segment ";
                    }
                    strSQL += " and fi_seriesid = sm_seriesid ";
                    strSQL += " group by fi_clientcd,fi_seriesid,cm_name,sm_seriesid,sm_prodtype,sm_symbol,sm_sname,sm_desc,fi_multiplier";
                    strSQL += "  Union all ";
                    strSQL += "select '','',bc_desc,'5',0,0,0,0,0,0,0,convert(decimal(15,2),sum(bc_amount*(-1)))  chrg,0,0,0,0,0 from #tmpFinvcharges";
                    strSQL += " where bc_clientcd = '" + code + "'";
                    strSQL += " group by bc_desc ";
                    strSQL += " Having sum(bc_amount*(-1)) <> 0 ";
                    strSQL += " order by listorder,sm_symbol";

                    DataTable dtPL = myLib.OpenDataTable(strSQL, curCon);
                    ulist = dtPL.AsEnumerable()
                    .Select(row => new ProfitLossFOModel
                    {
                        Desc = row.Field<string>("sm_desc").Trim(),
                        BFQTY = row.Field<decimal?>("BF"),
                        BuyQTY = row.Field<decimal?>("buyqty"),
                        SellQTY = row.Field<decimal?>("sellqty"),
                        BuyRate = row.Field<decimal?>("Brate"),
                        SellRate = row.Field<decimal?>("srate"),
                        BuyValue = row.Field<decimal?>("buyvalue"),
                        SellValue = row.Field<decimal?>("sellvalue"),
                        outRate = row.Field<decimal?>("outRate"),
                        Exercise = row.Field<decimal?>("exerqty"),
                        Assignment = row.Field<decimal?>("assgnqty"),
                        OutQty = row.Field<decimal?>("outqty"),
                        CloseOut = row.Field<decimal?>("closeqty"),
                        MTMPremium = row.Field<decimal>("mtm")
                    }).ToList();
                    return ulist;

                }
            }
            catch (Exception ex)
            {

                string strerror = ex.Message;
                throw;
            }
        }

        public DataTable GetProfitLossCommodity(string strexchange, string strsegment, string code, string Fromdt, string Todt)
        {
            List<ProfitLossCashModel> uList = new List<ProfitLossCashModel>();

            LibraryModel mylib = new LibraryModel(true);
            UtilityModel myutil = new UtilityModel();
            UtilityDBModel myutildb = new UtilityDBModel();

            string strsql = "";
            string strTable = string.Empty;
            string strCommexDB = "";
            string strstrexchange = Strings.Left(strexchange, 1);
            if (strexchange.Trim() == "NCDEX")
            {
                strstrexchange = (mylib.fnGetSysParamComm("CHGNCDEXCD", "Commex") == "Y" ? "F" : "N");
            }

            strsegment = "";
            strTable = "";

            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {
                curCon.Open();

                SqlConnection StrCommexConn = null;

                if (ConfigurationManager.AppSettings["Commex"] != null || ConfigurationManager.AppSettings["Commex"] != string.Empty)
                {
                    StrCommexConn = myutildb.commexTemp_conn("Commex");
                    strCommexDB = "[" + StrCommexConn.Database + "]" + ".dbo";

                    strTable = strCommexDB + ".";
                }

                if (Convert.ToString(HttpContext.Current.Session["IsTplusCommex"]) == "Y" && (strexchange == "NSE" || strexchange == "BSE"))
                {
                    strsegment = "X";
                    strTable = "";
                }
                //---------------------------- create first table------------------
                strexchange = strstrexchange;
                DateTime strBillstDt;
                DateTime strBillenDt;
                string strdate = string.Empty;

                try
                {
                    strsql = "CREATE TABLE [dbo].[#finvdates] (";
                    strsql += "[bd_dt] [char] (8) NOT NULL ";
                    strsql += ")";
                    mylib.ExecSQL(strsql, curCon);

                    strsql = "Create table #tmpfinvestorrep  (";
                    strsql += " fi_dt char(8) not null,";
                    strsql += " fi_clientcd char(8) not null,";
                    strsql += " fi_exchange char(1) not null,";
                    strsql += " fi_seriesid numeric not null,";
                    strsql += " fi_bqty numeric not null,";
                    strsql += " fi_bvalue money not null,";
                    strsql += " fi_sqty numeric not null,";
                    strsql += " fi_svalue money not null,";
                    strsql += " fi_netqty numeric not null,";
                    strsql += " fi_netvalue money not null,";
                    strsql += " fi_rate money not null,";
                    strsql += " fi_closeprice money not null,";
                    strsql += " fi_mtm money not null,";
                    strsql += " fi_listorder numeric not null,";
                    strsql += " fi_controlflag numeric not null,";
                    strsql += " fi_prodtype char(2) not null,";
                    strsql += " fi_type char(1) not null,";
                    strsql += " fi_balfield char(1) not null,";
                    strsql += " fi_multiplier money,";
                    strsql += " fi_segment char(1) not null)";
                    mylib.ExecSQL(strsql, curCon);

                    strsql = "CREATE TABLE [dbo].[#tmpFinvcharges] (";
                    strsql += "[bc_dt] [char] (8) NOT NULL,";
                    strsql += "[bc_clientcd] [char] (8) NOT NULL,";
                    strsql += "[bc_desc] [char] (40) NOT NULL,";
                    strsql += "[bc_amount] [money] NOT NULL,";
                    strsql += "[bc_billno] [numeric] NOT NULL";
                    strsql += ")";
                    mylib.ExecSQL(strsql, curCon);

                }
                catch (Exception e)
                {
                    strsql = "Drop table #finvdates";
                    mylib.ExecSQL(strsql, curCon);

                    strsql = "CREATE TABLE [dbo].[#finvdates] (";
                    strsql += "[bd_dt] [char] (8) NOT NULL ";
                    strsql += ")";
                    mylib.ExecSQL(strsql, curCon);

                    strsql = "Drop table #tmpfinvestorrep  ";
                    mylib.ExecSQL(strsql, curCon);


                    strsql = "Create table #tmpfinvestorrep  (";
                    strsql += " fi_dt char(8) not null,";
                    strsql += " fi_clientcd char(8) not null,";
                    strsql += " fi_exchange char(1) not null,";
                    strsql += " fi_seriesid numeric not null,";
                    strsql += " fi_bqty numeric not null,";
                    strsql += " fi_bvalue money not null,";
                    strsql += " fi_sqty numeric not null,";
                    strsql += " fi_svalue money not null,";
                    strsql += " fi_netqty numeric not null,";
                    strsql += " fi_netvalue money not null,";
                    strsql += " fi_rate money not null,";
                    strsql += " fi_closeprice money not null,";
                    strsql += " fi_mtm money not null,";
                    strsql += " fi_listorder numeric not null,";
                    strsql += " fi_controlflag numeric not null,";
                    strsql += " fi_prodtype char(2) not null,";
                    strsql += " fi_type char(1) not null,";
                    strsql += " fi_balfield char(1) not null,";
                    strsql += " fi_multiplier money,";
                    strsql += " fi_segment char(1) not null)";
                    mylib.ExecSQL(strsql, curCon);

                    strsql = "Drop table #tmpFinvcharges";
                    mylib.ExecSQL(strsql, curCon);

                    strsql = "CREATE TABLE [dbo].[#tmpFinvcharges] (";
                    strsql += "[bc_dt] [char] (8) NOT NULL,";
                    strsql += "[bc_clientcd] [char] (8) NOT NULL,";
                    strsql += "[bc_desc] [char] (40) NOT NULL,";
                    strsql += "[bc_amount] [money] NOT NULL,";
                    strsql += "[bc_billno] [numeric] NOT NULL";
                    strsql += ")";
                    mylib.ExecSQL(strsql, curCon);
                }
                DataSet ObjDatasetH = new DataSet();
                //strBillstDt = myutil.stod(myutil.dtos(Fromdt.ToString()));
                strBillstDt = myutil.stod(Fromdt);
                strBillenDt = myutil.stod(Todt);
                while (strBillstDt <= strBillenDt)
                {
                    strdate = myutil.dtos(strBillstDt.ToString("dd/MM/yyyy"));
                    strsql = "select count(*) cnt from " + strTable + "Fholiday_master with (nolock) where hm_companycode = '" + Convert.ToString(HttpContext.Current.Session["CompanyCode"]) + "'";
                    strsql += " and hm_exchange = '" + strexchange + "'";
                    if (strTable.Trim() == "")
                    {
                        strsql += " and hm_segment ='" + strsegment + "'";
                    }
                    strsql += " and hm_dt = '" + strdate + "'";
                    //DataSet ObjDatasetH = new DataSet();
                    //SqlDataAdapter ObjAdapter = new SqlDataAdapter(strsql, ObjConnection);
                    //ObjAdapter.Fill(ObjDatasetH);
                    ObjDatasetH = mylib.OpenDataSet(strsql, curCon);
                    if (Convert.ToInt64(ObjDatasetH.Tables[0].Rows[0]["cnt"]) == 0)
                    {
                        mylib.ExecSQL("insert into #finvdates values('" + strdate + "')", curCon);
                    }
                    strBillstDt = strBillstDt.AddDays(1);

                    //---------------------------- end first table------------------

                }


                strsql = "select isnull(min(bd_dt),'" + Fromdt + "'),isNull(max(bd_dt),'') from #finvdates ";

                //SqlDataAdapter ObjAdapter = new SqlDataAdapter(strsql, ObjConnection);
                //ObjAdapter.Fill(ObjDatasetH);
                ObjDatasetH = mylib.OpenDataSet(strsql, curCon);

                Fromdt = ObjDatasetH.Tables[0].Rows[0][0].ToString();
                Todt = ObjDatasetH.Tables[0].Rows[0][1].ToString();

                //string ExCommex = "";
                //string Exchng = "";
                //string[] strArray = strexchange.Split(',');
                //bool first = true;
                //foreach (string obj in strArray)
                //{
                //    if (obj.Length >= 2)
                //    {
                //        if (first)
                //        {
                //            Exchng = obj;
                //            first = false;
                //        }
                //        else
                //        {
                //            Exchng = obj + "," + Exchng;
                //        }
                //    }

                //    //your insert query
                //}
                //bool Cofirst = true;
                //foreach (string obj in strArray)
                //{
                //    if (obj.Length < 2)
                //    {
                //        if (Cofirst)
                //        {
                //            ExCommex = obj;
                //            Cofirst = false;
                //        }
                //        else
                //        {
                //            ExCommex = obj + "," + ExCommex;
                //        }
                //    }

                //    //your insert query
                //}

                strCommexDB = "[" + StrCommexConn.Database + "]" + ".dbo";



                string StrComTradesIndex = string.Empty;

                if (Convert.ToInt16(mylib.fnFireQuery(strCommexDB + ".sysobjects a, " + strCommexDB + ".sysindexes b", "COUNT(0)", "a.id = b.id and a.name = 'trades' and b.name", "idx_trades_clientcd", true, curCon)) == 1)
                { StrComTradesIndex = "index(idx_trades_clientcd),"; }
                //string strsql = "";
                //string strTable = string.Empty;
                //string strCommexDB = "";
                //strexchange = Strings.Left(strexchange, 1);

                //List<ProfitLossCashModel> uList = new List<ProfitLossCashModel>();

                //LibraryModel mylib = new LibraryModel(true);
                //UtilityModel myutil = new UtilityModel();
                //UtilityDBModel myutildb = new UtilityDBModel();

                //using (SqlConnection curCon = new SqlConnection(connectionstring))
                //{
                //    curCon.Open();

                //    SqlConnection StrCommexConn = null;

                //    if (ConfigurationManager.AppSettings["Commex"] != null || ConfigurationManager.AppSettings["Commex"] != string.Empty)
                //    {
                //        StrCommexConn = myutildb.commexTemp_conn("Commex");
                //        strCommexDB = "[" + StrCommexConn.Database + "]" + ".dbo";

                //        strTable = strCommexDB + ".";
                //    }
                //    //if (Convert.ToString(Application["IsTplusCommex"]) == "Y" && (strexchange == "NSE" || strexchange == "BSE"))
                //    //{
                //    //    strsegment = "X";
                //    //    strTable = "";
                //    //}
                //    //---------------------------- create first table------------------

                //    DateTime strBillstDt;
                //    DateTime strBillenDt;
                //    string strdate = string.Empty;

                //    try
                //    {
                //        strsql = "CREATE TABLE [dbo].[#finvdates] (";
                //        strsql += "[bd_dt] [char] (8) NOT NULL ";
                //        strsql += ")";
                //        mylib.ExecSQL(strsql, curCon);

                //        strsql = "Create table #tmpfinvestorrep  (";
                //        strsql += " fi_dt char(8) not null,";
                //        strsql += " fi_clientcd char(8) not null,";
                //        strsql += " fi_exchange char(1) not null,";
                //        strsql += " fi_seriesid numeric not null,";
                //        strsql += " fi_bqty numeric not null,";
                //        strsql += " fi_bvalue money not null,";
                //        strsql += " fi_sqty numeric not null,";
                //        strsql += " fi_svalue money not null,";
                //        strsql += " fi_netqty numeric not null,";
                //        strsql += " fi_netvalue money not null,";
                //        strsql += " fi_rate money not null,";
                //        strsql += " fi_closeprice money not null,";
                //        strsql += " fi_mtm money not null,";
                //        strsql += " fi_listorder numeric not null,";
                //        strsql += " fi_controlflag numeric not null,";
                //        strsql += " fi_prodtype char(2) not null,";
                //        strsql += " fi_type char(1) not null,";
                //        strsql += " fi_balfield char(1) not null,";
                //        strsql += " fi_multiplier money,";
                //        strsql += " fi_segment char(1) not null)";
                //        mylib.ExecSQL(strsql, curCon);

                //        strsql = "CREATE TABLE [dbo].[#tmpFinvcharges] (";
                //        strsql += "[bc_dt] [char] (8) NOT NULL,";
                //        strsql += "[bc_clientcd] [char] (8) NOT NULL,";
                //        strsql += "[bc_desc] [char] (40) NOT NULL,";
                //        strsql += "[bc_amount] [money] NOT NULL,";
                //        strsql += "[bc_billno] [numeric] NOT NULL";
                //        strsql += ")";
                //        mylib.ExecSQL(strsql, curCon);

                //    }
                //    catch (Exception e)
                //    {
                //        strsql = "Drop table #finvdates";
                //        mylib.ExecSQL(strsql, curCon);

                //        strsql = "CREATE TABLE [dbo].[#finvdates] (";
                //        strsql += "[bd_dt] [char] (8) NOT NULL ";
                //        strsql += ")";
                //        mylib.ExecSQL(strsql, curCon);

                //        strsql = "Drop table #tmpfinvestorrep  ";
                //        mylib.ExecSQL(strsql, curCon);


                //        strsql = "Create table #tmpfinvestorrep  (";
                //        strsql += " fi_dt char(8) not null,";
                //        strsql += " fi_clientcd char(8) not null,";
                //        strsql += " fi_exchange char(1) not null,";
                //        strsql += " fi_seriesid numeric not null,";
                //        strsql += " fi_bqty numeric not null,";
                //        strsql += " fi_bvalue money not null,";
                //        strsql += " fi_sqty numeric not null,";
                //        strsql += " fi_svalue money not null,";
                //        strsql += " fi_netqty numeric not null,";
                //        strsql += " fi_netvalue money not null,";
                //        strsql += " fi_rate money not null,";
                //        strsql += " fi_closeprice money not null,";
                //        strsql += " fi_mtm money not null,";
                //        strsql += " fi_listorder numeric not null,";
                //        strsql += " fi_controlflag numeric not null,";
                //        strsql += " fi_prodtype char(2) not null,";
                //        strsql += " fi_type char(1) not null,";
                //        strsql += " fi_balfield char(1) not null,";
                //        strsql += " fi_multiplier money,";
                //        strsql += " fi_segment char(1) not null)";
                //        mylib.ExecSQL(strsql, curCon);

                //        strsql = "Drop table #tmpFinvcharges";
                //        mylib.ExecSQL(strsql, curCon);

                //        strsql = "CREATE TABLE [dbo].[#tmpFinvcharges] (";
                //        strsql += "[bc_dt] [char] (8) NOT NULL,";
                //        strsql += "[bc_clientcd] [char] (8) NOT NULL,";
                //        strsql += "[bc_desc] [char] (40) NOT NULL,";
                //        strsql += "[bc_amount] [money] NOT NULL,";
                //        strsql += "[bc_billno] [numeric] NOT NULL";
                //        strsql += ")";
                //        mylib.ExecSQL(strsql, curCon);
                //    }

                //    //strBillstDt = myutil.stod(myutil.dtos(Fromdt.ToString()));
                //    strBillstDt = myutil.stod(Fromdt);
                //    strBillenDt = myutil.stod(Todt);
                //    while (strBillstDt <= strBillenDt)
                //    {
                //        strdate = myutil.dtos(strBillstDt.ToString("dd/MM/yyyy"));
                //        strsql = "select count(*) cnt from " + strTable + "Fholiday_master with (nolock) where hm_companycode = '" + Convert.ToString(HttpContext.Current.Session["CompanyCode"]) + "'";
                //        strsql += " and hm_exchange = '" + strexchange + "'";
                //        if (strTable.Trim() == "")
                //        {
                //            strsql += " and hm_segment ='" + strsegment + "'";
                //        }
                //        strsql += " and hm_dt = '" + strdate + "'";
                //        DataSet ObjDatasetH = new DataSet();
                //        //SqlDataAdapter ObjAdapter = new SqlDataAdapter(strsql, ObjConnection);
                //        //ObjAdapter.Fill(ObjDatasetH);
                //        ObjDatasetH = mylib.OpenDataSet(strsql, curCon);
                //        if (Convert.ToInt64(ObjDatasetH.Tables[0].Rows[0]["cnt"]) == 0)
                //        {
                //            mylib.ExecSQL("insert into #finvdates values('" + strdate + "')", curCon);
                //        }
                //        strBillstDt = strBillstDt.AddDays(1);

                //        //---------------------------- end first table------------------

                //        strsql = "select isnull(min(bd_dt),'" + Fromdt + "'),isNull(max(bd_dt),'') from #finvdates ";
                //        //DataSet ObjDatasetH = new DataSet();
                //        //SqlDataAdapter ObjAdapter = new SqlDataAdapter(strsql, ObjConnection);
                //        //ObjAdapter.Fill(ObjDatasetH);
                //        ObjDatasetH = mylib.OpenDataSet(strsql, curCon);

                //        Fromdt = ObjDatasetH.Tables[0].Rows[0][0].ToString();
                //        Todt = ObjDatasetH.Tables[0].Rows[0][1].ToString();
                //    }



                //    string ExCommex = "";
                //    string Exchng = "";
                //    string[] strArray = strexchange.Split(',');
                //    bool first = true;
                //    foreach (string obj in strArray)
                //    {
                //        if (obj.Length >= 2)
                //        {
                //            if (first)
                //            {
                //                Exchng = obj;
                //                first = false;
                //            }
                //            else
                //            {
                //                Exchng = obj + "," + Exchng;
                //            }
                //        }

                //        //your insert query
                //    }
                //    bool Cofirst = true;
                //    foreach (string obj in strArray)
                //    {
                //        if (obj.Length < 2)
                //        {
                //            if (Cofirst)
                //            {
                //                ExCommex = obj;
                //                Cofirst = false;
                //            }
                //            else
                //            {
                //                ExCommex = obj + "," + ExCommex;
                //            }
                //        }

                //        //your insert query
                //    }

                //    strCommexDB = "[" + StrCommexConn.Database + "]" + ".dbo";



                //    string StrComTradesIndex = string.Empty;

                //    if (Convert.ToInt16(mylib.fnFireQuery(strCommexDB + ".sysobjects a, " + strCommexDB + ".sysindexes b", "COUNT(0)", "a.id = b.id and a.name = 'trades' and b.name", "idx_trades_clientcd", true, curCon)) == 1)
                //    { StrComTradesIndex = "index(idx_trades_clientcd),"; }

                //Futures opening
                strsql = "Insert into #tmpfinvestorrep  ";
                strsql += " Select '" + Fromdt + "',td_clientcd,td_exchange,";
                strsql += " td_seriesid,case sign(sum(td_bqty - td_sqty)) when 1 then abs(sum(td_bqty - td_sqty)) else 0 end  td_bqty,0,";
                strsql += " case sign(sum(td_bqty - td_sqty)) when 1 then 0 else abs(sum(td_bqty - td_sqty)) end td_sqty,0,0,0,0,0 td_closeprice,0,";
                strsql += " case sm_prodtype when 'IF' then 1 when 'CF' then 1 when 'TF' then 2 when 'RF' then 2 when 'EF' then 2 when 'IO' then 3 else 4 end td_sortlist,";
                strsql += " 1 td_controlflag,sm_prodtype,'N','O',sm_multiplier,'X'";
                strsql += " From " + strTable + " Trades with (" + StrComTradesIndex + "nolock)," + strTable + "Series_master with (nolock)," + strTable + "Client_master with (nolock)";
                strsql += " Where td_clientcd = cm_cd and td_exchange = sm_exchange And td_seriesid = sm_seriesid";
                strsql += " and td_clientcd = '" + code + "'";
                strsql += " and sm_expirydt >= '" + Fromdt + "' and  td_dt < '" + Fromdt + "'";
                strsql += " and td_exchange = '" + strexchange + "' and sm_prodtype in('IF','EF','CF','RF','TF')";
                strsql += " and cm_type <> 'C'";
                strsql += " group by td_exchange,td_clientcd,td_seriesid,sm_prodtype,sm_multiplier";
                strsql += " having sum(td_bqty - td_sqty) <> 0";
                mylib.ExecSQL(strsql, curCon);

                //Opening for Options
                strsql = "insert into #tmpfinvestorrep  ";
                strsql += " select '" + Fromdt + "',td_clientcd,td_exchange,";
                strsql += " td_seriesid, sum(case sale when 0 then buy else 0 end) td_bqty,";
                strsql += " 0,";
                strsql += " sum(case sale when 0 then 0 else sale end) td_sqty,0,";
                strsql += " 0,0,sum((buy+sale)*td_rate) / sum((buy+sale)),0 td_closeprice,0,";
                strsql += " case sm_prodtype when 'IF' then 1 when 'CF' then 1 when 'TF' then 2 when 'RF' then 2 when 'EF' then 2 when 'IO' then 3 else 4 end td_sortlist,";
                strsql += " 1 td_controlflag,sm_prodtype,'N','O',sm_multiplier,'X'";
                strsql += " From " + strTable + "vwFoutstandingpos  ";
                strsql += " Where sm_expirydt >= '" + Fromdt + "' and  td_dt < '" + Fromdt + "'";
                strsql += " and td_clientcd = '" + code + "'";
                strsql += " and td_exchange = '" + strexchange + "' and sm_prodtype in('IO','EO','CO')";
                strsql += " and cm_type <> 'C'";
                strsql += " group by td_exchange,td_clientcd,td_seriesid,sm_prodtype,sm_multiplier";
                strsql += " having sum(sale - buy) <> 0 ";
                mylib.ExecSQL(strsql, curCon);

                //Futures/Options running
                strsql = "insert into #tmpfinvestorrep  ";
                strsql += " select td_dt,td_clientcd,td_exchange,";
                strsql += " td_seriesid,td_bqty,0,td_sqty,0,0,0,";
                strsql += " td_rate,0.0000 td_closeprice,0 mtm,";
                strsql += " case sm_prodtype when 'IF' then 1 when 'CF' then 1 when 'TF' then 2 when 'RF' then 2 when 'EF' then 2 when 'IO' then 3 else 4 end td_sortlist,";
                strsql += " 2,sm_prodtype,'N','Y',sm_multiplier,'X'";
                strsql += " From " + strTable + " Trades with (" + StrComTradesIndex + "nolock) , " + strTable + "Series_master with (nolock)," + strTable + "Client_master with (nolock) ";
                strsql += " Where td_clientcd = cm_cd and td_exchange = sm_exchange and td_seriesid = sm_seriesid";
                strsql += " and td_clientcd = '" + code + "'";
                strsql += " and td_exchange = '" + strexchange + "'";
                strsql += " and sm_expirydt >= '" + Fromdt + "' and td_dt between '" + Fromdt + "' and '" + Todt + "'";
                mylib.ExecSQL(strsql, curCon);

                //Exercise/Assignments
                strsql = "insert into #tmpfinvestorrep  ";
                strsql += " select ex_dt,ex_clientcd,ex_exchange,";
                strsql += " ex_seriesid,ex_eqty,0,ex_aqty,0,0,0,";
                strsql += " ex_diffbrokrate,ex_settlerate,0,";
                strsql += " case sm_prodtype when 'IF' then 1 when 'CF' then 1 when 'TF' then 2  when 'RF' then 2 when 'EF' then 2 when 'IO' then 3 else 4 end + 5 td_sortlist,";
                strsql += " case ex_eaflag when 'E' then 3 else 4 end td_controlflag,sm_prodtype,'N','Y',sm_multiplier,'X'";
                strsql += " From " + strTable + "Exercise with (nolock), " + strTable + "Series_master with (nolock)," + strTable + "Client_master with (nolock)";
                strsql += " Where ex_clientcd = cm_cd and ex_exchange = sm_exchange And ex_seriesid = sm_seriesid";
                strsql += " and ex_clientcd = '" + code + "'";
                strsql += " and ex_exchange = '" + strexchange + "'";
                strsql += " and sm_expirydt >= '" + Fromdt + "' and  ex_dt between '" + Fromdt + "' and '" + Todt + "'";
                mylib.ExecSQL(strsql, curCon);

                //Reverse Future Outstanding
                strsql = "insert into #tmpfinvestorrep  ";
                strsql += " select '" + Todt + "',fi_clientcd,fi_exchange,";
                strsql += " fi_seriesid,case sign(sum(case fi_controlflag when 1 then case fi_dt when '" + Fromdt + "' then fi_bqty - fi_sqty else 0 end when 2 then fi_bqty - fi_sqty else fi_sqty - fi_bqty end)) when -1 then abs(sum(case fi_controlflag when 1 then case fi_dt when '" + Fromdt + "' then fi_bqty - fi_sqty else 0 end when 2 then fi_bqty - fi_sqty else fi_sqty - fi_bqty end)) else 0 end td_bqty,";
                strsql += " 0,";
                strsql += " case sign(sum(case fi_controlflag when 1 then case fi_dt when '" + Fromdt + "' then fi_bqty - fi_sqty else 0 end when 2 then fi_bqty - fi_sqty else fi_sqty - fi_bqty end)) when 1 then abs(sum(case fi_controlflag when 1 then case fi_dt when '" + Fromdt + "' then fi_bqty - fi_sqty else 0 end when 2 then fi_bqty - fi_sqty else fi_sqty - fi_bqty end)) else 0 end td_sqty,0,";
                strsql += " 0,0,0,0 td_closeprice,0,";
                strsql += " case fi_prodtype when 'IF' then 1 when 'CF' then 1 when 'TF' then 2 when 'RF' then 2 when 'EF' then 2 when 'IO' then 3 else 4 end + 6 td_sortlist,";
                strsql += " 5 td_controlflag,fi_prodtype,'R','N',sm_multiplier,'X'";
                strsql += " From #tmpfinvestorrep  ," + strTable + "Series_master with (nolock)";
                strsql += " Where fi_exchange = sm_exchange and sm_seriesid = fi_seriesid and fi_prodtype in('IF','EF','CF','RF','TF') ";
                strsql += " and sm_expirydt <= '" + Todt + "'";
                strsql += " group by fi_exchange,fi_clientcd,fi_seriesid,fi_prodtype,sm_multiplier";
                strsql += " having sum(case fi_controlflag when 1 then case fi_dt when '" + Fromdt + "' then fi_bqty - fi_sqty else 0 end when 2 then fi_bqty - fi_sqty else fi_sqty - fi_bqty end) <> 0";
                mylib.ExecSQL(strsql, curCon);

                //Update Last Market Price for Options
                strsql = "update #tmpfinvestorrep   set fi_rate = case fi_type when 'R' then ms_lastprice else fi_rate end,fi_closeprice = ms_lastprice from #tmpfinvestorrep  ,Market_summary with (nolock)";
                strsql += " where ms_seriesid = fi_seriesid ";
                strsql += " and ms_exchange = fi_exchange ";
                strsql += " and ms_dt = (select max(ms_dt) from " + strTable + "Market_summary with (nolock) where ms_exchange = fi_exchange ";
                strsql += " and ms_seriesid = fi_seriesid and ms_lastprice <> 0 and ms_dt <= '" + Todt + "' )";
                strsql += " and fi_prodtype in('IO','EO','CO')";
                mylib.ExecSQL(strsql, curCon);

                //Update Previous close and today's close prices
                strsql = "update #tmpfinvestorrep   set fi_closeprice =  isNull((select ms_lastprice From " + strTable + "Market_summary with (nolock) ";
                strsql += " Where ms_exchange = '" + strexchange + "' and ms_seriesid = fi_seriesid ";
                strsql += " and ms_dt = (select Max(ms_dt) from " + strTable + "Market_Summary with (nolock) ";
                strsql += " Where ms_exchange = '" + strexchange + "' and ms_seriesid = fi_seriesid ";
                strsql += " and ms_dt <='" + Todt + "')),0) ";
                strsql += " where fi_controlflag in('1','2') and fi_prodtype in('IF','EF','CF','RF','TF') ";
                mylib.ExecSQL(strsql, curCon);

                //Update close Price If Expiry Trade is Not Generated.
                strsql = "update #tmpfinvestorrep   set fi_rate =  ms_lastprice  , fi_closeprice = ms_lastprice ";
                strsql += " from #tmpfinvestorrep  ," + strTable + "Market_summary with (nolock) , " + strTable + "Series_master with (nolock) ";
                strsql += " where sm_Exchange= '" + strexchange + "' and sm_seriesid = fi_seriesid ";
                strsql += " and sm_exchange = ms_exchange and sm_seriesid = ms_seriesid  and sm_expirydt = ms_dt ";
                strsql += " and ms_dt < '" + Todt + "'";
                strsql += " and fi_prodtype in('IF','EF','CF','RF','TF') and fi_type = 'R' ";
                mylib.ExecSQL(strsql, curCon);

                strsql = "update #tmpfinvestorrep   set fi_rate = ms_prcloseprice from #tmpfinvestorrep  ," + strTable + "Market_summary with (nolock) ";
                strsql += " where ms_seriesid = fi_seriesid and fi_controlflag = 1";
                strsql += " and ms_exchange = '" + strexchange + "' ";
                strsql += " and ms_dt = fi_dt";
                strsql += " and fi_prodtype in('IF','EF','CF','RF','TF')";
                mylib.ExecSQL(strsql, curCon);

                //End of updation of close prices
                //Service tax here for Trades
                strsql = "insert into #tmpFinvcharges select td_dt,td_clientcd,'SERVICE TAX',round(sum(td_servicetax),2),0 from " + strTable + " Trades with (" + StrComTradesIndex + "nolock) ,#finvdates," + strTable + "Client_master with (nolock)," + strTable + "Series_master with (nolock)";
                strsql += " where td_clientcd = cm_cd and td_dt = bd_dt";
                strsql += " and td_exchange = sm_exchange ";
                strsql += " and td_seriesid = sm_seriesid";
                strsql += " and td_exchange = '" + strexchange + "' ";
                strsql += " and td_clientcd = '" + code + "'";
                strsql += " group by td_dt,td_clientcd having sum(td_servicetax) <> 0";
                mylib.ExecSQL(strsql, curCon);

                //Service tax here for Exercise
                strsql = "insert into #tmpFinvcharges select ex_dt,ex_clientcd,'SERVICE TAX',round(sum(ex_servicetax),2),0 from " + strTable + "Exercise with (nolock),#finvdates," + strTable + "Client_master with (nolock)," + strTable + "Series_master with (nolock) ";
                strsql += " where ex_clientcd = cm_cd and ex_dt = bd_dt";
                strsql += " and ex_exchange = sm_exchange ";
                strsql += " and ex_seriesid = sm_seriesid";
                strsql += " and ex_clientcd = '" + code + "'";
                strsql += " and ex_exchange = '" + strexchange + "' ";
                strsql += " group by ex_dt,ex_clientcd having sum(ex_servicetax) <> 0";
                mylib.ExecSQL(strsql, curCon);

                //Charges here
                //-----------from specialcharges start
                strsql = "insert into #tmpFinvcharges select fc_dt,fc_clientcd,fc_desc,round(sum(fc_amount),2),0 from " + strTable + "Fspecialcharges with (nolock),#finvdates," + strTable + "Client_master with (nolock) ";
                strsql += " where fc_clientcd = cm_cd and fc_dt = bd_dt";
                strsql += " and fc_clientcd = '" + code + "'";
                strsql += " and fc_desc not like '%{New%' and fc_exchange='" + strexchange + "' and fc_desc not like '%{Old%'";
                strsql += " and fc_chargecode not in ('EMR') ";
                strsql += " group by fc_dt,fc_clientcd,fc_desc having round(sum(fc_amount),2) <> 0";
                mylib.ExecSQL(strsql, curCon);

                strsql = "insert into #tmpFinvcharges select fc_dt,fc_clientcd,'SERVICE TAX',round(sum(fc_servicetax),2),0 from " + strTable + "Fspecialcharges with (nolock) ,#finvdates," + strTable + "Client_master with (nolock) ";
                strsql += " where fc_exchange='" + strexchange + "' and fc_clientcd = cm_cd and fc_dt = bd_dt";
                strsql += " and fc_clientcd = '" + code + "'";
                strsql += " group by fc_dt,fc_clientcd,fc_desc having round(sum(fc_servicetax),2) <> 0";
                mylib.ExecSQL(strsql, curCon);

                //-----------from specialcharges end        
                strsql = "update #tmpfinvestorrep  set fi_bvalue = fi_bqty*fi_rate*fi_multiplier,fi_svalue = fi_sqty*fi_rate*fi_multiplier,";
                strsql += "fi_netqty = fi_bqty - fi_sqty,fi_netvalue = (fi_bqty - fi_sqty)*fi_rate*fi_multiplier";
                strsql += " where fi_controlflag not in(3,4)";
                mylib.ExecSQL(strsql, curCon);

                strsql = "update #tmpfinvestorrep  set fi_bvalue = fi_bqty*fi_rate*fi_multiplier,fi_svalue = fi_sqty*fi_rate*fi_multiplier,";
                strsql += "fi_netqty = fi_sqty - fi_bqty,fi_netvalue = (fi_bqty + fi_sqty)*fi_rate*fi_multiplier";
                strsql += " where fi_controlflag in(3,4)";
                mylib.ExecSQL(strsql, curCon);

                strsql = "update #tmpfinvestorrep  set fi_mtm = round((((fi_sqty - fi_bqty)*fi_rate*fi_multiplier) - ((fi_sqty - fi_bqty)*fi_closeprice*fi_multiplier)),4)";
                strsql += " where fi_prodtype in('IF','EF','CF','RF','TF')";
                mylib.ExecSQL(strsql, curCon);

                strsql = "update #tmpfinvestorrep  set fi_mtm = round(((case fi_controlflag when 3  then (fi_bqty + fi_sqty) when 4 then (fi_bqty + fi_sqty) else (fi_bqty - fi_sqty)*(-1) end) *fi_rate*fi_multiplier),4)";
                strsql += " where fi_prodtype in('IO','EO','CO')";
                mylib.ExecSQL(strsql, curCon);

                strsql = "update #tmpfinvestorrep  set fi_netvalue = 0 where fi_type = 'R'";
                mylib.ExecSQL(strsql, curCon);

                strsql = "update #tmpfinvestorrep  ";
                strsql += " set fi_netvalue = (fi_bqty - fi_sqty)*";
                strsql += " case sm_callput when 'C' then fi_closeprice - fi_rate else fi_rate - fi_closeprice end*fi_multiplier";
                strsql += " from #tmpfinvestorrep ,Series_master";
                strsql += " where fi_exchange = sm_exchange and fi_segment = sm_segment and fi_seriesid = sm_seriesid ";
                strsql += " and fi_type = 'R'";
                strsql += " and (fi_bqty - fi_sqty) < 0";
                mylib.ExecSQL(strsql, curCon);

                strsql = "update #tmpfinvestorrep  ";
                strsql += " set fi_netvalue = (fi_bqty - fi_sqty)*";
                strsql += " case sm_callput when 'C' then fi_rate - fi_closeprice else fi_closeprice - fi_rate end*fi_multiplier";
                strsql += " from #tmpfinvestorrep ,Series_master";
                strsql += " where fi_exchange = sm_exchange and fi_segment = sm_segment and fi_seriesid = sm_seriesid ";
                strsql += " and fi_type = 'R'";
                strsql += " and (fi_bqty - fi_sqty) > 0";
                mylib.ExecSQL(strsql, curCon);

                strsql = "update #tmpfinvestorrep  set fi_mtm = fi_netvalue *(-1) where fi_type = 'R'";
                mylib.ExecSQL(strsql, curCon);


                strsql = " select Convert(char(12), sm_seriesid) sm_seriesid,sm_symbol,sm_desc, ";
                strsql += " case sm_prodtype when 'IF' then 1 when 'CF' then 1 when 'TF' then 2 when 'RF' then 2 when 'EF' then 2 when 'IO' then 3 else 4 end listorder,";
                strsql += " sum(case fi_balfield when 'O' then fi_bqty - fi_sqty else 0 end) BF,";
                strsql += " sum(case fi_type when 'N' then case fi_controlflag when 2 then fi_bqty else 0 end else 0 end) buyqty,";
                strsql += " sum(case fi_type when 'N' then case fi_controlflag when 2 then fi_sqty else 0 end else 0 end) sellqty,";
                strsql += " sum(case fi_type when 'N' then case fi_controlflag when 3 then abs(fi_bqty) else 0 end else 0 end) exerqty,";
                strsql += " sum(case fi_type when 'N' then case fi_controlflag when 4 then abs(fi_sqty) else 0 end else 0 end) assgnqty,";
                strsql += " sum(case when sm_expirydt <= '" + Todt + "' then 0 else case fi_balfield when 'N' then  0 else (fi_bqty)*case fi_controlflag when 3 then -1 else 1 end  - (fi_sqty)*case fi_controlflag when 4 then -1 else 1 end end end) outqty,";
                strsql += " sum(case fi_type when 'R' then  fi_sqty - fi_bqty else 0 end) closeqty,";
                strsql += " convert(decimal(15,2), sum(fi_mtm)) mtm,";
                strsql += " convert(decimal(15,2),sum(case fi_type when 'N' then case fi_controlflag when 2 then fi_bvalue else 0 end else 0 end)) buyvalue,";
                strsql += " convert(decimal(15,2),sum(case fi_type when 'N' then case fi_controlflag when 2 then fi_svalue else 0 end else 0 end)) sellvalue,";
                strsql += " convert(decimal(15,2),case when (sum(case fi_type when 'N' then case fi_controlflag when 2 then fi_bqty else 0 end else 0 end) >0) then ((sum(fi_bvalue)/sum(fi_bqty))/ fi_multiplier) else 0 end) Brate, ";
                strsql += " convert(decimal(15,2),case when (sum(case fi_type when 'N' then case fi_controlflag when 2 then fi_sqty else 0 end else 0 end) >0) then ((sum(fi_svalue) /sum(fi_sqty ))/ fi_multiplier) else 0 end) Srate ";
                strsql += " ,convert(decimal(15,2),case when (sum(case when sm_expirydt <= '" + Todt + "' then 0 else case fi_balfield when 'N' then  0 else (fi_bqty)*case fi_controlflag when 3 then -1 else 1 end  - (fi_sqty)*case fi_controlflag when 4 then -1 else 1 end end end) >0 and fi_multiplier > 0) then ((sum(fi_netvalue) /sum(case when sm_expirydt <= '" + Todt + "' then 0 else case fi_balfield when 'N' then  0 else (fi_bqty)*case fi_controlflag when 3 then -1 else 1 end  - (fi_sqty)*case fi_controlflag when 4 then -1 else 1 end end end)) / fi_multiplier) else 0 end) outRate ";
                strsql += " from #tmpfinvestorrep   a,Client_master with (nolock) ," + strTable + "Series_master with (nolock)";
                strsql += " where fi_clientcd = cm_cd and fi_exchange = sm_exchange ";
                if (strTable == "")
                {
                    strsql += " and fi_segment = sm_segment ";
                }
                strsql += " and fi_seriesid = sm_seriesid ";
                strsql += " group by fi_clientcd,fi_seriesid,cm_name,sm_seriesid,sm_prodtype,sm_symbol,sm_sname,sm_desc,fi_multiplier";
                strsql += "  Union all ";
                strsql += "select '','',bc_desc,'5',0,0,0,0,0,0,0,convert(decimal(15,2),sum(bc_amount*(-1)))  chrg,0,0,0,0,0 from #tmpFinvcharges";
                strsql += " where bc_clientcd = '" + code + "'";
                strsql += " group by bc_desc ";
                strsql += " Having sum(bc_amount*(-1)) <> 0 ";
                strsql += " order by listorder,sm_symbol";

                DataSet ObjDataSet2 = new DataSet();
                //SqlDataAdapter ObjAdapter = new SqlDataAdapter(strsql, ObjConnection);
                //ObjAdapter.Fill(ObjDataSet2);
                ObjDataSet2 = mylib.OpenDataSet(strsql, curCon);
                DataTable dtPL = ObjDataSet2.Tables[0];


                return dtPL;

            }
        }





        public DataTable GetProfitLossDetail(string code, string strscripcd, string Fromdt, string Todt)
        {

            DataSet ObjDataSet = new DataSet();
            DataTable dt = new DataTable();
            string strsql = "";
            LibraryModel mylib = new LibraryModel(true);
            UtilityModel myutil = new UtilityModel();



            //--------------------------- start------------------------------
            string StrTRXIndex = "";




            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {
                curCon.Open();
                if (Convert.ToInt16(mylib.fnFireQuery("sysobjects a, sysindexes b", "COUNT(0)", "a.id = b.id and a.name = 'Trx' and b.name", "idx_Trx_Clientcd", true, curCon)) == 1)
                { StrTRXIndex = "index(idx_trx_clientcd),"; }
                try
                {
                    strsql = " CREATE TABLE [#VX] (";
                    strsql += " [td_companycode] [char] (1) NOT NULL ,";
                    strsql += " [td_stlmnt] [char] (9) NOT NULL ,";
                    strsql += " [td_clientcd] [char] (8) NOT NULL ,";
                    strsql += " [td_scripcd] [char] (6) NOT NULL ,";
                    strsql += " [td_dt] [char] (8) NOT NULL ,";
                    strsql += " [td_srno] [numeric](18, 0) IDENTITY(1,1) NOT NULL ,";
                    strsql += " [td_bsflag] [char] (1) NOT NULL ,";
                    strsql += " [td_bqty] [numeric](18, 0) NOT NULL ,";
                    strsql += " [td_sqty] [numeric](18, 0) NOT NULL ,";
                    strsql += " [td_rate] [money] NOT NULL ,";
                    strsql += " [td_marketrate] [money] NOT NULL ,";
                    strsql += " [td_flag] [VarChar](1) Not null, ";
                    strsql += " [td_scripnm] [VarChar](12) Not null, ";
                    strsql += " [td_desc] [VarChar](15) null ";
                    strsql += " PRIMARY KEY CLUSTERED (td_srno))";
                    mylib.ExecSQL(strsql, curCon);
                }
                catch (Exception e)
                {
                    strsql = "Drop table #VX";
                    mylib.ExecSQL(strsql, curCon);

                    strsql = " CREATE TABLE [#VX] (";
                    strsql += " [td_companycode] [char] (1) NOT NULL ,";
                    strsql += " [td_stlmnt] [char] (9) NOT NULL ,";
                    strsql += " [td_clientcd] [char] (8) NOT NULL ,";
                    strsql += " [td_scripcd] [char] (6) NOT NULL ,";
                    strsql += " [td_dt] [char] (8) NOT NULL ,";
                    strsql += " [td_srno] [numeric](18, 0) IDENTITY(1,1) NOT NULL ,";
                    strsql += " [td_bsflag] [char] (1) NOT NULL ,";
                    strsql += " [td_bqty] [numeric](18, 0) NOT NULL ,";
                    strsql += " [td_sqty] [numeric](18, 0) NOT NULL ,";
                    strsql += " [td_rate] [money] NOT NULL ,";
                    strsql += " [td_marketrate] [money] NOT NULL ,";
                    strsql += " [td_flag] [VarChar](1) Not null, ";
                    strsql += " [td_scripnm] [VarChar](12) Not null, ";
                    strsql += " [td_desc] [VarChar](15) null ";
                    strsql += " PRIMARY KEY CLUSTERED (td_srno))";
                    mylib.ExecSQL(strsql, curCon);
                }
                try
                {
                    strsql = " CREATE TABLE [#invcharges] (";
                    strsql += " [ic_stlmnt] [char] (9) NOT NULL ,";
                    strsql += " [ic_clientcd] [char] (8) NOT NULL ,";
                    strsql += " [ic_desc] [char] (20) NOT NULL ,";
                    strsql += " [ic_amount] money";
                    strsql += " ) ON [PRIMARY]";
                    mylib.ExecSQL(strsql, curCon);
                }
                catch (Exception ex)
                {
                    strsql = "Drop table #invcharges";
                    mylib.ExecSQL(strsql, curCon);

                    strsql = " CREATE TABLE [#invcharges] (";
                    strsql += " [ic_stlmnt] [char] (9) NOT NULL ,";
                    strsql += " [ic_clientcd] [char] (8) NOT NULL ,";
                    strsql += " [ic_desc] [char] (20) NOT NULL ,";
                    strsql += " [ic_amount] money";
                    strsql += " ) ON [PRIMARY]";
                    mylib.ExecSQL(strsql, curCon);
                }

                strsql = " CREATE index #idx_invcharges_clientcd on #invcharges (ic_clientcd) ";
                mylib.ExecSQL(strsql, curCon);

                //if (ConfigurationManager.AppSettings["IsTradeWeb"] == "O")//Live DB
                //{
                strsql = "insert into #VX SELECT ";
                strsql += " td_companycode ,td_stlmnt ,td_clientcd ,td_scripcd,";
                strsql += " td_dt , td_bsflag , sum(td_bqty) ,sum(td_sqty) ,sum(td_rate*(td_bqty+td_sqty)), sum(td_marketrate*(td_bqty+td_sqty)),'Y' td_flag,ss_name,''";
                strsql += " FROM Trx with(" + StrTRXIndex + "nolock) , securities with(nolock) where td_dt between '" + Fromdt + "' and '" + Todt + "'";
                strsql += " and td_cfflag = 'N' and td_clientcd = '" + code + "' and td_Scripcd = ss_cd  and  td_Scripcd ='" + strscripcd + "'";
                strsql += " group by td_companycode ,td_stlmnt ,td_clientcd ,td_scripcd, td_dt , td_bsflag,ss_name ";

                //strsql += "Union all SELECT ";
                //strsql += " td_companycode ,td_stlmnt ,td_clientcd ,td_scripcd,";
                //strsql += " td_dt , td_bsflag , sum(td_sqty) ,sum(td_bqty) ,sum(td_marketrate*(td_sqty+td_bqty)), sum(td_marketrate*(td_sqty+td_bqty)),'Y' td_flag,ss_name,''";
                //strsql += " FROM Trx with(" + StrTRXIndex + "nolock) , securities with(nolock) where td_dt between '" + Fromdt + "' and '" + Todt + "'";
                //strsql += " and td_cfflag = 'N' and td_clientcd = '" + code + "' and td_Scripcd = ss_cd and td_marginyn='B' ";
                //strsql += " group by td_companycode ,td_stlmnt ,td_clientcd ,td_scripcd, td_dt , td_bsflag,ss_name ";

                mylib.ExecSQL(strsql, curCon);
                //}
                //else
                //{
                //    strsql = "insert into #VX SELECT ";
                //    strsql += " td_companycode ,td_stlmnt ,td_clientcd ,td_scripcd,";
                //    strsql += " td_dt , td_bsflag , sum(td_bqty) ,sum(td_sqty) ,sum(td_rate*(td_bqty+td_sqty)), sum(td_marketrate*(td_bqty+td_sqty)),'Y' td_flag,ss_Name,''";
                //    strsql += " FROM Trx with(" + StrTRXIndex + "nolock),TPSecurities with (nolock) where td_Scripcd=ss_cd and td_dt between '" + Fromdt + "' and '" + Todt + "'";
                //    strsql += " and td_cfflag = 'N' and td_clientcd = '" + code + "' and td_scripcd='" + strscripcd + "'";
                //    strsql += " group by td_companycode ,td_stlmnt ,td_clientcd ,td_scripcd, td_dt , td_bsflag,ss_Name ";
                //    mylib.ExecSQL(strsql, curCon);
                //}

                strsql = "insert into #invcharges";
                strsql += " select sh_stlmnt,sh_clientcd,left(sh_desc,12),sh_amount ";
                strsql += " from Specialcharges with (nolock),Settlements with (nolock) ";
                strsql += " Where sh_stlmnt = se_stlmnt and se_endt between '" + Fromdt + "' and '" + Todt + "' and sh_clientcd =('" + code + "')";
                mylib.ExecSQL(strsql, curCon);

                strsql = "insert into #invcharges";
                strsql += " select sh_stlmnt,sh_clientcd,left('Service Tax',12),sh_servicetax ";
                strsql += " from Specialcharges with (nolock),Settlements with (nolock) where sh_stlmnt = se_stlmnt";
                strsql += " and sh_servicetaxyn = 'Y' and se_endt between '" + Fromdt + "' and '" + Todt + "' ";
                strsql += " and sh_clientcd ='" + code + "' ";
                mylib.ExecSQL(strsql, curCon);

                strsql = "Insert into  #invcharges";
                strsql += " select bc_stlmnt,bc_clientcd,left(cg_desc,12),";
                strsql += " bc_amount from Cbilled_charges with (nolock) ,Charges_master with (nolock) ,Settlements with (nolock)";
                strsql += " Where bc_companycode = cg_companycode And Left(bc_stlmnt, 1) = cg_exchange";
                strsql += " and bc_chargecode = cg_cd and bc_stlmnt = se_stlmnt ";
                strsql += " and se_endt between '" + Fromdt + "' and '" + Todt + "' ";
                strsql += " and bc_clientcd ='" + code + "' ";
                mylib.ExecSQL(strsql, curCon);

                strsql = "update #VX set td_rate = Case when (td_bqty+td_sqty) > 0 then td_rate/(td_bqty+td_sqty) else 0 end , td_marketrate= Case When (td_bqty+td_sqty) > 0 then td_marketrate/(td_bqty+td_sqty) else 0 end ";
                mylib.ExecSQL(strsql, curCon);

                strsql = "Create ";
                strsql += " INDEX [VX_clientscripstlmnt] ON [dbo].[#VX]";
                strsql += " ([td_clientcd], [td_scripcd],[td_dt],[td_stlmnt])";
                mylib.ExecSQL(strsql, curCon);

                strsql = "update a set a.td_flag = 'N' from #VX a";
                strsql += " where a.td_clientcd + a.td_scripcd + a.td_stlmnt";
                strsql += " in(select b.td_clientcd + b.td_scripcd + b.td_stlmnt";
                strsql += " from #VX b where a.td_clientcd = b.td_clientcd";
                strsql += " and a.td_scripcd = b.td_scripcd";
                strsql += " and a.td_stlmnt = b.td_stlmnt";
                strsql += " group by td_clientcd,td_scripcd,td_stlmnt";
                strsql += " having sum(td_bqty) = 0 or sum(td_sqty) = 0)";
                mylib.ExecSQL(strsql, curCon);

                strsql = "SELECT td_Stlmnt,td_clientcd , td_scripcd,cm_name,td_scripnm,";
                strsql += " sum(td_bqty) td_bqty ,sum(td_sqty) td_sqty, sum(td_bqty-td_sqty) net";
                strsql += " FROM #VX,Client_master with (nolock) ";
                strsql += " where td_clientcd = cm_cd and td_flag = 'Y'";
                strsql += " group by td_stlmnt,td_clientcd,cm_name,td_scripcd,td_scripnm";
                strsql += " having sum(td_bqty - td_sqty) <> 0";
                strsql += " ORDER BY td_clientcd , td_scripcd  ";

                ObjDataSet = mylib.OpenDataSet(strsql, curCon);

                if (ObjDataSet.Tables[0].Rows.Count > 0)
                {
                    string strclient = string.Empty;
                    string strscrip = string.Empty;
                    string strstlmnt = string.Empty;
                    string strDelSide = string.Empty;
                    long lngDelQty = 0;
                    long lngLoop = 0;
                    long lngCurSerial = 0;
                    long lngBalqty = 0;
                    foreach (DataRow objdatarow in ObjDataSet.Tables[0].Rows)
                    {
                        strclient = (string)objdatarow["td_Clientcd"];
                        strscrip = (string)objdatarow["td_scripcd"];
                        strstlmnt = (string)objdatarow["td_stlmnt"];
                        if (long.Parse(objdatarow["Net"].ToString()) > 0)
                        {
                            strDelSide = "B";
                        }
                        else
                        {
                            strDelSide = "S";
                        }
                        lngDelQty = System.Math.Abs(long.Parse(objdatarow["Net"].ToString()));
                        strsql = "select * from #VX where td_clientcd = '" + strclient + "' and td_scripcd = '" + strscrip + "'";
                        strsql += " and td_stlmnt = '" + strstlmnt + "'";
                        strsql += " and td_bsflag = '" + strDelSide + "' order by td_dt desc,td_stlmnt desc";
                        //SqlDataAdapter ObjAdapter1 = new SqlDataAdapter(strsql, ObjConnection);
                        DataSet ObjDataSet1 = new DataSet();
                        //ObjAdapter1.Fill(ObjDataSet1);
                        ObjDataSet1 = mylib.OpenDataSet(strsql, curCon);
                        if (ObjDataSet1.Tables[0].Rows.Count > 0)
                        {
                            foreach (DataRow objdatarow1 in ObjDataSet1.Tables[0].Rows)
                            {
                                lngLoop += 1;
                                lngCurSerial = long.Parse(objdatarow1["td_SrNo"].ToString());
                                if (long.Parse(objdatarow1["td_bqty"].ToString()) + long.Parse(objdatarow1["td_sqty"].ToString()) > lngDelQty)
                                {
                                    lngBalqty = long.Parse(objdatarow1["td_bqty"].ToString()) + long.Parse(objdatarow1["td_sqty"].ToString()) - lngDelQty;
                                    strsql = " insert into #VX select td_companycode ,td_stlmnt,td_clientcd , td_scripcd, td_dt, td_bsflag,";
                                    if (strDelSide == "B")
                                    {
                                        strsql += lngBalqty + ", td_sqty";
                                    }
                                    else
                                    {
                                        strsql += " td_bqty ," + lngBalqty;
                                    }
                                    strsql += ", td_rate, td_marketrate,td_flag,td_scripnm,'' from #VX where td_srno =" + lngCurSerial;
                                    mylib.ExecSQL(strsql, curCon);

                                    strsql = "update #VX set td_flag = 'N' ";
                                    if (strDelSide == "B")
                                    {
                                        strsql += ",td_bqty = ";
                                    }
                                    else
                                    {
                                        strsql += ",td_sqty = ";
                                    }
                                    strsql += +lngDelQty + " where td_srno = " + lngCurSerial;
                                    mylib.ExecSQL(strsql, curCon);
                                    lngDelQty = 0;
                                }
                                else
                                {
                                    strsql = "update #VX set td_flag = 'N' where td_srno = " + lngCurSerial;
                                    mylib.ExecSQL(strsql, curCon);
                                    lngDelQty = lngDelQty - (long.Parse(objdatarow1["td_bqty"].ToString()) + long.Parse(objdatarow1["td_Sqty"].ToString()));
                                }

                                if (lngDelQty <= 0)
                                { break; }
                            }
                        }
                    }
                }
                ObjDataSet.Dispose();

                strsql = "SELECT td_clientcd , td_scripcd,cm_name,td_scripnm,";
                strsql += " sum(td_bqty) td_bqty ,sum(td_sqty) td_sqty, sum(td_bqty-td_sqty) net";
                strsql += " FROM #VX,Client_master with (nolock) ";
                strsql += " where td_clientcd = cm_cd ";
                strsql += " group by td_clientcd,cm_name,td_scripcd,td_scripnm";
                strsql += " having sum(td_bqty - td_sqty) <> 0";
                strsql += " ORDER BY td_clientcd , td_scripcd  ";

                DataSet ObjDataSet2 = new DataSet();
                ObjDataSet2 = mylib.OpenDataSet(strsql, curCon);

                if (ObjDataSet2.Tables[0].Rows.Count > 0)
                {
                    string strclient = string.Empty;
                    string strscrip = string.Empty;
                    string strstlmnt = string.Empty;
                    string strDelSide = string.Empty;
                    long lngDelQty = 0;
                    long lngLoop = 0;
                    long lngCurSerial = 0;
                    long lngBalqty = 0;
                    foreach (DataRow objdatarow in ObjDataSet2.Tables[0].Rows)
                    {
                        strclient = (string)objdatarow["td_Clientcd"];
                        strscrip = (string)objdatarow["td_scripcd"];
                        if (long.Parse(objdatarow["Net"].ToString()) > 0)
                        {
                            strDelSide = "B";
                        }
                        else
                        {
                            strDelSide = "S";
                        }
                        lngDelQty = System.Math.Abs(long.Parse(objdatarow["Net"].ToString()));
                        strsql = "select * from #VX where td_clientcd = '" + strclient + "' and td_scripcd = '" + strscrip + "'";
                        strsql += " and td_bsflag = '" + strDelSide + "' and td_flag = 'N' order by td_dt desc,td_stlmnt desc";
                        //SqlDataAdapter ObjAdapter3 = new SqlDataAdapter(strsql, ObjConnection);
                        DataSet ObjDataSet1 = new DataSet();
                        //ObjAdapter3.Fill(ObjDataSet1);
                        ObjDataSet1 = mylib.OpenDataSet(strsql, curCon);
                        if (ObjDataSet1.Tables[0].Rows.Count > 0)
                        {
                            foreach (DataRow objdatarow1 in ObjDataSet1.Tables[0].Rows)
                            {
                                lngLoop += 1;
                                lngCurSerial = long.Parse(objdatarow1["td_SrNo"].ToString());
                                if (long.Parse(objdatarow1["td_bqty"].ToString()) + long.Parse(objdatarow1["td_sqty"].ToString()) > lngDelQty)
                                {
                                    lngBalqty = long.Parse(objdatarow1["td_bqty"].ToString()) + long.Parse(objdatarow1["td_sqty"].ToString()) - lngDelQty;
                                    strsql = " insert into #VX select td_companycode ,td_stlmnt,td_clientcd , td_scripcd, td_dt, td_bsflag,";
                                    if (strDelSide == "B")
                                    {
                                        strsql += lngBalqty + ", td_sqty";
                                    }
                                    else
                                    {
                                        strsql += " td_bqty ," + lngBalqty;
                                    }
                                    strsql += ", td_rate, td_marketrate,td_flag,td_scripnm,'' from #VX where td_srno =" + lngCurSerial;
                                    mylib.ExecSQL(strsql, curCon);
                                    strsql = "update #VX set td_flag = 'X' ";
                                    if (strDelSide == "B")
                                    {
                                        strsql += ",td_bqty = ";
                                    }
                                    else
                                    {
                                        strsql += ",td_sqty = ";
                                    }
                                    strsql += +lngDelQty + " where td_srno = " + lngCurSerial;
                                    mylib.ExecSQL(strsql, curCon);
                                    lngDelQty = 0;
                                }
                                else
                                {
                                    strsql = "update #VX set td_flag = 'X' where td_srno = " + lngCurSerial;
                                    mylib.ExecSQL(strsql, curCon);
                                    lngDelQty = lngDelQty - (long.Parse(objdatarow1["td_bqty"].ToString()) + long.Parse(objdatarow1["td_Sqty"].ToString()));
                                }
                                if (lngDelQty <= 0)
                                { break; }
                            }
                        }
                    }
                }

                //-------------------------End---------------------------

                strsql = "update #VX set td_desc = CAse td_flag when 'Y' then 'Square off' else 'Delivery' end ";
                mylib.ExecSQL(strsql, curCon);
                //if (strscripcd != "")
                //    LblScrip.Text = Request.QueryString["td_scripnm"] + "[" + strscripcd + "]";
                //else
                //    LblScrip.Text = Request.QueryString["td_scripnm"] + " " + "Details";


                //if (ConfigurationManager.AppSettings["IsTradeWeb"] == "O")//Live DB
                //{
                //detail
                strsql = "select '1' as Ord, ss_Lname td_scripnm ,td_stlmnt , sum(td_bqty) BQty, convert(decimal(15,2),sum(td_bqty*td_rate)) BAmount ,  case when SUM(td_bqty) <> 0 then convert(decimal(15,2),sum(td_bqty*td_rate)/sum(td_bqty)) else 0 end BRate,  sum(td_sqty) SQty , convert(decimal(15,2),sum(td_sqty*td_rate)) SAmount ,  case when SUM(td_sqty) <> 0 then convert(decimal(15,2),sum(td_sqty*td_rate)/sum(td_sqty)) else 0 end SRate,isnull(td_desc,'') td_desc";
                strsql += ", Convert(char,Convert(datetime,td_dt ),103) td_dt , td_dt as dt ";
                strsql += " from #VX,securities with(nolock) where td_scripcd=ss_cd  and  td_scripcd ='" + strscripcd + "'";
                strsql += " Group by ss_Lname,td_stlmnt,td_desc,td_dt ";
                if (strscripcd == "")
                {
                    strsql += " Union all ";
                    strsql += " select '2' Ord,'',ic_desc,0,0,0,0,0,Convert(decimal(15,2),sum(ic_amount)) * (-1) amt,'', '', '' from #invcharges";
                    strsql += " where ic_amount > 0";
                    strsql += " group by ic_desc ";
                    strsql += " order by Ord,ss_Lname, dt";
                }

                //}
                //else
                //{
                //    strsql = "select '1' as Ord, ss_Lname td_scripnm ,td_stlmnt , sum(td_bqty) BQty, convert(decimal(15,2),sum(td_bqty*td_rate)) BAmount ,  case when SUM(td_bqty) <> 0 then convert(decimal(15,2),sum(td_bqty*td_rate)/sum(td_bqty)) else 0 end BRate,  sum(td_sqty) SQty , convert(decimal(15,2),sum(td_sqty*td_rate)) SAmount ,  case when SUM(td_sqty) <> 0 then convert(decimal(15,2),sum(td_sqty*td_rate)/sum(td_sqty)) else 0 end SRate,isnull(td_desc,'') td_desc";
                //    strsql += ", Convert(char,Convert(datetime,td_dt ),103) td_dt, td_dt as dt ";
                //    strsql += " from #VX,TPSecurities with (nolock) where td_scripcd=ss_cd and  td_scripcd ='" + strscripcd + "' ";
                //    strsql += " Group by ss_Lname,td_stlmnt,td_desc,td_dt ";
                //    if (strscripcd == "")
                //    {
                //        strsql += " Union all ";
                //        strsql += " select '2' Ord,'',ic_desc,0,0,0,0,0,Convert(decimal(15,2),sum(ic_amount)) * (-1) amt,'', '', '' from #invcharges";
                //        strsql += " where ic_amount > 0";
                //        strsql += " group by ic_desc ";
                //        strsql += " order by Ord,ss_Lname , dt ";
                //    }

                //}
                ObjDataSet2 = mylib.OpenDataSet(strsql, curCon);
                dt = ObjDataSet2.Tables[0];
            }

            return dt;

        }


    }
    public class modClientInformationModel : ConnectionModel
    {
        public string Code { get; set; }
        public modClientInformationModel()
        {
        }
        public modClientInformationModel(string _Code)
        {
            this.Code = _Code;
        }


        public DashBoardClientSummaryModel GetDashBoardClientSummary()
        {

            LibraryModel mylib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();

            //CLIENT MASTER DETAILS
            DashBoardClientSummaryModel ulist = new DashBoardClientSummaryModel();
            strSQL = "select cm_cd, cm_name, cm_add1, cm_add2, cm_add3, cm_add4,cm_mobile,cm_email, cm_groupcd, gr_desc, cm_familycd, fm_desc , cm_brboffcode, bm_branchname" +
                    " from Client_master ,Branch_master , Family_master, Group_master " +
                    " Where cm_groupcd=gr_cd and cm_familycd=fm_cd and cm_brboffcode=bm_branchcd " +
                    " and cm_cd = '" + Code + "' ";
            DataTable dtClient = mylib.OpenDataTable(strSQL);

            modLedger led = new modLedger();
            decimal ledgersum = led.GetClientLedgerSummaryByCode(Code);

            modHolding hold = new modHolding();
            decimal decSumofBenHolding = hold.GetBenHoldingSumByCode(Code);

            modMargin mar = new modMargin();
            decimal decMarginShortfall = mar.GetMarginShortFallSumByCode(Code);

            modDemat demat = new modDemat();
            decimal decRetainHoldingSum = demat.GetRetainHoldingSummarySumByCode(Code);

            modCollateral col = new modCollateral();
            decimal decShareCollSum = col.GetShareCollateralSum(Code);


            int intSettledBefore = 0;
            strSQL = "Select DATEDIFF(DAY, X.qs_dt,GETDATE()) From " +
                    " (select MAX(qs_dt) qs_dt from QuarterlySquareoff Where qs_cmcd = '" + Code + "' Group by qs_cmcd) X ";
            DataTable dtVal = mylib.OpenDataTable(strSQL);
            if (dtVal.Rows.Count > 0)
            {
                intSettledBefore = Convert.ToInt16(dtVal.Rows[0][0].ToString());
            }


            modRiskManagementSystem rms = new modRiskManagementSystem();
            decimal decRiskStatusSum = rms.GetRMSSumByCode(Code);

            int intDebitSince = 0;
            strSQL = "select top 1 DateDiff(d, ld_dt, GETDATE())  from LEDGER where ld_clientcd ='" + Code + "' and ld_dt > " + myutil.newline() +
                    " ( " + myutil.newline() +
                    " 	select top 1 ld_baldt from " + myutil.newline() +
                    " 	(" + myutil.newline() +
                    " 		select ld_balDt, SUM(ld_amount) ld_Balance from LEDGER, " + myutil.newline() +
                    " 		(" + myutil.newline() +
                    " 			select distinct ld_dt ld_BalDt from LEDGER where ld_clientcd ='" + Code + "'" + myutil.newline() +
                    " 		) XYZ" + myutil.newline() +
                    " 		where ld_clientcd = '" + Code + "' and ld_dt<=ld_BalDt " + myutil.newline() +
                    " 		group by ld_BalDt " + myutil.newline() +
                    " 	) abc " + myutil.newline() +
                    " 	where ld_Balance<=0 order by ld_BalDt desc" + myutil.newline() +
                    " )" + myutil.newline() +
                    " order by ld_dt ";
            intDebitSince = mylib.GetScalarValueInt(strSQL);


            if (dtClient.Rows.Count > 0)
            {
                DataRow drCL = dtClient.Rows[0];
                ulist = new DashBoardClientSummaryModel()
                {
                    ClientCd = drCL["cm_cd"].ToString().Trim(),
                    ClientName = drCL["cm_name"].ToString().Trim(),
                    Address1 = drCL["cm_add1"].ToString().Trim(),
                    Address2 = drCL["cm_add2"].ToString().Trim(),
                    Address3 = drCL["cm_add3"].ToString().Trim(),
                    City = drCL["cm_add4"].ToString().Trim(),
                    Mobile = drCL["cm_mobile"].ToString().Trim(),
                    Email = drCL["cm_email"].ToString().Trim(),
                    GroupCd = drCL["cm_groupcd"].ToString().Trim(),
                    GroupName = drCL["gr_desc"].ToString().Trim(),
                    FamilyCd = drCL["cm_familycd"].ToString().Trim(),
                    FamilyName = drCL["fm_desc"].ToString().Trim(),
                    BranchCd = drCL["cm_brboffcode"].ToString().Trim(),
                    BranchName = drCL["bm_branchname"].ToString().Trim(),
                    LedgerSum = ledgersum,
                    BenHoldingSum = decSumofBenHolding,
                    RetainHoldingSum = decRetainHoldingSum,
                    MarginShortFallSum = decMarginShortfall,
                    RiskStatusSum = decRiskStatusSum,
                    SettledBefore = intSettledBefore,
                    DebitSince = intDebitSince,
                    ShareCollateralSum = decShareCollSum
                };
            }
            return ulist;
        }

        public IEnumerable<ClientMasterModel> GetClientMaster(string criteria, string SearchBy)
        {
            UtilityModel myutil = new UtilityModel();
            string strWhere = "";
            string strSQL = "";
            //string cm_Schedule = HttpContext.Current.Session["CMSCHEDULE"].ToString();
            if (SearchBy == "CL" || SearchBy == "Client")
            {
                strWhere = " and (cm_name like '" + criteria + "%' or cm_cd like '" + criteria + "%') and cm_type <> 'C' and cm_Schedule =  '" + HttpContext.Current.Application["CMSCHEDULE"] + "' ";
                strSQL = "select top 20 rtrim(cm_cd) + '~' + rtrim(cm_name) as cm_cd, rtrim(cm_name) + '~' + rtrim(cm_cd) as cm_name " +
                                " From Client_master cm " + " Where exists " + myutil.LoginAccess("cm.cm_cd") + strWhere;
            }
            else if (SearchBy == "BR")
            {
                strWhere = "Where (bm_branchname like '" + criteria + "%' or bm_branchcd like '" + criteria + "%') ";
                strSQL = "select top 20 '' cm_cd, rtrim(bm_branchname) + '~' + rtrim(bm_branchcd) as cm_name " +
                                " From Branch_master " + strWhere;
            }
            else if (SearchBy == "FM" || SearchBy == "Family")
            {
                strWhere = " Where (fm_desc like '" + criteria + "%' or fm_cd like '" + criteria + "%') ";
                strSQL = "select top 20 '' cm_cd, rtrim(fm_desc) + '~' + rtrim(fm_cd) as cm_name " +
                                " From Family_master " + strWhere;
            }
            else if (SearchBy == "GR" || SearchBy == "Group")
            {
                strWhere = " Where (gr_desc like '" + criteria + "%' or gr_cd like '" + criteria + "%') ";
                strSQL = "select top 20 '' cm_cd, rtrim(gr_desc) + '~' + rtrim(gr_cd) as cm_name " +
                                " From Group_master " + strWhere;
            }
            else if (SearchBy == "SE")
            {
                strWhere = " Where (ss_cd like '" + criteria + "%' or ss_name like '" + criteria + "%') ";
                strSQL = "select top 20 '' cm_cd, rtrim(ss_name) + '~' + rtrim(ss_cd) as cm_name " +
                                " From Securities " + strWhere;
            }
            else if (SearchBy == "SB" || SearchBy == "Sub-Broker")
            {
                strWhere = " where (RM_Name like '" + criteria + "%' or RM_CD like '" + criteria + "%') ";
                strSQL = "select top 20 '' cm_cd,rtrim(RM_Name) + '~' + rtrim(RM_CD) as cm_name " +
                                " From Subbrokers  sb " + strWhere;

            }
            else
            {
                strWhere = " and (cm_name like '" + criteria + "%' or cm_cd like '" + criteria + "%') and cm_type <> 'C' and cm_Schedule = '" + HttpContext.Current.Application["CMSCHEDULE"] + "'";
                strSQL = "select top 20 rtrim(cm_cd) + '~' + rtrim(cm_name) as cm_cd, rtrim(cm_name) + '~' + rtrim(cm_cd) as cm_name " +
                                " From Client_master cm " +
                                " where exists " + myutil.LoginAccess("cm.cm_cd") + strWhere;
            }
            LibraryModel mylib = new LibraryModel();
            List<ClientMasterModel> ulist = new List<ClientMasterModel>();
            DataTable dt = mylib.OpenDataTable(strSQL);
            ulist = dt.AsEnumerable()
            .Select(row => new ClientMasterModel
            {
                ClientCd = row.Field<string>("cm_cd"),
                ClientName = row.Field<string>("cm_name"),
            }).ToList();

            return ulist;
        }

        public IEnumerable<ClientMasterModel> GetClientMasterLedger(string criteria, string SearchBy)
        {
            UtilityModel myutil = new UtilityModel();
            LibraryModel mylib = new LibraryModel();
            string strWhere = "";
            string strSQL = "";
            Boolean IsSubroker = false;
            if (!string.IsNullOrEmpty(Strings.Trim(criteria)) && Convert.ToInt32(mylib.fnFireQuery("Client_master", "count(0)", " cm_schedule=49843750 and cm_cd", Strings.Trim(criteria), false)) == 0)
            {
                IsSubroker = Convert.ToInt32(mylib.fnFireQuery("Client_master,SubBrokers", "count(0)", " cm_subbroker=RM_CD  " + HttpContext.Current.Session["LoginAccessOld"] + "  and RM_GLActCode", Strings.Trim(criteria), false)) > 0;
            }

            if (SearchBy == "CL" || SearchBy == "Client")
            {
                if (IsSubroker)
                {
                    strWhere = " Where (RM_Name like '" + criteria + "%' or RM_CD like '" + criteria + "%') and RM_CD = cm_subBroker and cm_type <> 'C' and cm_Schedule = '" + HttpContext.Current.Application["CMSCHEDULE"] + "'";
                    strSQL = "select distinct top 20 '' cm_cd,rtrim(RM_Name) + '~' + rtrim(RM_CD) as cm_name " +
                                    " From Subbrokers,Client_master " + strWhere + " " + HttpContext.Current.Session["LoginAccessOld"];
                }
                else
                {
                    strWhere = " and (cm_name like '" + criteria + "%' or cm_cd like '" + criteria + "%') and cm_type <> 'C' and cm_Schedule = '" + HttpContext.Current.Application["CMSCHEDULE"] + "'";
                    strSQL = "select top 20 rtrim(cm_cd) + '~' + rtrim(cm_name) as cm_cd, rtrim(cm_name) + '~' + rtrim(cm_cd) as cm_name " +
                                    " From Client_master cm " +
                                    " Where exists " + myutil.LoginAccess("cm.cm_cd") + strWhere;
                }

            }
            else if (SearchBy == "BR")
            {
                strWhere = " Where (bm_branchname like '" + criteria + "%' or bm_branchcd like '" + criteria + "%') ";
                strSQL = "select top 20 '' cm_cd, rtrim(bm_branchname) + '~' + rtrim(bm_branchcd) as cm_name " +
                                " From Branch_master " + strWhere;
            }
            else if (SearchBy == "FM" || SearchBy == "Family")
            {
                strWhere = " Where (fm_desc like '" + criteria + "%' or fm_cd like '" + criteria + "%') ";
                strSQL = "select top 20 '' cm_cd, rtrim(fm_desc) + '~' + rtrim(fm_cd) as cm_name " +
                                " From Family_master " + strWhere;
            }
            else if (SearchBy == "GR" || SearchBy == "Group")
            {
                strWhere = " Where (gr_desc like '" + criteria + "%' or gr_cd like '" + criteria + "%') ";
                strSQL = "select top 20 '' cm_cd, rtrim(gr_desc) + '~' + rtrim(gr_cd) as cm_name " +
                                " From Group_master " + strWhere;
            }
            else if (SearchBy == "SB" || SearchBy == "Sub-Broker")
            {
                strWhere = " Where (RM_Name like '" + criteria + "%' or RM_CD like '" + criteria + "%') and RM_CD = cm_subBroker";
                strSQL = "select distinct top 20 '' cm_cd,rtrim(RM_Name) + '~' + rtrim(RM_CD) as cm_name " +
                                " From Subbrokers,Client_master " + strWhere + " " + HttpContext.Current.Session["LoginAccessOld"];
            }
            else
            {
                strWhere = " and (cm_name like '" + criteria + "%' or cm_cd like '" + criteria + "%') and cm_type <> 'C' and cm_Schedule = '" + HttpContext.Current.Application["CMSCHEDULE"] + "'";
                strSQL = "select top 20 rtrim(cm_cd) + '~' + rtrim(cm_name) as cm_cd, rtrim(cm_name) + '~' + rtrim(cm_cd) as cm_name " +
                                " From Client_master cm " +
                                " Where exists " + myutil.LoginAccess("cm.cm_cd") + strWhere;
            }

            List<ClientMasterModel> ulist = new List<ClientMasterModel>();
            DataTable dt = mylib.OpenDataTable(strSQL);
            ulist = dt.AsEnumerable()
            .Select(row => new ClientMasterModel
            {
                ClientCd = row.Field<string>("cm_cd"),
                ClientName = row.Field<string>("cm_name"),
            }).ToList();

            return ulist;
        }
        public IEnumerable<ClientMasterModel> GetClientMasterWithSecurity(string criteria, string SearchBy)
        {
            UtilityModel myutil = new UtilityModel();
            string strWhere = "";
            string strSQL = "";

            if (SearchBy == "Security")
            {
                strWhere = " ss_name like '" + criteria + "%'";
                strSQL = "select top 20 rtrim(ss_cd) + '~' + rtrim(ss_name) as [Code] , rtrim(ss_name) + '~' + rtrim(ss_cd) as [Name]  ";
                strSQL = strSQL + " from Securities where " + strWhere + " and ss_name <> ''";
            }
            else
            {
                strSQL = "select distinct rtrim(pm_assetcd) + '~' + rtrim(pm_assetcd)  as [Code] , rtrim(pm_assetcd) + '~' + rtrim(pm_assetcd) as [Name]  from product_master  where pm_assetcd like '" + criteria + "%'";
            }
            LibraryModel mylib = new LibraryModel();
            List<ClientMasterModel> ulist = new List<ClientMasterModel>();
            DataTable dt = mylib.OpenDataTable(strSQL);
            ulist = dt.AsEnumerable()
            .Select(row => new ClientMasterModel
            {
                ClientCd = row.Field<string>("Code"),
                ClientName = row.Field<string>("Name"),
            }).ToList();

            return ulist;
        }

        public IEnumerable<ClientMasterModel> GetClientMasterWithPan(string criteria)
        {
            UtilityModel myutil = new UtilityModel();
            string strWhere = "";
            string strSQL = "";
            strWhere = " and (cm_panno like '" + criteria + "%' or cm_cd like '" + criteria + "%') ";
            strSQL = "select top 20 rtrim(cm_cd) + '~' + rtrim(cm_panno) + '~' + rtrim(cm_name) as cm_cd, rtrim(cm_cd) + '~' + rtrim(cm_panno) + '~' + rtrim(cm_name) as cm_name " +
                            " From Client_master cm " +
                            " Where exists " + myutil.LoginAccess("cm.cm_cd") + strWhere;
            LibraryModel mylib = new LibraryModel();
            List<ClientMasterModel> ulist = new List<ClientMasterModel>();
            DataTable dt = mylib.OpenDataTable(strSQL);
            ulist = dt.AsEnumerable()
            .Select(row => new ClientMasterModel
            {
                ClientCd = row.Field<string>("cm_cd"),
                ClientName = row.Field<string>("cm_name"),
            }).ToList();

            return ulist;
        }
        public IEnumerable<ClientMasterModel> GetDPServiceMaster(string criteria, string SearchBy)
        {
            UtilityDBModel mydbutil = new UtilityDBModel();
            UtilityModel myutil = new UtilityModel();
            LibraryModel mylib = new LibraryModel();
            List<ClientMasterModel> ulist = new List<ClientMasterModel>();
            string strWhere = "";
            string strSQL = "";
            if (SearchBy == "")
            {
                strWhere = " (da_name like '" + criteria + "%' or da_actno like '" + criteria + "%' or da_clientcd like '" + criteria + "%') AND da_status = 'A'and left(da_dpid,2) not in ('IN')";
                strSQL = "select top 20  (case left(da_dpid,2) When 'IN' Then da_dpid else '' end + Rtrim(da_name) + '~' +  Rtrim(da_actno))+ '~' + Rtrim(da_clientcd) as  cm_name ,case left(da_dpid,2) When 'IN' Then da_dpid else '' end + da_actno as cm_cd  from DematAct  " +
                                " Where " + strWhere + " and exists " + myutil.LoginAccess("da_clientcd");

                DataTable dt = mylib.OpenDataTable(strSQL);
                ulist = dt.AsEnumerable()

                .Select(row => new ClientMasterModel
                {
                    ClientCd = row.Field<string>("cm_cd").Trim(),
                    ClientName = row.Field<string>("cm_name").Trim(),
                }).ToList();

            }
            else if (SearchBy == "BOId")
            {
                strWhere = " (da_name like '" + criteria + "%' or da_actno like '" + criteria + "%' or da_clientcd like '" + criteria + "%') AND da_status = 'A' and left(da_dpid,2) not in ('IN')";
                strSQL = "select top 20  (case left(da_dpid,2) When 'IN' Then da_dpid else '' end + Rtrim(da_name) + '~' +  Rtrim(da_actno))+ '~' + Rtrim(da_clientcd) as  cm_name ,case left(da_dpid,2) When 'IN' Then da_dpid else '' end + da_actno as cm_cd  from DematAct  " +
                                " Where " + strWhere + " and exists " + myutil.LoginAccess("da_clientcd");


                DataTable dt = mylib.OpenDataTable(strSQL);
                ulist = dt.AsEnumerable()
                .Select(row => new ClientMasterModel
                {
                    ClientCd = row.Field<string>("cm_cd").Trim(),
                    ClientName = row.Field<string>("cm_name").Trim(),
                }).ToList();
            }

            return ulist;
        }
        public IEnumerable<ClientMasterModel> GetDPServiceCrossMaster(string criteria, string SearchBy)
        {
            UtilityDBModel mydbutil = new UtilityDBModel();
            UtilityModel myutil = new UtilityModel();
            LibraryModel mylib = new LibraryModel();
            List<ClientMasterModel> ulist = new List<ClientMasterModel>();
            string strWhere = "";
            string strSQL = "";
            SqlConnection SQLConcros = mydbutil.crostemp_conn("Cross");
            if (SQLConcros.State == ConnectionState.Closed)
            {
                SQLConcros.Open();
            }
            if (SearchBy == "BOId")
            {
                strWhere = " (cm_name like '" + criteria + "%' or cm_cd like '" + criteria + "%' or cm_blsavingcd like '" + criteria + "%') ";
                strSQL = "select top 20 rtrim(cm_name) + '~' + rtrim(cm_cd)  as cm_cd,rtrim(cm_name) + '~' + rtrim(cm_cd) as cm_name" +
                                " From Client_master" +
                                " Where " + strWhere;



                DataTable dt = mylib.OpenDataTable(strSQL, SQLConcros);
                ulist = dt.AsEnumerable()
                .Select(row => new ClientMasterModel
                {
                    ClientCd = row.Field<string>("cm_cd").Trim(),
                    ClientName = row.Field<string>("cm_name").Trim(),
                }).ToList();
            }
            return ulist;
        }

        public IEnumerable<ClientMasterModel> GetBSENSEISINMaster(string criteria, string RdBSE, string RdISIN)
        {
            UtilityDBModel mydbutil = new UtilityDBModel();
            UtilityModel myutil = new UtilityModel();
            LibraryModel mylib = new LibraryModel();
            List<ClientMasterModel> ulist = new List<ClientMasterModel>();
            string strWhere = "";
            string strSQL = "";
            if (RdISIN == "T")
            {

                SqlConnection SQLConcros = mydbutil.crostemp_conn("Cross");
                if (SQLConcros != null)
                {
                    if (SQLConcros.State == ConnectionState.Closed)
                    {
                        SQLConcros.Open();
                    }

                    strWhere = " (sc_isincode like '" + criteria + "%' or sc_company_name like '" + criteria + "%') ";
                    strSQL = "select top 20 rtrim(sc_isincode) + '~' + rtrim(sc_company_name)  as cm_cd,rtrim(sc_isincode) + '~' + rtrim(sc_company_name) as cm_name" +
                                    " From security" +
                                    " Where " + strWhere;



                    DataTable dt = mylib.OpenDataTable(strSQL, SQLConcros);

                    //DataTable dt = mylib.OpenDataTable(strSQL);
                    ulist = dt.AsEnumerable()
                    .Select(row => new ClientMasterModel
                    {
                        ClientCd = row.Field<string>("cm_cd").Trim(),
                        ClientName = row.Field<string>("cm_name").Trim(),
                    }).ToList();
                }

                else
                {
                    SqlConnection SQLConEstro = mydbutil.crostemp_conn("Estro");
                    if (SQLConEstro.State == ConnectionState.Closed)
                    {
                        SQLConEstro.Open();
                    }

                    strWhere = " (sc_isincode like '" + criteria + "%' or sc_company_name like '" + criteria + "%') ";
                    strSQL = "select top 20 rtrim(sc_isincode) + '~' + rtrim(sc_company_name)  as cm_cd,rtrim(sc_isincode) + '~' + rtrim(sc_company_name) as cm_name" +
                                    " From security" +
                                    " Where " + strWhere;



                    DataTable dt = mylib.OpenDataTable(strSQL, SQLConEstro);

                    //DataTable dt = mylib.OpenDataTable(strSQL);
                    ulist = dt.AsEnumerable()
                    .Select(row => new ClientMasterModel
                    {
                        ClientCd = row.Field<string>("cm_cd").Trim(),
                        ClientName = row.Field<string>("cm_name").Trim(),
                    }).ToList();
                }

            }

            else
            {

                strWhere = " (im_isin like '" + criteria + "%' or ss_cd like '" + criteria + "%' or ss_nsymbol like '" + criteria + "%') AND ss_cd= im_scripcd";
                strSQL = "select top 20  rtrim(im_isin) + '~' + rtrim(ss_cd)+ '~' + rtrim(ss_nsymbol)  as cm_cd,rtrim(im_isin) + '~' + rtrim(ss_cd)+ '~' + rtrim(ss_nsymbol) as cm_name  from securities,isin  " +
                                " Where " + strWhere;

                DataTable dt = mylib.OpenDataTable(strSQL);
                ulist = dt.AsEnumerable()

                .Select(row => new ClientMasterModel
                {
                    ClientCd = row.Field<string>("cm_cd").Trim(),
                    ClientName = row.Field<string>("cm_name").Trim(),
                }).ToList();

            }
                return ulist;
            }

        
    }
    public class modReceiptPayment : ConnectionModel
    {
        public bool blnCount;
        public bool blnSum;
        public bool blnDashBoardGraph;
        public string strFlag;

        public modReceiptPayment()
        {
        }

        public modReceiptPayment(bool _blnCount = false, bool _blnSum = false)
        {
            this.blnCount = _blnCount;
            this.blnSum = _blnSum;
        }

        public modReceiptPayment(string _strFlag)
        {
            this.strFlag = _strFlag;
        }

        public IEnumerable<JsonComboModel> FillMICR(string Code)
        {
            LibraryModel mylib = new LibraryModel();
            bool blnifsc = false;

            if (Convert.ToInt32(mylib.fnFireQuery("sysobjects a , syscolumns b", "count(0)", "a.id = b.id and b.name = 'ba_ifsccode' and a.name", "Bankact", true)) > 0)
            {
                blnifsc = true;
            }


            if (blnifsc == false)
            {
                strSQL = "select 'Select' MICR, 'Select' ba_micr union all select distinct (ba_micr) MICR, ba_micr  MICR from bankact where ba_clientcd='" + Code + "'";
                List<JsonComboModel> ulist = new List<JsonComboModel>();
                DataTable dtRMS1 = mylib.OpenDataTable(strSQL);

                ulist = dtRMS1.AsEnumerable()
          .Select(row => new JsonComboModel
          {
              Display = row.Field<string>("MICR").Trim(),
              Value = row.Field<string>("MICR").Trim(),
          }).ToList();
                return ulist;
            }
            else
            {
                strSQL = "select 'Select' MICR, 'Select' ba_micr,'Select' IFCS  union all select distinct (ba_micr) MICR, ba_micr ,CASE WHEN ba_ifsccode!='' THEN (ba_micr +'/'+ ba_ifsccode) ELSE (ba_micr) END IFSC from bankact where ba_clientcd='" + Code + "'";
                List<JsonComboModel> ulist = new List<JsonComboModel>();
                DataTable dtRMS1 = mylib.OpenDataTable(strSQL);

                ulist = dtRMS1.AsEnumerable()
          .Select(row => new JsonComboModel
          {
              Display = row.Field<string>("IFCS").Trim(),
              Value = row.Field<string>("MICR").Trim(),
          }).ToList();
                return ulist;
            }

        }
        //FillBankName
        public IEnumerable<JsonComboModel> FillBankName(string Micr)
        {

           string[] strvalue = Micr.Split('/');

            if (strvalue != null)
            {

                if (strvalue.Length == 1)
                { strSQL = "select distinct bk_name  from bank_master where bk_micr='" + strvalue[0] + "'"; }
                else
                { strSQL = "select distinct bk_name  from bank_master where bk_IFCCode='" + strvalue[1] + "' and bk_micr='" + strvalue[0] + "'"; }


            }

            LibraryModel mylib = new LibraryModel();

            List<JsonComboModel> ulist = new List<JsonComboModel>();

            DataTable dtRMS = mylib.OpenDataTable(strSQL);
            ulist = dtRMS.AsEnumerable()
            .Select(row => new JsonComboModel
            {
                Display = row.Field<string>("bk_name").Trim(),
                Value = row.Field<string>("bk_name").Trim(),
            }).ToList();
            return ulist;
        }

        public IEnumerable<JsonComboModel> FillExchangeSegment()
        {
            UtilityDBModel mydbutil = new UtilityDBModel();
            SqlConnection SQLConnComex = mydbutil.commexTemp_conn("Commex");
            LibraryModel mylib = new LibraryModel();
            string StrSql = "";
            StrSql = "Select CES_Cd,CES_Exchange+'/'+CES_Segment ExchSeg from CompanyExchangeSegments Where CES_CompanyCd = '" + HttpContext.Current.Session["CompanyCode"] + "' and CES_CompanyCd = '" + HttpContext.Current.Session["CompanyCode"] + "'";
            if (SQLConnComex != null)
            {
                StrSql += " Union all  ";
                StrSql += " Select left(CES_Cd,2)+'X',CES_Exchange+'/'+'Comm' ExchSeg from " + "[" + SQLConnComex.DataSource + "]" + "." + SQLConnComex.Database + ".dbo.CompanyExchangeSegments ";
                //StrSql += " Select left(CES_Cd,2)+'X',CES_Exchange+'/'+'Comm' ExchSeg from " + SQLConnComex.Database + ".dbo.CompanyExchangeSegments ";
            }
            List<JsonComboModel> ulist = new List<JsonComboModel>();

            DataTable dtRMS = mylib.OpenDataTable(StrSql);
            ulist = dtRMS.AsEnumerable()
            .Select(row => new JsonComboModel
            {
                Display = row.Field<string>("ExchSeg").Trim(),
                Value = row.Field<string>("CES_Cd").Trim(),
            }).ToList();
            return ulist;
        }

        public string DeleteReceipt(ReceiptTableModel recpay)

        {
            string t1 = recpay.rc_dpid;
            double t2 = recpay.rc_srno;
            string t3 = recpay.rc_receiptdt;

            UtilityDBModel mydbutil = new UtilityDBModel();
            LibraryModel mylib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();

            string strsql = "insert into Account_audit (au_documenttype,au_edflag ,";
            strsql = strsql + " au_dpid,au_accyear,au_debitflag,";
            strsql = strsql + " au_srno,au_entryno,au_field,au_oldvalue,";
            strsql = strsql + " au_newvalue,au_voucherno,au_clientcd,";
            strsql = strsql + " au_receiptdt,au_amount,au_particular,au_bankclientcd,au_cleareddt,";
            strsql = strsql + " au_chequeno,au_micr,au_commondt,au_common,mkrdt,";
            strsql = strsql + " mkrid,mkrtm,au_computername,mkridold,mkrdtold,mkrtmold)";
            strsql = strsql + " values ('R','D','" + recpay.rc_dpid + "',  '" + recpay.rc_accyear + "', 'C', ";
            strsql = strsql + "'" + recpay.rc_srno + "','" + recpay.rc_entryno + "','','',";
            strsql = strsql + "'','','" + recpay.rc_clientcd + "',";
            strsql = strsql + "'" + myutil.dtos(recpay.rc_receiptdt) + "'," + (-1) * (recpay.rc_amount) + ",'" + recpay.rc_particular + "','" + recpay.rc_bankclientcd + "','" + recpay.rc_cleareddt + "',";
            strsql = strsql + "'" + recpay.rc_chequeno + "','" + recpay.rc_micr + "','" + recpay.rc_commondt + "','" + recpay.rc_common + "','" + myutil.gstrDBToday() + "',";
            strsql = strsql + "'" + myutil.gstrUserCd() + "','" + myutil.fnGetTime() + "','" + myutil.gstrPCNname() + " ','" + recpay.mkrid + "','" + recpay.mkrdt + "','')";

            mylib.ExecSQL(strsql);


            strsql = "delete from Receipts where rc_dpid='" + recpay.rc_dpid + "' and rc_debitflag='C' and rc_accyear='" + myutil.GetAccyearFromDate(recpay.rc_receiptdt) + "' and rc_srno='" + recpay.rc_srno + "'";
            mylib.ExecSQL(strsql);

            strsql = "delete from Ledger where ld_dpid = '" + recpay.rc_dpid + "' and ld_documenttype = 'R' and ld_accyear = '" + myutil.GetAccyearFromDate(recpay.rc_receiptdt) + "' and ld_documentno = '" + recpay.rc_srno + "'";
            mylib.ExecSQL(strsql);

            SqlConnection ObjSlipScanConn = new SqlConnection();
            ObjSlipScanConn = SlipScanTemp_conn("Tplusimages");

            if (ObjSlipScanConn != null)
            {
                if (ObjSlipScanConn.State == ConnectionState.Closed)
                {
                    ObjSlipScanConn.Open();
                }
                strsql = "delete from Receipts_images where se_dpid='" + recpay.rc_dpid + "' and se_accyear='" + myutil.GetAccyearFromDate(recpay.rc_receiptdt) + "' and se_srno='" + recpay.rc_srno + "'";
                mylib.ExecSQL(strsql, ObjSlipScanConn);
            }
            return "Deleted successfully";
        }
        public IEnumerable<JsonComboModel> FillBankAcNo(string Code, string MICR)
        {
            LibraryModel mylib = new LibraryModel();
            string[] arr = MICR.Split('/');

            if (arr[0] != "")
            {
                strSQL = "select 'Select' AC, 'Select' ba_actno union all select distinct ba_actno AC,  ba_actno from bankact where ba_clientcd='" + Code.Trim() + "' and ba_micr='" + arr[0] + "' ";
            }
            else

            {
                strSQL = "select 'Select' AC, 'Select' ba_actno union all select distinct ba_actno AC,  ba_actno from bankact where ba_clientcd='" + Code.Trim() + "' and ba_micr='" + arr[0] + " ' and ba_ifsccode ='" + arr[1] + "'";

            }

            //strSQL = "select 'Select' MICR, 'Select' ba_micr union all select distinct ba_micr MICR, ba_micr from bankact where ba_clientcd='" + Code + "'";
            List<JsonComboModel> ulist = new List<JsonComboModel>();

            DataTable dtRMS = mylib.OpenDataTable(strSQL);
            ulist = dtRMS.AsEnumerable()
            .Select(row => new JsonComboModel
            {
                Display = row.Field<string>("AC").Trim(),
                Value = row.Field<string>("ba_actno").Trim(),
            }).ToList();
            return ulist;
        }

        public IEnumerable<JsonComboModel> FillBankDetails(string strDPID)
        {
            strDPID = Strings.Right(strDPID, 2);
            UtilityModel myutil = new UtilityModel();
            LibraryModel mylib = new LibraryModel();
            strSQL = "select rtrim(cm_cd) cm_cd, rtrim(cm_name) cm_name from Client_master x, Schedule where cm_schedule= sc_cd and sc_bankflag='B' " + myutil.newline();
            strSQL += " and (cm_dpid='' or cm_dpid='" + HttpContext.Current.Session["CompanyCode"] + "') and cm_freezeyn='N'" + myutil.newline();
            strSQL += " and ( cm_occup='' or cm_occup like '%" + strDPID + "%') " + myutil.newline();

            string strBanks = "";
            string strGroup = "select LA_grouping from LoginAccess Where LA_UserId ='" + HttpContext.Current.User.Identity.Name + "' and LA_grouping in ('A','B') Order by LA_grouping";
            DataTable dtLogin = mylib.OpenDataTable(strGroup);
            if (dtLogin.Rows.Count > 0)
            {
                string strQuery = "";
                if (dtLogin.Rows[0][0].ToString().Trim() == "A")
                {
                    strQuery = "select isNull(bm_server,'') from Branch_master Where isNull(bm_server,'') <> '' Order by isNull(bm_server,'')";
                }
                else
                {
                    strQuery = "select isNull(bm_server,'') from Branch_master Where bm_Branchcd in (select LA_GrCode from LoginAccess Where LA_UserId ='" + HttpContext.Current.User.Identity.Name + "' and LA_grouping = 'B') Order by isNull(bm_server,'') ";
                }
                DataTable dtBranch = mylib.OpenDataTable(strQuery);
                if (dtBranch.Rows.Count > 0)
                {
                    strBanks = "";
                    if (dtBranch.Rows[0][0].ToString().Trim() == "")
                    {
                    }
                    else
                    {
                        for (int intBranch = 0; intBranch < dtBranch.Rows.Count; intBranch++)
                        {
                            for (int items = 0; items < dtBranch.Rows[intBranch][0].ToString().Trim().Split(',').Length; items++)
                            {
                                strBanks += "'" + dtBranch.Rows[intBranch][0].ToString().Trim().Split(',')[items] + "',";
                            }
                        }
                    }
                    if (strBanks.Length > 0)
                    {
                        strBanks = " and cm_cd in (" + Strings.Left(strBanks, strBanks.Length - 1) + ")";
                    }
                }
            }
            strSQL += strBanks;

            List<JsonComboModel> ulist = new List<JsonComboModel>();

            DataTable dtRMS = mylib.OpenDataTable(strSQL);
            ulist = dtRMS.AsEnumerable()
            .Select(row => new JsonComboModel
            {
                Display = row.Field<string>("cm_name"),
                Value = row.Field<string>("cm_cd"),
            }).ToList();
            return ulist;
        }

        public IEnumerable<CodeNameAmountModel> GetDashBoardRecPayChart()
        {
            UtilityModel myutil = new UtilityModel();
            strSQL = "	Select Top 10  ld_clientcd Code, cm_name Name, Convert(Decimal(15,2), Abs(sum(ld_amount)))  Amount" + myutil.newline() +
                        "	from Ledger, Client_master" + myutil.newline() +
                        "	Where ld_clientcd=cm_cd and cm_schedule=49843750 and cm_type <> 'C' " + myutil.newline() +
                        "	and RIGHT(ld_dpid,1) <> 'X'" + myutil.newline() +
                        "  and exists " + myutil.LoginAccess("ld_clientcd") +
                        "	Group by ld_clientcd, cm_name" + myutil.newline() +
                        "	having SUM(ld_amount) " + (strFlag == "D" ? ">" : "<") + " 0" + myutil.newline() +
                        "  Order By Convert(Decimal(15,2), Abs(sum(ld_amount))) desc";
            List<CodeNameAmountModel> ulist = new List<CodeNameAmountModel>();
            LibraryModel mylib = new LibraryModel();
            DataTable dtRMS = mylib.OpenDataTable(strSQL);
            ulist = dtRMS.AsEnumerable()
            .Select(row => new CodeNameAmountModel
            {
                Code = row.Field<string>("Code"),
                Name = row.Field<string>("Name"),
                Amt = row.Field<decimal>("Amount")
            }).ToList();
            return ulist;
        }

        public string SaveReceiptPayment(ReceiptTableModel recpay)
        {
            try
            {
                UtilityModel myutil = new UtilityModel();
                LibraryModel myLib = new LibraryModel();
                long lngSrno = 1;
                string msg = "";
                using (SqlConnection curCon = new SqlConnection(connectionstring))
                {
                    curCon.Open();
                    string strComp = myLib.GetSysPARM("COMPWISESRNO", curCon);
                    recpay.rc_receiptdt = myutil.dtos(recpay.rc_receiptdt);
                    if (recpay.rc_cleareddt != "")
                    {
                        recpay.rc_cleareddt = myutil.dtos(recpay.rc_cleareddt);
                    }
                    recpay.mkrdt = myutil.gstrDBToday();
                    recpay.mkrid = myutil.gstrUserCd();
                    recpay.mkrtm = myutil.GetTimeNow();
                    recpay.rc_accyear = myutil.GetAccyearFromDate(recpay.rc_receiptdt);
                    recpay.rc_amount = recpay.rc_amount * (recpay.rc_debitflag == "C" ? -1 : 1);

                    if (recpay.mode == "ADD")
                    {
                        if (strComp.Trim() == "Y")
                        {
                            strSQL = "select isnull(max(rc_srno),0)+1 as maxsrno from Receipts where rc_debitflag ='C' and rc_accyear='" + recpay.rc_accyear + "' and left(rc_dpid,1)='" + Strings.Left(recpay.rc_dpid, 1) + "'";
                        }
                        else
                        {
                            strSQL = "select isnull(max(rc_srno),0)+1 as maxsrno from Receipts where rc_debitflag ='C' and rc_accyear='" + recpay.rc_accyear + "' and left(rc_dpid,1)='" + Strings.Left(recpay.rc_dpid, 1) + "'";
                        }
                        DataTable dtSr = myLib.OpenDataTable(strSQL, curCon);
                        if (dtSr.Rows.Count > 0)
                        {
                            lngSrno = long.Parse(dtSr.Rows[0][0].ToString());
                        }

                        if (lngSrno == 0)
                        {
                            lngSrno = 1;
                        }
                    }
                    else
                    {
                        lngSrno = Convert.ToInt64(recpay.rc_srno);
                    }

                    strSQL = "select count(0) from Auth_accounts where aa_documenttype='R'  and aa_amount <= " + Math.Abs(recpay.rc_amount);
                    int intCnt = myLib.GetScalarValueInt(strSQL, curCon);
                    if (intCnt > 0)
                    {
                        recpay.rc_status = "N";
                    }
                    else
                    {
                        recpay.rc_status = "Y";
                        recpay.rc_authremarks = myutil.gstrPCNname();
                    }
                    string[] arr = recpay.rc_micr.Split('/');

                    if (recpay.mode == "EDIT")
                    {
                        strSQL = "Update Receipts Set rc_voucherno = '" + recpay.rc_voucherno + "',";
                        strSQL += " rc_clientcd = '" + recpay.rc_clientcd + "', ";
                        strSQL += " rc_receiptdt = '" + recpay.rc_receiptdt + "', ";
                        strSQL += " rc_amount = " + recpay.rc_amount + " , ";
                        strSQL += " rc_particular = '" + recpay.rc_particular + "', ";
                        strSQL += " rc_bankclientcd = '" + recpay.rc_bankclientcd + "',  ";
                        strSQL += " rc_cleareddt = '" + recpay.rc_cleareddt + "', ";
                        strSQL += " rc_entryno = " + recpay.rc_entryno + " , ";
                        strSQL += " rc_chequeno = '" + recpay.rc_chequeno + "' , ";
                        strSQL += " rc_micr = '" + arr[0] + "' , ";
                        strSQL += " mkrid = '" + recpay.mkrid + "' , ";
                        strSQL += " mkrdt = '" + recpay.mkrdt + "' , ";
                        strSQL += " rc_authid1 = '" + recpay.rc_authid1 + "'  , ";
                        strSQL += " rc_authid2 = '" + recpay.rc_authid2 + "'  , ";
                        strSQL += " rc_authdt1 = '" + recpay.rc_authdt1 + "'  , ";
                        strSQL += " rc_authdt2 = '" + recpay.rc_authdt2 + "' , ";
                        strSQL += " rc_status = '" + recpay.rc_status + "'  , ";
                        strSQL += " rc_authremarks = '" + recpay.rc_authremarks + "'  , ";
                        strSQL += " rc_commondt = '" + recpay.rc_commondt + "'  , ";
                        strSQL += " rc_common = '" + recpay.rc_common + "' , ";
                        strSQL += " rc_BankActNo = '" + recpay.rc_BankActNo + "'  , ";
                        strSQL += " rc_batchno = " + recpay.rc_batchno + " , ";
                        strSQL += " mkrtm = '" + recpay.mkrtm + "' , ";
                        strSQL += " rc_authtm1 = '" + recpay.rc_authtm1 + "' , ";
                        strSQL += " rc_authtm2 = '" + recpay.rc_authtm2 + "' , ";
                        strSQL += " rc_costcenter = '" + recpay.rc_costcenter + "' ";
                        strSQL += " Where rc_srno = " + lngSrno;
                        strSQL += " and rc_debitflag  = '" + recpay.rc_debitflag + "'";
                        strSQL += " and rc_accyear = '" + recpay.rc_accyear + "' ";
                        strSQL += " and rc_dpid = '" + recpay.rc_dpid + "' ";
                        myLib.ExecSQL(strSQL, curCon);
                    }
                    else
                    {




                        strSQL = "Insert Into Receipts " + myutil.newline() +
                                " Select " + lngSrno + " rc_srno,  '" + recpay.rc_voucherno + "' rc_voucherno, '" + recpay.rc_clientcd + "' rc_clientcd,   '" + recpay.rc_receiptdt + "' rc_receiptdt,   " + myutil.newline() +
                                recpay.rc_amount + " rc_amount, '" + recpay.rc_debitflag + "' rc_debitflag,  '" + recpay.rc_particular + "' rc_particular, '" + recpay.rc_bankclientcd + "' rc_bankclientcd, " + myutil.newline() +
                                " '" + recpay.rc_cleareddt + "' rc_cleareddt, " + recpay.rc_entryno + " rc_entryno, '" + recpay.rc_chequeno + "' rc_chequeno, '" + arr[0] + "' rc_micr, " + myutil.newline() +
                                " '" + recpay.mkrid + "' mkrid, '" + recpay.mkrdt + "' mkrdt, '" + recpay.rc_dpid + "' rc_dpid, '" + recpay.rc_accyear + "' rc_accyear," + myutil.newline() +
                                " '" + recpay.rc_authid1 + "' rc_authid1, '" + recpay.rc_authid2 + "' rc_authid2, '" + recpay.rc_authdt1 + "' rc_authdt1, '" + recpay.rc_authdt2 + "' rc_authdt2," + myutil.newline() +
                                " '" + recpay.rc_status + "' rc_status, '" + recpay.rc_authremarks + "' rc_authremarks,'" + recpay.rc_commondt + "' rc_commondt,'" + recpay.rc_common + "' rc_common,  " + myutil.newline() +
                                " '" + recpay.rc_BankActNo + "' rc_BankActNo, " + recpay.rc_batchno + " rc_batchno, '" + recpay.mkrtm + "' mkrtm, '" + recpay.rc_authtm1 + "' rc_authtm1, " + myutil.newline() +
                                " '" + recpay.rc_authtm2 + "'  rc_authtm2, '" + recpay.rc_costcenter + "' rc_costcenter";
                        myLib.ExecSQL(strSQL, curCon);
                    }

                    if (intCnt == 0)
                    {
                        if (recpay.mode == "EDIT")
                        {
                            //strSQL = "delete from Receipts where rc_dpid='" + recpay.rc_dpid + "' and rc_debitflag='C' and rc_accyear='" +recpay.rc_accyear+"' and rc_srno=" + lngSrno;

                            //myLib.ExecSQL(strSQL, curCon);

                            strSQL = "delete from Ledger where ld_dpid='" + recpay.rc_dpid + "' and ld_documenttype='R' " + myutil.newline() +
                                    " and ld_accyear='" + recpay.rc_accyear + "' and ld_documentno='" + lngSrno;
                            myLib.ExecSQL(strSQL, curCon);
                        }

                        strSQL = "Insert into Ledger " + myutil.newline() +
                                " select '" + recpay.rc_clientcd + "' ld_clientcd, '" + recpay.rc_receiptdt + "' ld_dt, " + recpay.rc_amount + " ld_amount, " + myutil.newline() +
                                " '" + recpay.rc_particular + "' ld_particular, '" + recpay.rc_chequeno + "' ld_chequeno, '" + recpay.rc_debitflag + "' ld_debitflag," + myutil.newline() +
                                " 'R' ld_documenttype, '" + lngSrno + "' ld_documentno,0 ld_entryno,'" + recpay.rc_costcenter + "' ld_costcenter, " + myutil.newline() +
                                " '" + myutil.gstrUserCd() + "' mkrid, '" + myutil.gstrDBToday() + "' mkrdt, '" + recpay.rc_accyear + "' ld_accyear," + myutil.newline() +
                                " '" + recpay.rc_dpid + "' ld_dpid, '' ld_commondt,'' ld_common";
                        myLib.ExecSQL(strSQL, curCon);
                    }



                    if (recpay.ReceiptImage != null)
                    {
                        LibraryModel mylib2 = new LibraryModel();
                        strSQL = "select Op_product from other_products where op_product='Tplusimages' and OP_Status='A'";
                        DataTable dtCheck = mylib2.OpenDataTable(strSQL);
                        if (dtCheck.Rows.Count > 0)
                        {
                            SqlConnection ObjSlipScanConn = new SqlConnection();
                            ObjSlipScanConn = SlipScanTemp_conn("Tplusimages");

                            if (ObjSlipScanConn == null)
                            {
                                msg = "Unable to Connect TplusImages";
                            }
                            else if (ObjSlipScanConn != null)
                            {
                                if (ObjSlipScanConn.State == ConnectionState.Closed)
                                {
                                    ObjSlipScanConn.Open();
                                }

                                SqlCommand ObjCommand1 = new SqlCommand("select count(*) from UploadedImages", ObjSlipScanConn);
                                int NewImageID = 1;
                                int intcon = (int)ObjCommand1.ExecuteNonQuery();
                                if ((int)ObjCommand1.ExecuteNonQuery() > 0)
                                {
                                    ObjCommand1.CommandText = "select max(ImageID) from UploadedImages";
                                    NewImageID = (int)ObjCommand1.ExecuteScalar() + 1;
                                }

                                strSQL = "insert into Receipts_Images ";
                                strSQL += " values(" + lngSrno + ",'" + recpay.rc_dpid + "', @ImageData, ";
                                strSQL += " 1 ,'" + myutil.gstrUserCd() + "','" + myutil.gstrDBToday() + "','" + myutil.GetAccyearFromDate(recpay.rc_receiptdt) + "')";
                                ObjCommand1.CommandText = strSQL;

                                SqlParameter Objparameter1 = new SqlParameter();
                                Objparameter1.ParameterName = "@ImageData";
                                Objparameter1.SqlDbType = SqlDbType.Image;
                                Objparameter1.Value = recpay.ReceiptImage;

                                ObjCommand1.Parameters.Add(Objparameter1);
                                ObjCommand1.ExecuteNonQuery();

                                ObjCommand1.Dispose();
                            }
                        }
                    }
                }

                if (recpay.mode == "ADD")
                {
                    return "Receipt Entry saved as Sr No : " + lngSrno.ToString();
                }
                else
                {
                    return "Receipt Entry updated as Sr No : " + lngSrno.ToString();
                }
            }
            catch (Exception ex)
            {
                string strex = ex.Message;
                throw;
            }
        }


        public void EditReceiptPayment(ReceiptTableModel recpay)
        {



        }

        public void DeleteReceiptPayment(int intSrno)
        {



        }

        public ReceiptTableModel FetchReceiptPayment(int intSrno, string Dpid, string Date)
        {
            ReceiptTableModel rec = new ReceiptTableModel();
            UtilityModel myutil = new UtilityModel();
            LibraryModel mylib = new LibraryModel();
            string strDt = myutil.dtos(Date);
            string AccYear = myutil.GetAccyearFromDate(Date);

            strSQL = "select rc_clientcd, C2.cm_name as cm_name , rc_particular, rc_bankclientcd, rc_voucherno , Case when isNull(rc_cleareddt,'') = '' then '' else Convert(char(10), Convert(datetime, rc_cleareddt) , 103) end as rc_cleareddt, Convert(char(10), Convert(datetime, rc_receiptdt) , 103) as rc_receiptdt, case when isnull(sum(ld_amount),0) <0 then str(abs(isnull(sum(ld_amount),0))) + ' Cr' else str(isnull(sum(ld_amount),0)) +' Dr' end  as cm_balance, abs(rc_amount) as rc_amount ,rc_chequeno, rc_micr, rc_entryno, rc_status, rc_authid1 , rc_common,rc_BankActNo, isnull (rc_batchno,0) as rc_batchno, " + myutil.newline() +
                    " rc_BankActNo " + myutil.newline() +
                    " from Receipts,Client_master C2 left join Ledger on (ld_clientcd= C2.cm_cd) where C2.cm_cd= rc_clientcd and rc_dpid='" + Dpid + "' and rc_accyear='" + myutil.GetAccyearFromDate(Date) + "' and rc_debitflag='C' and rc_srno=" + intSrno + myutil.newline() +
                    " and exists " + myutil.LoginAccess("rc_clientcd") +
                    " group by rc_clientcd, C2.cm_name, rc_particular, rc_bankclientcd, rc_voucherno , rc_cleareddt,rc_receiptdt,  abs(rc_amount), rc_chequeno,rc_micr, rc_entryno , rc_status, rc_authid1 ,rc_common,rc_BankActNo,rc_batchno, " + myutil.newline() +
                    " rc_BankActNo " + myutil.newline() +
                    " order by rc_entryno";
            DataTable dtRec = mylib.OpenDataTable(strSQL);
            if (dtRec.Rows.Count > 0)
            {
                DataRow dr = dtRec.Rows[0];
                rec.rc_clientcd = dr["rc_clientcd"].ToString().Trim();
                rec.rc_micr = dr["rc_micr"].ToString().Trim();

                modReceiptPayment rec1 = new modReceiptPayment();
                var resultmicr = rec1.FillMICR(rec.rc_clientcd);
                var resultAc = rec1.FillBankAcNo(rec.rc_clientcd, rec.rc_micr);
                var resultbankname = rec1.FillBankName(rec.rc_micr);


                rec.mode = "FETCH";
                rec.rc_srno = intSrno;
                rec.rc_dpid = Dpid;
                rec.cm_name = dr["cm_name"].ToString().Trim();
                rec.rc_particular = dr["rc_particular"].ToString().Trim();
                rec.rc_bankclientcd = dr["rc_bankclientcd"].ToString().Trim();
                rec.rc_voucherno = dr["rc_voucherno"].ToString().Trim();
                rec.rc_cleareddt = dr["rc_cleareddt"].ToString().Trim();
                rec.rc_receiptdt = dr["rc_receiptdt"].ToString().Trim();
                rec.rc_amount = decimal.Parse(dr["rc_amount"].ToString());
                rec.rc_chequeno = dr["rc_chequeno"].ToString().Trim();

                rec.rc_entryno = int.Parse(dr["rc_entryno"].ToString());
                rec.rc_status = dr["rc_status"].ToString().Trim();
                rec.rc_authid1 = dr["rc_authid1"].ToString().Trim();
                rec.rc_common = dr["rc_common"].ToString().Trim();
                rec.rc_batchno = double.Parse(dr["rc_batchno"].ToString());
                rec.rc_BankActNo = dr["rc_BankActNo"].ToString().Trim();
                rec.rc_debitflag = "";
                rec.mkrid = "";
                rec.mkrdt = "";
                rec.rc_accyear = "";
                rec.rc_authid2 = "";
                rec.rc_authdt1 = "";
                rec.rc_authdt2 = "";
                rec.rc_authremarks = "";
                rec.rc_commondt = "";
                rec.mkrtm = "";
                rec.rc_authtm1 = "";
                rec.rc_authtm2 = "";
                rec.rc_costcenter = "";
                rec.GetAllMicr = resultmicr;
                rec.GetAllAc = resultAc;
                rec.GetBankName = resultbankname;

            }
            else
            {
                rec = null;
            }
            return rec;
        }

        public string GetPayableReceivable(string DrCr, bool blnCount = false, string strWhere = "", bool blnTop10 = false, bool blnSum = false)
        {

            UtilityModel myutil = new UtilityModel();
            string newln = Environment.NewLine;
            string strSQL = "";
            if (blnCount)
            {
                strSQL = "select count(0) from" + newln;
                strSQL += "(" + newln;
            }
            else if (blnSum)
            {
                strSQL = "select isnull(Convert(decimal(15,2), sum(Amount)),0) from" + newln;
                strSQL += "(" + newln;
            }
            strSQL += "	Select " + (blnTop10 ? "  Top 10  " : "") + " ld_clientcd Code, cm_name Name, Convert(Decimal(15,2), Abs(sum(ld_amount)))  Amount" + newln;
            strSQL += "	from Ledger, Client_master" + newln;
            strSQL += "	Where ld_clientcd=cm_cd " + newln;
            strSQL += "	and cm_schedule = 49843750" + newln;
            strSQL += "	and RIGHT(ld_dpid,1) <> 'X'" + newln;
            strSQL += strWhere;
            strSQL += " and exists " + myutil.LoginAccess("ld_clientcd");
            strSQL += "	Group by ld_clientcd, cm_name" + newln;
            strSQL += "	having SUM(ld_amount) " + (DrCr == "D" ? "<" : ">") + " 0" + newln;
            //strSQL += "	having SUM(ld_amount) " + (DrCr == "D" ? ">" : "<") + " 0" + newln;
            if (blnCount || blnSum)
            {
                strSQL += ") X" + newln;
            }
            if (blnTop10)
            {
                strSQL += "Order By Convert(Decimal(15,2), Abs(sum(ld_amount))) desc";
            }
            else if (!blnCount && !blnSum)
            {
                strSQL += "Order By Name";
            }
            return strSQL;
        }

        public DashBoardClientCountModel GetDashBoardClient()
        {
            DashBoardClientCountModel dc = new DashBoardClientCountModel()
            {
                Count1 = 0,
                Count2 = 0,
                Count3 = 0,
                Count4 = 0,
                Count5 = 0,
                Sum1 = 0,
                Sum2 = 0,
                Sum3 = 0,
                Sum4 = 0,
                Sum5 = 0,
            };

            LibraryModel mylib = new LibraryModel();

            //Receivable Count
            strSQL = GetPayableReceivable("C", true);
            dc.Count1 = mylib.GetScalarValueInt(strSQL);


            //Receivable Sum
            strSQL = GetPayableReceivable("C", false, "", false, true);
            dc.Sum1 = mylib.GetScalarValueDecimal(strSQL);


            //Payable Count
            strSQL = GetPayableReceivable("D", true);
            dc.Count2 = mylib.GetScalarValueInt(strSQL);


            //Payable Sum
            strSQL = GetPayableReceivable("D", false, "", false, true);
            dc.Sum2 = mylib.GetScalarValueDecimal(strSQL);

            //T5 Clients and Sum
            modRiskManagementSystem rms = new modRiskManagementSystem();
            strSQL = rms.GetT5SQL(true);
            DataTable dt = mylib.OpenDataTable(strSQL);
            if (dt.Rows.Count > 0)
            {
                dc.Count4 = int.Parse(dt.Rows[0]["ClientCnt"].ToString());
                dc.Sum4 = decimal.Parse(dt.Rows[0]["ClientSum"].ToString());
            }


            //Margin Shortfall clients and sum
            modMargin mar = new modMargin();
            dt = mar.GetMarginShortFall(true);
            if (dt.Rows.Count > 0)
            {
                dc.Count5 = int.Parse(dt.Rows[0]["ClientCnt"].ToString());
                dc.Sum5 = decimal.Parse(dt.Rows[0]["ClientSum"].ToString());
            }

            return dc;
        }


        public SqlConnection SlipScanTemp_conn(string strProduct)
        {
            SqlConnection sqlConnTplusImages = null;
            LibraryModel mylib = new LibraryModel();
            strSQL = "select * from other_products where op_status = 'A' AND op_product = '" + strProduct + "'";
            DataTable dtSlip = mylib.OpenDataTable(strSQL);
            if (dtSlip.Rows.Count > 0)
            {
                string strCommex = "Initial Catalog=" + dtSlip.Rows[0]["op_database"].ToString().Trim() + ";Data Source=" + dtSlip.Rows[0]["OP_server"].ToString().Trim() + ";UID=" + dtSlip.Rows[0]["op_user"].ToString().Trim() + ";PWD=" + dtSlip.Rows[0]["op_pwd"].ToString().Trim() + ";Connect Timeout=5000";
                sqlConnTplusImages = new SqlConnection(strCommex);
            }

            return sqlConnTplusImages;
        }

        public IEnumerable<CodeNameAmountModel> GetCodeNameAmount(string xbutton, string xval)
        {
            DataTable dtRecpay = new DataTable();
            if (xbutton == "REC" || xbutton == "PAY")
            {
                string strWhere = "";
                string strSQL = "";
                string strFlag = "";
                bool blnTop10 = (xval == "10");

                if (xbutton == "PAY")
                {
                    strFlag = "D";
                }
                else if (xbutton == "REC")
                {
                    strFlag = "C";
                }

                if (xval == "10")
                {
                    strWhere = "";
                }
                else if (xval == "A")
                {
                    strWhere = " and cm_name like '[ABCD]%' ";
                }
                else if (xval == "E")
                {
                    strWhere = " and cm_name like '[EFGH]%' ";
                }
                else if (xval == "I")
                {
                    strWhere = " and cm_name like '[IJKL]%' ";
                }
                else if (xval == "M")
                {
                    strWhere = " and cm_name like '[MNOP]%' ";
                }
                else if (xval == "Q")
                {
                    strWhere = " and cm_name like '[QRST]%' ";
                }
                else if (xval == "U")
                {
                    strWhere = " and cm_name like '[UVWXYZ]%' ";
                }
                if (xbutton == "PAY" || xbutton == "REC")
                {
                    //Payable
                    strSQL = GetPayableReceivable(strFlag, false, strWhere, blnTop10);
                }
                LibraryModel mylib = new LibraryModel();
                dtRecpay = mylib.OpenDataTable(strSQL);
            }
            else if (xbutton == "T5")
            {
                modRiskManagementSystem rms = new modRiskManagementSystem();
                strSQL = rms.GetT5SQL(false);
                LibraryModel mylib = new LibraryModel();
                dtRecpay = mylib.OpenDataTable(strSQL);
            }
            else if (xbutton == "MS")
            {
                string strWhere = "";
                bool blnTop10 = (xval == "10");

                if (xval == "10")
                {
                    strWhere = "";
                }
                else if (xval == "A")
                {
                    strWhere = " and cm_name like '[ABCD]%' ";
                }
                else if (xval == "E")
                {
                    strWhere = " and cm_name like '[EFGH]%' ";
                }
                else if (xval == "I")
                {
                    strWhere = " and cm_name like '[IJKL]%' ";
                }
                else if (xval == "M")
                {
                    strWhere = " and cm_name like '[MNOP]%' ";
                }
                else if (xval == "Q")
                {
                    strWhere = " and cm_name like '[QRST]%' ";
                }
                else if (xval == "U")
                {
                    strWhere = " and cm_name like '[UVWXYZ]%' ";
                }
                modMargin mar = new modMargin(); ;
                dtRecpay = mar.GetMarginShortFall(false, strWhere, blnTop10);
            }
            List<CodeNameAmountModel> recpay = new List<CodeNameAmountModel>();
            recpay = dtRecpay.AsEnumerable()
            .Select(row => new CodeNameAmountModel
            {
                Code = row.Field<string>("Code"),
                Name = row.Field<string>("Name"),
                Amt = row.Field<decimal>("Amount")
            }).ToList();

            return recpay;
        }

    }
    public class modDemat : ConnectionModel
    {
        public DataTable ProcessRetainHoldingSummary(string Code, bool blnSum)
        {
            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {
                curCon.Open();
                LibraryModel mylib = new LibraryModel(true);

                string Newln = Environment.NewLine;

                strSQL = "select convert(char, convert(datetime, getdate()), 112)";
                DataTable dtDate = mylib.OpenDataTable(strSQL, curCon);
                string strdate = dtDate.Rows[0][0].ToString().Trim();

                string strstat = string.Empty;
                strSQL = "select st_sysvalue from stationary where st_parmcd='DMTCOLLATDP' and st_exchange = 'B' ";
                DataTable dtEn = mylib.OpenDataTable(strSQL, curCon);
                if (dtEn.Rows.Count != 0)
                    strstat = dtEn.Rows[0][0].ToString().Trim();
                char[] ArrSeprator = new char[1];
                ArrSeprator[0] = ',';
                string[] arrstat = strstat.Split(ArrSeprator);
                string strcollat = "( ";
                for (int i = 0; i <= arrstat.Length - 1; i++)
                {
                    strcollat = strcollat + "'" + arrstat[i] + "',";
                }
                strcollat = strcollat + ")";
                strcollat = strcollat.Replace(",)", ")");

                try
                {
                    mylib.ExecSQL("Drop Table #TmpVarMargin", curCon);
                }
                catch (Exception)
                {
                }
                finally
                {
                    strSQL = "Create Table #TmpVarMargin (Tmp_scripcd VarChar(6), Tmp_haricut money )";
                    mylib.ExecSQL(strSQL, curCon);
                }

                strSQL = "Create index #idx_TmpVarMargin_scripcd on #TmpVarMargin (Tmp_scripcd)";
                mylib.ExecSQL(strSQL, curCon);

                strSQL = "insert into #TmpVarMargin select ss_cd , 0 From securities";
                mylib.ExecSQL(strSQL, curCon);


                strSQL = " update #TmpVarMargin set Tmp_haricut = case When lv_BseDt > lv_NseDt Then lv_BseVarMargin else lv_NseVarMargin end from LVarMargin with (nolock) where lv_Scripcd = Tmp_scripcd ";
                mylib.ExecSQL(strSQL, curCon);


                strSQL = "Select em_name from entity_master with (nolock) where len(em_cd)=1 ";
                DataTable dt = mylib.OpenDataTable(strSQL, curCon);
                if (dt.Rows.Count > 0)
                {
                    if (dt.Rows[0][0].ToString().Contains("BP"))
                    {
                        strSQL = "  update #TmpVarMargin set Tmp_haricut = 25.00 where  Tmp_haricut < 25";
                        mylib.ExecSQL(strSQL, curCon);
                    }
                }


                if (blnSum)
                {
                    strSQL = "Select isNull(Convert(decimal(15,2) , Sum(valuation)),0) From (" + Newln +
                            " Select convert(decimal(15,2),(ss_bserate*sum(dm_qty))) as valuation " + Newln +
                            " from demat with (nolock), ourdps with (nolock) ,settlements with (nolock) ,client_master with (nolock),securities with (nolock),#TmpVarMargin" + Newln +
                            " where cm_cd = dm_clientcd and dm_stlmnt = se_stlmnt and dm_scripcd = ss_cd" + Newln +
                            " and dm_ourdp = od_cd" + Newln +
                            " and Tmp_scripcd = dm_scripcd and od_acttype in ('B','M') and dm_type = 'BC' and dm_locked = 'N' and dm_transfered = 'N'" + Newln +
                            " and dm_clientcd = '" + Code.Trim() + "'and dm_ourdp not in " + strcollat + Newln +
                            " group by dm_clientcd,dm_scripcd,dm_isin, ss_name,Tmp_haricut,ss_bserate having abs(sum(dm_qty)) > 0 " + Newln +
                            " union all " + Newln +
                            " select convert(decimal(15,2),(ss_bserate*sum(dm_qty))) as valuation " + Newln +
                            " from demat with (nolock),ourdps with (nolock) ,settlements with (nolock) ,client_master with (nolock) ,securities with (nolock) ,#TmpVarMargin where cm_cd = dm_clientcd and dm_stlmnt = se_stlmnt and dm_scripcd = ss_cd and dm_ourdp = od_cd and Tmp_scripcd = dm_scripcd" + Newln +
                            " and od_acttype in ('B','M') and dm_type = 'BC' and dm_locked = 'N' and dm_transfered = 'N'" + Newln +
                            " and dm_clientcd = '" + Code.Trim() + "' and dm_ourdp in " + strcollat + Newln +
                            " group by dm_clientcd,dm_scripcd,dm_isin, ss_name,Tmp_haricut,ss_bserate" + Newln +
                            " having abs(sum(dm_qty)) > 0 " + Newln +
                            " Union all  " + Newln +
                            " select convert(decimal(15,2),(ss_bserate*sum(dm_qty))) as valuation from demat with (nolock), ourdps with (nolock) ,settlements with (nolock) ,client_master with (nolock) ,securities  with (nolock) ,#TmpVarMargin" + Newln +
                            " where cm_cd = dm_clientcd and dm_stlmnt = se_stlmnt and dm_scripcd = ss_cd and dm_ourdp = od_cd and od_acttype = 'P'and dm_type = 'BC' and dm_locked = 'N' and dm_transfered <> 'S' and se_shpayoutdt > '" + strdate + "' " + Newln +
                            " and dm_ourdp not in " + strcollat + Newln +
                            " and dm_clientcd = '" + Code.Trim() + "' and Tmp_scripcd = dm_scripcd" + Newln +
                            " group by dm_clientcd,dm_scripcd,dm_isin, ss_name,se_stlmnt,Tmp_haricut,ss_bserate" + Newln +
                            " having abs(sum(dm_qty)) > 0 " + Newln +
                            " Union all  " + Newln +
                            " select convert(decimal(15,2),(ss_bserate*sum(dm_qty))) as valuation from demat with (nolock), ourdps with (nolock) ,settlements with (nolock) ,client_master with (nolock) ,securities  with (nolock) ,#TmpVarMargin" + Newln +
                            " where cm_cd = dm_clientcd and dm_stlmnt = se_stlmnt and dm_scripcd = ss_cd and dm_ourdp = od_cd and od_acttype = 'P'and dm_type = 'BC' and dm_locked = 'N' and dm_transfered ='N' and se_shpayoutdt <= '" + strdate + "'" + Newln +
                            " and dm_ourdp not in " + strcollat + Newln +
                            " and dm_clientcd = '" + Code.Trim() + "' and Tmp_scripcd = dm_scripcd" + Newln +
                            " group by dm_clientcd,dm_scripcd,dm_isin, ss_name,se_stlmnt,Tmp_haricut,ss_bserate" + Newln +
                            " having abs(sum(dm_qty)) > 0 " + Newln +
                            " Union all  " + Newln +
                            " select convert(decimal(15,2),(ss_bserate*sum(dm_qty))) as valuation" + Newln +
                            " from demat with (nolock), ourdps with (nolock),settlements with (nolock), client_master with (nolock),securities  with (nolock),#TmpVarMargin" + Newln +
                            " where cm_cd = dm_clientcd and dm_stlmnt = se_stlmnt and dm_scripcd = ss_cd and dm_ourdp = od_cd and od_acttype = 'P' and dm_type = 'CB' and dm_locked = 'N' and dm_transfered <> 'S'" + Newln +
                            " and dm_clientcd = '" + Code.Trim() + "' and dm_ourdp not in " + strcollat + Newln +
                            " and Tmp_scripcd = dm_scripcd group by dm_clientcd,dm_scripcd,dm_isin, ss_name,Tmp_haricut,ss_bserate having abs(sum(dm_qty)) > 0 " +
                            " ) X ";
                }
                else
                {
                    strSQL = "select dm_clientcd,dm_scripcd,sum(dm_qty) as qty,dm_isin," + Newln +
                            " ss_name,ss_bserate,convert(decimal(15,2),(ss_bserate*sum(dm_qty))) as valuation , '' as bh_type,cast((Tmp_haricut) as decimal(15,2)) HairCut,convert(decimal(15,2), 0) as AfterHaricut from demat with (nolock), ourdps with (nolock) ,settlements with (nolock) ,client_master with (nolock),securities with (nolock),#TmpVarMargin" + Newln +
                            " where cm_cd = dm_clientcd and dm_stlmnt = se_stlmnt and dm_scripcd = ss_cd" + Newln +
                            " and dm_ourdp = od_cd" + Newln +
                            " and Tmp_scripcd = dm_scripcd and od_acttype in ('B','M') and dm_type = 'BC' and dm_locked = 'N' and dm_transfered = 'N'" + Newln +
                            " and dm_clientcd = '" + Code.Trim() + "'and dm_ourdp not in " + strcollat + Newln +
                            " group by dm_clientcd,dm_scripcd,dm_isin, ss_name,Tmp_haricut,ss_bserate having abs(sum(dm_qty)) > 0 " + Newln +
                            " union all " + Newln +
                            " select dm_clientcd,dm_scripcd,sum(dm_qty) as qty,dm_isin,ss_name,ss_bserate, convert(decimal(15,2),(ss_bserate*sum(dm_qty)))" + Newln +
                            " as valuation ,'COLLAT Holding' as bh_type,cast((Tmp_haricut) as decimal(15,2)) HairCut,convert(decimal(15,2), 0) as AfterHaricut from demat with (nolock),ourdps with (nolock) ,settlements with (nolock) ,client_master with (nolock) ,securities with (nolock) ,#TmpVarMargin where cm_cd = dm_clientcd and dm_stlmnt = se_stlmnt and dm_scripcd = ss_cd and dm_ourdp = od_cd and Tmp_scripcd = dm_scripcd" + Newln +
                            " and od_acttype in ('B','M') and dm_type = 'BC' and dm_locked = 'N' and dm_transfered = 'N'" + Newln +
                            " and dm_clientcd = '" + Code.Trim() + "' and dm_ourdp in " + strcollat + Newln +
                            " group by dm_clientcd,dm_scripcd,dm_isin, ss_name,Tmp_haricut,ss_bserate" + Newln +
                            " having abs(sum(dm_qty)) > 0 " + Newln +
                            " Union all  " + Newln +
                            " select dm_clientcd,dm_scripcd,sum(dm_qty) as qty,dm_isin,ss_name,ss_bserate, convert(decimal(15,2),(ss_bserate*sum(dm_qty))) as valuation ,'Expected Holding' as bh_type,cast((Tmp_haricut) as decimal(15,2)) HairCut,convert(decimal(15,2), 0) as AfterHaricut from demat with (nolock), ourdps with (nolock) ,settlements with (nolock) ,client_master with (nolock) ,securities  with (nolock) ,#TmpVarMargin" + Newln +
                            " where cm_cd = dm_clientcd and dm_stlmnt = se_stlmnt and dm_scripcd = ss_cd and dm_ourdp = od_cd and od_acttype = 'P'and dm_type = 'BC' and dm_locked = 'N' and dm_transfered <> 'S' and se_shpayoutdt > '" + strdate + "' " + Newln +
                            " and dm_ourdp not in " + strcollat + Newln +
                            " and dm_clientcd = '" + Code.Trim() + "' and Tmp_scripcd = dm_scripcd" + Newln +
                            " group by dm_clientcd,dm_scripcd,dm_isin, ss_name,se_stlmnt,Tmp_haricut,ss_bserate" + Newln +
                            " having abs(sum(dm_qty)) > 0 " + Newln +
                            " Union all  " + Newln +
                            " select dm_clientcd,dm_scripcd,sum(dm_qty) as qty,dm_isin,ss_name,ss_bserate, convert(decimal(15,2),(ss_bserate*sum(dm_qty))) as valuation ,'Pool Holding' as bh_type,cast((Tmp_haricut) as decimal(15,2)) HairCut,convert(decimal(15,2), 0) as AfterHaricut from demat with (nolock), ourdps with (nolock) ,settlements with (nolock) ,client_master with (nolock) ,securities  with (nolock) ,#TmpVarMargin" + Newln +
                            " where cm_cd = dm_clientcd and dm_stlmnt = se_stlmnt and dm_scripcd = ss_cd and dm_ourdp = od_cd and od_acttype = 'P'and dm_type = 'BC' and dm_locked = 'N' and dm_transfered ='N' and se_shpayoutdt <= '" + strdate + "'" + Newln +
                            " and dm_ourdp not in " + strcollat + Newln +
                            " and dm_clientcd = '" + Code.Trim() + "' and Tmp_scripcd = dm_scripcd" + Newln +
                            " group by dm_clientcd,dm_scripcd,dm_isin, ss_name,se_stlmnt,Tmp_haricut,ss_bserate" + Newln +
                            " having abs(sum(dm_qty)) > 0 " + Newln +
                            " Union all  " + Newln +
                            " select dm_clientcd,dm_scripcd,sum(dm_qty) as qty,dm_isin,ss_name,ss_bserate, convert(decimal(15,2),(ss_bserate*sum(dm_qty))) as valuation ,'Undelivered Holding' as bh_type,cast((Tmp_haricut) as decimal(15,2)) HairCut,convert(decimal(15,2), 0) as AfterHaricut" + Newln +
                            " from demat with (nolock), ourdps with (nolock),settlements with (nolock), client_master with (nolock),securities  with (nolock),#TmpVarMargin" + Newln +
                            " where cm_cd = dm_clientcd and dm_stlmnt = se_stlmnt and dm_scripcd = ss_cd and dm_ourdp = od_cd and od_acttype = 'P' and dm_type = 'CB' and dm_locked = 'N' and dm_transfered <> 'S'" + Newln +
                            " and dm_clientcd = '" + Code.Trim() + "' and dm_ourdp not in " + strcollat + Newln +
                            " and Tmp_scripcd = dm_scripcd group by dm_clientcd,dm_scripcd,dm_isin, ss_name,Tmp_haricut,ss_bserate having abs(sum(dm_qty)) > 0 ";
                }
                DataTable dtHold = mylib.OpenDataTable(strSQL, curCon);
                mylib.ExecSQL("Drop Table #TmpVarMargin", curCon);
                return dtHold;
            }
        }

        public Decimal GetRetainHoldingSummarySumByCode(String Code)
        {
            Decimal decHold = 0;
            DataTable dtVal = ProcessRetainHoldingSummary(Code, true);
            if (dtVal.Rows.Count > 0)
            {
                decHold = Convert.ToDecimal(dtVal.Rows[0][0].ToString());
            }
            return decHold;
        }

        public IEnumerable<RetainHoldingSummaryModel> GetRetainHoldingSummary(string Code)
        {

            DataTable dtRetain = ProcessRetainHoldingSummary(Code, false);
            List<RetainHoldingSummaryModel> retainview = new List<RetainHoldingSummaryModel>();
            retainview = dtRetain.AsEnumerable()
            .Select(row => new RetainHoldingSummaryModel
            {
                BType = row.Field<string>("bh_type"),
                ScripCode = row.Field<string>("dm_scripcd"),
                Security = row.Field<string>("ss_name"),
                ISIN = row.Field<string>("dm_isin"),
                Quantity = row.Field<decimal>("qty"),
                Value = row.Field<decimal>("valuation"),
                Haircut = row.Field<decimal>("HairCut"),
                ValueafterHaircut = row.Field<decimal>("AfterHaricut")
            }).ToList();

            return retainview;
        }

    }
    public class modMargin : ConnectionModel
    {
        private DataTable GetMarginShorFallByCode(string Code, bool blnSum)
        {
            string newln = Environment.NewLine;
            LibraryModel mylib = new LibraryModel();

            if (blnSum)
            {
                UtilityModel myutil = new UtilityModel();

                strSQL += "Select Convert(decimal(15,2), isNull(Sum((fm_initialmargin - fm_collected) + (fm_MTMLoss-fm_collected1)),0)) ShortFall " + newln;
                strSQL += "from (" + newln;
                strSQL += "Select fm_TotalMrgn-(fm_MTMLoss+ case When fm_Segment = 'C' Then fm_additionalmargin else 0 end) fm_initialmargin,  0 fm_DeliveryMrgn, 0 fm_exposurevalue, fm_MTMLoss+ case When fm_Segment = 'C' Then fm_additionalmargin else 0 end fm_MTMLoss, fm_TotalMrgn, fm_collected, fm_collected1   " + newln;
                strSQL += "From FMargins " + newln;
                strSQL += "Where fm_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' " + newln;
                strSQL += "and fm_clientcd='" + Code + "'" + newln;
                strSQL += "and fm_Dt in (select max(fm_Dt) from fmargins Where fm_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "')  " + newln;
                if (mylib.GetSysPARM("FMRGCombined").ToString().Trim() == "F")
                {
                    strSQL += "union all " + newln;
                    strSQL += "Select 0 fm_initialmargin,  0 fm_DeliveryMrgn, 0 fm_exposurevalue, 0 fm_MTMLoss, 0 fm_TotalMrgn, fc_collected, fc_collected1   " + newln;
                    strSQL += "From Fmargin_Clients" + newln;
                    strSQL += "Where fc_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' and fc_exchange <> '' " + newln;
                    strSQL += "and fc_Dt in (select max(fm_Dt) from fmargins Where fm_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "')" + newln;
                    strSQL += "and fc_Filler1='" + Code + "'" + newln;
                }
                strSQL += ") a" + newln;
            }
            else
            {
                strSQL = "Select Case segment when 'C' then 'Cash' when 'F' then 'F&O' when 'K' then 'Currency' end as ExchSeg, " + newln;
                strSQL += "Convert(decimal(15,2), isnuLL(sum(fm_initialmargin) ,0))  as fm_initialmargin,  " + newln;
                strSQL += "Convert(decimal(15,2), isnuLL(sum(fm_MTMLoss) ,0)) as fm_MTMLoss,  " + newln;
                strSQL += "Convert(decimal(15,2), isnuLL(sum(fm_TotalMrgn) ,0)) as fm_TotalMrgn, " + newln;
                strSQL += "Convert(decimal(15,2), isnuLL(sum(fm_collected) ,0)) as fm_collected, " + newln;
                strSQL += "Convert(decimal(15,2), isnuLL(sum(fm_collected1) ,0)) as fm_collected1, " + newln;
                strSQL += "Convert(decimal(15,2), isnuLL(sum(fm_initialmargin - fm_collected) ,0)) as fm_intitalShortfall,  " + newln;
                strSQL += "Convert(decimal(15,2), isnuLL(sum(fm_MTMLoss-fm_Collected1) ,0)) as fm_MtmShortfall" + newln;
                strSQL += "from (" + newln;
                strSQL += "Select fm_segment segment, fm_TotalMrgn-(fm_MTMLoss+ case When fm_Segment = 'C' Then fm_additionalmargin else 0 end) fm_initialmargin,  0 fm_DeliveryMrgn, 0 fm_exposurevalue, fm_MTMLoss+ case When fm_Segment = 'C' Then fm_additionalmargin else 0 end fm_MTMLoss, fm_TotalMrgn, fm_collected, fm_collected1   " + newln;
                strSQL += "From FMargins " + newln;
                strSQL += "Where fm_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' " + newln;
                strSQL += "and fm_clientcd='" + Code + "'" + newln;
                strSQL += "and fm_Dt in (select max(fm_Dt) from fmargins Where fm_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "')  " + newln;
                if (mylib.GetSysPARM("FMRGCombined").ToString().Trim() == "F")
                {
                    strSQL += "union all " + newln;
                    strSQL += "Select fc_segment segment,0 fm_initialmargin,  0 fm_DeliveryMrgn, 0 fm_exposurevalue, 0 fm_MTMLoss, 0 fm_TotalMrgn, fc_collected, fc_collected1   " + newln;
                    strSQL += "From Fmargin_Clients" + newln;
                    strSQL += "Where fc_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' and fc_exchange <> '' " + newln;
                    strSQL += "and fc_Dt in (select max(fm_Dt) from fmargins Where fm_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "')" + newln;
                    strSQL += "and fc_Filler1='" + Code + "'" + newln;
                }
                strSQL += ") a" + newln;
                strSQL += "Group by Case segment when 'C' then 'Cash' when 'F' then 'F&O' when 'K' then 'Currency' end" + newln;
            }
            DataTable dtMar = mylib.OpenDataTable(strSQL);
            return dtMar;
        }

        public Decimal GetMarginShortFallSumByCode(string Code)
        {
            Decimal decMargin = 0;
            DataTable dtVal = GetMarginShorFallByCode(Code, true);
            if (dtVal.Rows.Count > 0)
            {
                decMargin = Convert.ToDecimal(dtVal.Rows[0][0].ToString());
            }
            return decMargin;
        }

        public IEnumerable<CombinedMarginModel> GetMarginShorFallByCode(string Code)
        {
            DataTable dtMargin = GetMarginShorFallByCode(Code, false);
            List<CombinedMarginModel> marignview = new List<CombinedMarginModel>();
            marignview = dtMargin.AsEnumerable()
            .Select(row => new CombinedMarginModel
            {
                ExchSeg = row.Field<string>("ExchSeg"),
                IntialMargin = row.Field<decimal>("fm_initialmargin"),
                MTMLoss = row.Field<decimal>("fm_MTMLoss"),
                TotalMargin = row.Field<decimal>("fm_TotalMrgn"),
                IntialCollected = row.Field<decimal>("fm_collected"),
                MTMCollected = row.Field<decimal>("fm_collected1"),
                IntitalShortFall = row.Field<decimal>("fm_intitalShortfall"),
                MTMShortFall = row.Field<decimal>("fm_MtmShortfall")
            }).ToList();

            return marignview;
        }

        public DataTable GetMarginShortFall(bool blnSum, string strWhere = "", bool blnTop10 = false)
        {
            LibraryModel mylib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            string newln = Environment.NewLine;
            if (blnSum)
            {
                strSQL = "Select COUNT(distinct fm_clientcd) ClientCnt, Convert(decimal(15,2), isNull(Sum(ShortFall),0)) ClientSum From" + newln;
                strSQL += "(" + newln;
                strSQL += "Select fm_clientcd, isNull(Sum((fm_initialmargin - fm_collected) + (fm_MTMLoss-fm_collected1)),0) ShortFall " + newln;
                strSQL += "from (" + newln;
                strSQL += "Select fm_clientcd, fm_TotalMrgn-(fm_MTMLoss+ case When fm_Segment = 'C' Then fm_additionalmargin else 0 end) fm_initialmargin,  0 fm_DeliveryMrgn, 0 fm_exposurevalue, fm_MTMLoss+ case When fm_Segment = 'C' Then fm_additionalmargin else 0 end fm_MTMLoss, fm_TotalMrgn, fm_collected, fm_collected1   " + newln;
                strSQL += "From FMargins " + newln;
                strSQL += "Where fm_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' " + newln;
                strSQL += "and exists " + myutil.LoginAccess("fm_clientcd") + newln;
                strSQL += "and fm_Dt in (select max(fm_Dt) from fmargins Where fm_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "')  " + newln;
                if (mylib.GetSysPARM("FMRGCombined").ToString().Trim() == "F")
                {
                    strSQL += "union all " + newln;
                    strSQL += "Select fc_Filler1, 0 fm_initialmargin,  0 fm_DeliveryMrgn, 0 fm_exposurevalue, 0 fm_MTMLoss, 0 fm_TotalMrgn, fc_collected, fc_collected1   " + newln;
                    strSQL += "From Fmargin_Clients" + newln;
                    strSQL += "Where fc_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' and fc_exchange <> '' " + newln;
                    strSQL += "and fc_Dt in (select max(fm_Dt) from fmargins Where fm_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "')" + newln;
                    strSQL += "and exists " + myutil.LoginAccess("fc_Filler1") + newln;
                }
                strSQL += ") a" + newln;
                strSQL += "Group By fm_clientcd" + newln;
                strSQL += "Having isNull(Sum((fm_initialmargin - fm_collected) + (fm_MTMLoss-fm_collected1)),0) > 0 " + newln;
                strSQL += ") x" + newln;
            }
            else
            {
                strSQL = "Select " + (blnTop10 ? "  Top 10  " : "") + " fm_clientcd as Code, cm_name as name, Convert(decimal(15,2), isNull(Sum((fm_initialmargin - fm_collected) + (fm_MTMLoss-fm_collected1)),0)) Amount " + newln;
                strSQL += "from (" + newln;
                strSQL += "Select fm_clientcd, fm_TotalMrgn-(fm_MTMLoss+ case When fm_Segment = 'C' Then fm_additionalmargin else 0 end) fm_initialmargin,  0 fm_DeliveryMrgn, 0 fm_exposurevalue, fm_MTMLoss+ case When fm_Segment = 'C' Then fm_additionalmargin else 0 end fm_MTMLoss, fm_TotalMrgn, fm_collected, fm_collected1   " + newln;
                strSQL += "From FMargins " + newln;
                strSQL += "Where fm_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' " + newln;
                strSQL += "and exists " + myutil.LoginAccess("fm_clientcd") + newln;
                strSQL += "and fm_Dt in (select max(fm_Dt) from fmargins Where fm_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "')  " + newln;
                if (mylib.GetSysPARM("FMRGCombined").ToString().Trim() == "F")
                {
                    strSQL += "union all " + newln;
                    strSQL += "Select fc_Filler1, 0 fm_initialmargin,  0 fm_DeliveryMrgn, 0 fm_exposurevalue, 0 fm_MTMLoss, 0 fm_TotalMrgn, fc_collected, fc_collected1   " + newln;
                    strSQL += "From Fmargin_Clients" + newln;
                    strSQL += "Where fc_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' and fc_exchange <> '' " + newln;
                    strSQL += "and fc_Dt in (select max(fm_Dt) from fmargins Where fm_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "')" + newln;
                    strSQL += "and exists " + myutil.LoginAccess("fc_Filler1") + newln;
                }
                strSQL += ") a, Client_Master Where cm_cd = fm_clientcd" + newln;
                strSQL += strWhere;
                strSQL += "Group By fm_clientcd, cm_name" + newln;
                strSQL += "Having isNull(Sum((fm_initialmargin - fm_collected) + (fm_MTMLoss-fm_collected1)),0) > 0 " + newln;
                strSQL += "Order By isNull(Sum((fm_initialmargin - fm_collected) + (fm_MTMLoss-fm_collected1)),0) desc";
            }
            DataTable dtMar = mylib.OpenDataTable(strSQL);
            return dtMar;
        }
    }
    public class modHolding : ConnectionModel
    {

        public DataTable ProcessBenHolding(string Code, bool blnSum)
        {
            DataTable dtHold = new DataTable();
            string[] Cross = new string[2];
            string[] Estro = new string[2];
            bool bCross = false;
            bool bEstro = false;

            LibraryModel mylib = new LibraryModel();
            strSQL = "Select OP_Server,OP_DataBase,OP_Owner,OP_User from Other_Products Where OP_Product = 'CROSS' and op_Status = 'A'";
            DataTable dtCross = mylib.OpenDataTable(strSQL);
            if (dtCross.Rows.Count > 0)
            {
                DataRow dr = dtCross.Rows[0];

                bCross = true;
                Cross = new string[3];
                Cross[0] = dr["OP_Server"].ToString().Trim();
                Cross[1] = dr["OP_DataBase"].ToString().Trim();
                Cross[2] = dr["OP_Owner"].ToString().Trim();
            }

            strSQL = "Select OP_Server,OP_DataBase,OP_Owner,OP_User,OP_PWD from Other_Products Where OP_Product = 'ESTRO' and op_Status = 'A'";
            DataTable dtEstro = mylib.OpenDataTable(strSQL);
            if (dtEstro.Rows.Count > 0)
            {
                DataRow dr = dtEstro.Rows[0];
                bEstro = true;
                Estro = new string[3];
                Estro[0] = dr["OP_Server"].ToString().Trim();
                Estro[1] = dr["OP_DataBase"].ToString().Trim();
                Estro[2] = dr["OP_Owner"].ToString().Trim();
            }
            if (!bCross && !bEstro)
            {
                return dtHold;
            }

            strSQL = "";

            if (blnSum)
            {
                if (bCross)
                {
                    strSQL = "select isnull(sum(cast((( a.hld_ac_pos * sc_Rate)) as decimal(15,2))),0)  as valuation" +
                            " from [" + Cross[0] + "].[" + Cross[1] + "].[" + Cross[2] + "].Holding a, [" + Cross[0] + "].[" + Cross[1] + "].[" + Cross[2] + "].Security b , " +
                            " [" + Cross[0] + "].[" + Cross[1] + "].[" + Cross[2] + "].Beneficiary_type d , dematact da " +
                            " where da.da_clientcd = '" + Code + "'  " +
                            " and a.hld_ac_code = da.da_actno " +
                            " and a.hld_isin_code = b.sc_isincode   " +
                            " and d.bt_code = a.hld_ac_type ";
                }
                if (bEstro)
                {
                    if (strSQL != "")
                    {
                        strSQL += " Union All ";
                    }
                    strSQL += "select isnull(sum(cast((( a.hld_ac_pos * sc_Rate)) as decimal(15,2))),0)  as valuation" +
                            " from [" + Estro[0] + "].[" + Estro[1] + "].[" + Estro[2] + "].Holding a, [" + Estro[0] + "].[" + Estro[1] + "].[" + Estro[2] + "].Security b , " +
                            " [" + Estro[0] + "].[" + Estro[1] + "].[" + Estro[2] + "].Beneficiary_type d , dematact da " +
                            " where da.da_clientcd = '" + Code + "'  " +
                            " and a.hld_ac_code = da.da_actno " +
                            " and a.hld_isin_code = b.sc_isincode   " +
                            " and d.bt_code = a.hld_ac_type ";
                    //strSQL += "select isnull(sum(cast((( a.hld_ac_pos * sc_Rate)) as decimal(15,2))),0)  as valuation" +
                    //     " from.[" + Estro[1] + "].[" + Estro[2] + "].Holding a, [" + Estro[1] + "].[" + Estro[2] + "].Security b , " +
                    //     " [" + Estro[1] + "].[" + Estro[2] + "].Beneficiary_type d , dematact da " +
                    //     " where da.da_clientcd = '" + Code + "'  " +
                    //     " and a.hld_ac_code = da.da_actno " +
                    //     " and a.hld_isin_code = b.sc_isincode   " +
                    //     " and d.bt_code = a.hld_ac_type ";
                }

                strSQL = "Select isnull(Convert(decimal(15,2), sum(valuation)),0) from ( " + strSQL + " ) X ";
            }
            else
            {
                strSQL = "";
                if (bCross)
                {
                    strSQL = "select cm.cm_cd, cm.cm_name, a.hld_isin_code,b.sc_company_name,b.sc_isinname,cast((a.hld_ac_pos) as decimal(15,2)) hld_ac_pos,a.hld_ac_type, " +
                            " d.bt_description 'bt_description', hld_market_type,a.hld_settlement,cast((sc_rate) as decimal(15,2)) as sc_security_rate, " +
                            " cast(( ( a.hld_ac_pos * sc_Rate)) as decimal(15,2))  as valuation,bt_description as BType " +
                            " from [" + Cross[0] + "].[" + Cross[1] + "].[" + Cross[2] + "].Holding a, [" + Cross[0] + "].[" + Cross[1] + "].[" + Cross[2] + "].Security b , " +
                            " [" + Cross[0] + "].[" + Cross[1] + "].[" + Cross[2] + "].Beneficiary_type d , dematact da, " +
                            " [" + Cross[0] + "].[" + Cross[1] + "].[" + Cross[2] + "].Client_master cm " +
                            " where da.da_clientcd = '" + Code + "'  and cm.cm_cd = hld_ac_code " +
                            " and a.hld_ac_code = da.da_actno " +
                            " and a.hld_isin_code = b.sc_isincode   " +
                            " and d.bt_code = a.hld_ac_type ";
                }
                else if (bEstro)
                {
                    strSQL = "select a.hld_isin_code,b.sc_company_name,b.sc_isinname,cast((a.hld_ac_pos) as decimal(15,2)) hld_ac_pos,a.hld_ac_type, " +
                            " d.bt_description 'bt_description', hld_market_type,a.hld_settlement,cast((sc_rate) as decimal(15,2)) as sc_security_rate, " +
                            " cast(( ( a.hld_ac_pos * sc_Rate)) as decimal(15,2))  as valuation, bt_description as BType" +
                            " from " + Estro[0].Trim() + "." + Estro[1].Trim() + "." + Estro[2].Trim() + ".Holding a," +
                            Estro[0].Trim() + "." + Estro[1].Trim() + "." + Estro[2].Trim() + ".Security b ," +
                            Estro[0].Trim() + "." + Estro[1].Trim() + "." + Estro[2].Trim() + ".Beneficiary_type d, dematact da, " +
                            " [" + Estro[0] + "].[" + Estro[1] + "].[" + Estro[2] + "].Client_master cm " +
                            " where da.da_clientcd = '" + Code + "'  and cm.cm_cd = hld_ac_code " +
                            " and a.hld_ac_code = da.da_actno " +
                            " and a.hld_isin_code = b.sc_isincode   " +
                            " and d.bt_code = a.hld_ac_type ";

                    //strSQL = "select a.hld_isin_code,b.sc_company_name,b.sc_isinname,cast((a.hld_ac_pos) as decimal(15,2)) hld_ac_pos,a.hld_ac_type, " +
                    //     " d.bt_description 'bt_description', hld_market_type,a.hld_settlement,cast((sc_rate) as decimal(15,2)) as sc_security_rate, " +
                    //     " cast(( ( a.hld_ac_pos * sc_Rate)) as decimal(15,2))  as valuation, bt_description as BType" +
                    //     " from " + Estro[1].Trim() + "." + Estro[2].Trim() + ".Holding a," +
                    //     Estro[1].Trim() + "." + Estro[2].Trim() + ".Security b ," +
                    //    Estro[1].Trim() + "." + Estro[2].Trim() + ".Beneficiary_type d, dematact da, " +
                    //     " [" + Estro[0] + "].[" + Estro[1] + "].[" + Estro[2] + "].Client_master cm " +
                    //     " where da.da_clientcd = '" + Code + "'  and cm.cm_cd = hld_ac_code " +
                    //     " and a.hld_ac_code = da.da_actno " +
                    //     " and a.hld_isin_code = b.sc_isincode   " +
                    //     " and d.bt_code = a.hld_ac_type ";
                }
            }
            dtHold = mylib.OpenDataTable(strSQL);
            return dtHold;
        }



        public decimal GetBenHoldingSumByCode(string Code)
        {
            Decimal decShareCol = 0;
            DataTable dtVal = ProcessBenHolding(Code, true);
            if (dtVal.Rows.Count > 0)
            {
                decShareCol = Convert.ToDecimal(dtVal.Rows[0][0].ToString());
            }
            return decShareCol;
        }

        public IEnumerable<DPHoldingModel> GetBenHolding(string Code)
        {
            DataTable dtHold = ProcessBenHolding(Code, false);
            List<DPHoldingModel> dpview = new List<DPHoldingModel>();
            dpview = dtHold.AsEnumerable()
            .Select(row => new DPHoldingModel
            {
                BOID = row.Field<string>("cm_cd"),
                BOName = row.Field<string>("cm_name"),
                ISINCode = row.Field<string>("hld_isin_code"),
                CompName = row.Field<string>("sc_company_name"),
                ISINName = row.Field<string>("sc_isinname"),
                accPos = row.Field<decimal>("hld_ac_pos"),
                accType = row.Field<string>("hld_ac_type"),
                BType = row.Field<string>("bt_description"),
                MarketType = row.Field<string>("bt_description"),
                Stlmnt = row.Field<string>("hld_settlement"),
                secRate = row.Field<decimal>("sc_security_rate"),
                Valuation = row.Field<decimal>("valuation"),
            }).ToList();

            return dpview;
        }
    }
    public class modCollateral : ConnectionModel
    {
        public DataTable ProcessShareCollateral(string Code, bool blnSum)
        {
            string Newln = Environment.NewLine;
            LibraryModel lib = new LibraryModel();
            string strCollVal = lib.GetSysParmSt("FCOLLVAL", "STATIONARY");

            strSQL = "select convert(char, convert(datetime, getdate()), 112)";
            DataTable dtDate = lib.OpenDataTable(strSQL);
            string strdate = dtDate.Rows[0][0].ToString().Trim();


            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {
                curCon.Open();
                LibraryModel mylib = new LibraryModel();
                try
                {
                    mylib.ExecSQL("Drop Table #tempmargincollaterial", curCon);
                }
                catch (Exception)
                {
                }
                finally
                {
                    strSQL = "Create table #tempmargincollaterial(" + Newln +
                            " ts_scripcd char(8) not null," + Newln +
                            " ts_scripname char(50) not null," + Newln +
                            " ts_qty numeric not null," + Newln +
                            " ts_closeprice money not null," + Newln +
                            " ts_value money not null," + Newln +
                            " ts_haircut money not null," + Newln +
                            " ts_haircutvalue money not null," + Newln +
                            " ts_netvalue money not null," + Newln +
                            " ts_rflag char(1) not null," + Newln +
                            " ts_category char(1) not null," + Newln +
                            " ts_categoryname char(20) not null," + Newln +
                            " ts_clientcd char(8) not null," + Newln +
                            " ts_collateraltype char(8) not null," + Newln +
                            " ts_transactiondt char(8) not null," + Newln +
                            " ts_maturitydt char(8) not null," + Newln +
                            " ts_amount money not null," + Newln +
                            " ts_isin char(12) not null" + Newln +
                            " )";
                    mylib.ExecSQL(strSQL, curCon);
                }

                strSQL = "INSERT INTO " + Newln +
                        " #tempmargincollaterial ( " + Newln +
                        " ts_scripcd,ts_scripname,ts_qty,ts_closeprice," + Newln +
                        " ts_value,ts_haircut,ts_haircutvalue,ts_netvalue,ts_rflag,ts_category , ts_categoryname , " + Newln +
                        " ts_clientcd , ts_collateraltype ,ts_transactiondt ,ts_maturitydt,ts_amount,ts_isin )" + Newln +
                        " SELECT fc_pscd,left(ss_name,20)," + Newln +
                        " sum(case fc_controlflag  when 'D' then fc_qty else fc_qty*(-1) end)," + Newln +
                        " 0,0,0,0,0,'S','1','Share',fc_clientcd , fc_collateraltype,'','',0,''" + Newln +
                        " FROM  Fcollateral_detail,Fcollateral_types,Securities,Client_master" + Newln +
                        " WHERE fc_collateraltype = fct_cd and fc_pscd = ss_cd " + Newln +
                        " and fc_clientcd = cm_cd" + Newln +
                        " and fct_category = 'SH' and fc_clientcd='" + Code + "'" + Newln +
                        "  and fc_transactiondt <= '" + strdate + "' " + Newln +
                        " GROUP BY fc_clientcd ,fc_collateraltype,fc_pscd,ss_name,ss_HairCut";
                mylib.ExecSQL(strSQL, curCon);


                strSQL = "update #tempmargincollaterial set ts_closeprice =isnull((select mk_closerate from Market_rates  " + Newln +
                        " where mk_exchange = 'B' and mk_scripcd = ts_scripcd " + Newln +
                        " and mk_dt =(select max(mk_dt) from Market_rates " + Newln +
                        " where mk_exchange = 'B' and mk_dt <'" + strdate + "'" + Newln +
                        " and mk_scripcd = ts_scripcd )),0)";
                mylib.ExecSQL(strSQL, curCon);

                strSQL = "update #tempmargincollaterial set ts_closeprice =isnull((select mk_closerate from Market_rates  " + Newln +
                        " where mk_exchange = 'N' and mk_scripcd = ts_scripcd " + Newln +
                        " and mk_dt =(select max(mk_dt) from Market_rates " + Newln +
                        " where mk_exchange = 'N' and mk_dt <'" + strdate + "' " + Newln +
                        " and mk_scripcd = ts_scripcd )),0)";
                mylib.ExecSQL(strSQL, curCon);

                if (strCollVal == "Y")
                {
                    strSQL = "update #tempmargincollaterial set ts_haircut =isnull((select case vm_exchange When 'B' then vm_margin_rate  else vm_applicable_var end from VarMargin  " + Newln +
                            " where vm_exchange = 'B' and vm_scripcd = ts_scripcd " + Newln +
                            " and vm_dt =(select max(vm_dt) from VarMargin " + Newln +
                            " where vm_exchange = 'B'  and  vm_dt <='" + strdate + "' " + Newln +
                            " and vm_scripcd = ts_scripcd )),0)";
                    mylib.ExecSQL(strSQL, curCon);
                }
                else
                {
                    strSQL = "update #tempmargincollaterial set ts_haircut =isnull((select (case vm_exchange When 'B' then vm_margin_rate  else vm_applicable_var end+vm_max_loss) from VarMargin  " + Newln +
                            " where vm_exchange = 'B' and vm_scripcd = ts_scripcd " + Newln +
                            " and vm_dt =(select max(vm_dt) from VarMargin " + Newln +
                            " where vm_exchange = 'B'  and  vm_dt <='" + strdate + "' " + Newln +
                            " and vm_scripcd = ts_scripcd )),0)";
                    mylib.ExecSQL(strSQL, curCon);

                }

                if (strCollVal == "Y")
                {
                    strSQL = "update #tempmargincollaterial set ts_haircut = isnull((select case vm_exchange When 'B' then vm_margin_rate  else vm_applicable_var end from VarMargin   " + Newln +
                            " where vm_exchange = 'N' and vm_scripcd = ts_scripcd " + Newln +
                            " and vm_dt =(select max(vm_dt) from VarMargin " + Newln +
                            " where vm_exchange = 'N' and  vm_dt <='" + strdate + "'" + Newln +
                            " and vm_scripcd = ts_scripcd )),0)";
                    mylib.ExecSQL(strSQL, curCon);
                }
                else
                {
                    strSQL = "update #tempmargincollaterial set ts_haircut = isnull((select (case vm_exchange When 'B' then vm_margin_rate  else vm_applicable_var end+vm_max_loss) from VarMargin   " + Newln +
                            " where vm_exchange = 'N' and vm_scripcd = ts_scripcd " + Newln +
                            " and vm_dt =(select max(vm_dt) from VarMargin " + Newln +
                            " where vm_exchange = 'N' and  vm_dt <='" + strdate + "'" + Newln +
                            " and vm_scripcd = ts_scripcd )),0)";
                    mylib.ExecSQL(strSQL, curCon);
                }

                strSQL = "UPDATE a " + Newln +
                        " SET ts_haircut = ts_haircut + (select cm_haircut " + Newln +
                        " FROM Client_master where cm_cd = a.ts_clientcd )" + Newln +
                        " FROM #tempmargincollaterial a";
                mylib.ExecSQL(strSQL, curCon);

                strSQL = "update #tempmargincollaterial set ts_value = ts_qty * ts_closeprice";
                mylib.ExecSQL(strSQL, curCon);

                strSQL = "update #tempmargincollaterial set ts_haircutvalue = case ts_value when 0 then 0 else round(ts_value * ts_haircut/100,2) end";
                mylib.ExecSQL(strSQL, curCon);

                strSQL = "update #tempmargincollaterial set ts_netvalue = ts_value - ts_haircutvalue";
                mylib.ExecSQL(strSQL, curCon);


                strSQL = "INSERT INTO " + Newln +
                        " #tempmargincollaterial ( " + Newln +
                        " ts_scripcd,ts_scripname,ts_qty,ts_closeprice," + Newln +
                        " ts_value,ts_haircut,ts_haircutvalue,ts_netvalue,ts_rflag,ts_category ,ts_categoryname, " + Newln +
                        " ts_clientcd , ts_collateraltype ,ts_transactiondt ,ts_maturitydt,ts_amount,ts_isin )" + Newln +
                        " SELECT fct_category,(case fct_category when 'FD' then 'Fixed Deposit' else 'Bank Gurantee' end)," + Newln +
                        " 10,0," + Newln +
                        " 0,0,0," + Newln +
                        " 0,'S',(case fct_category when 'FD' then '2' else '3' end)," + Newln +
                        " (case fct_category when 'FD' then 'Fixed Dep' else 'Bank Gu' end),fc_clientcd , fc_collateraltype , fc_transactiondt ,fc_maturitydt,Case fc_controlflag When 'D' Then fc_amount  else - fc_amount end,''  " + Newln +
                        " FROM  Fcollateral_detail,Fcollateral_types,Client_master" + Newln +
                        " WHERE fc_collateraltype = fct_cd " + Newln +
                        " and fc_clientcd = cm_cd and fc_clientcd='" + Code + "'" + Newln +
                        " and fct_category in ('FD','BG')";
                mylib.ExecSQL(strSQL, curCon);


                strSQL = "Update #tempmargincollaterial set ts_isin = isNull" + Newln +
                        "((select top 1 im_isin From isin Where im_Scripcd = ts_scripcd " + Newln +
                        "and im_priority in (select min(im_priority) From isin where im_Scripcd = ts_scripcd )),'')";
                mylib.ExecSQL(strSQL, curCon);

                if (blnSum)
                {
                    strSQL = "Select isNull(Sum(NetValue),0) From " + Newln +
                            " ( select  cast(sum(ts_netvalue) as decimal(15, 2)) as NetValue " + Newln +
                            " from #tempmargincollaterial, client_master ,Fcollateral_types" + Newln +
                            " where cm_cd = ts_clientcd and fct_cd =ts_collateraltype " + Newln +
                            " and ts_qty <> 0 and ts_clientcd = '" + Code + "'" + Newln +
                            " group by" + Newln +
                            " ts_clientcd, cm_name, ts_category , ts_collateraltype,fct_desc , " + Newln +
                            " ts_scripcd , ts_scripname ,ts_transactiondt ,ts_maturitydt,ts_isin " + Newln +
                            " ) X ";
                }
                else
                {
                    strSQL = " select ts_clientcd , cm_name  ,ts_collateraltype, fct_desc ," + Newln +
                            " ts_scripcd as ScripCode, ts_scripname as ScripName ,ts_transactiondt ,ts_maturitydt ," + Newln +
                            " cast(sum(ts_qty) as decimal(15,0)) as Qty ,cast(sum(ts_closeprice) as decimal(15,2))  as rate,cast(sum(ts_value) as decimal(15,2)) as Value," + Newln +
                            " cast(sum(ts_haircut) as decimal(15,2))  as HairCut , cast( sum(ts_netvalue) as decimal(15,2)) as NetValue , ts_category, sum(ts_amount) ts_amount ,ts_isin,'Share Collateral Details' as Heading " + Newln +
                            " from #tempmargincollaterial, client_master ,Fcollateral_types" + Newln +
                            " where cm_cd = ts_clientcd and fct_cd =ts_collateraltype " + Newln +
                            " and ts_qty <> 0 and ts_clientcd = '" + Code + "'" + Newln +
                            " group by" + Newln +
                            " ts_clientcd, cm_name, ts_category , ts_collateraltype,fct_desc , " + Newln +
                            " ts_scripcd , ts_scripname ,ts_transactiondt ,ts_maturitydt,ts_isin " + Newln +
                            " order by ts_clientcd, cm_name, ts_category,ts_collateraltype,fct_desc  , " + Newln +
                            " ts_scripname,ts_scripcd , ts_transactiondt ,ts_maturitydt ";
                }

                DataTable dtShare = mylib.OpenDataTable(strSQL, curCon);
                mylib.ExecSQL("Drop Table #tempmargincollaterial", curCon);
                return dtShare;
            }
        }

        public Decimal GetShareCollateralSum(string Code)
        {
            Decimal decShareCol = 0;
            DataTable dtVal = ProcessShareCollateral(Code, true);
            if (dtVal.Rows.Count > 0)
            {
                decShareCol = Convert.ToDecimal(dtVal.Rows[0][0].ToString());
            }
            return decShareCol;
        }

        public IEnumerable<ShareCollateralModel> GetShareCollateralSummary(string Code)
        {
            DataTable dtCol = ProcessShareCollateral(Code, false);
            List<ShareCollateralModel> colview = new List<ShareCollateralModel>();
            colview = dtCol.AsEnumerable()
            .Select(row => new ShareCollateralModel
            {
                ScripCd = row.Field<string>("ScripCode"),
                ScripName = row.Field<string>("ScripName"),
                Quantity = row.Field<decimal>("Qty"),
                Rate = row.Field<decimal>("rate"),
                Value = row.Field<decimal>("Value"),
                Haircut = row.Field<decimal>("HairCut"),
                NetValue = row.Field<decimal>("NetValue")
            }).ToList();

            return colview;
        }

    }
    public class modSharePayoutProcess : ConnectionModel
    {
        public modSharePayoutProcess()
        {
        }

        //type {N=New Request, S=See Status}

        public IEnumerable<SharePayoutModel> ProcessSharePayputRequest(string type, string select, string Code)
        {
            List<SharePayoutModel> sp = new List<SharePayoutModel>();
            LibraryModel myLib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();


            string strDemand = "";
            string strFiller = "";
            string[] Arrdemand;
            string strtemp = "";

            if (type == "N")
            {
                strSQL = "select tnc_filler1 from tradenetcontrol where tnc_optcode='947'";
                strDemand = myLib.GetScalarValueString(strSQL);
                strFiller = strDemand.Trim();
                Arrdemand = strDemand.Trim().Split('|');
                strtemp = "";
                if (strDemand.Trim() != "")
                {
                    if (Arrdemand.Length > 0)
                    {
                        for (int i = 0; i < Arrdemand.Length; i++)
                        {
                            if (i == 1)
                            {
                                strtemp = "'" + Strings.Left(Arrdemand[1].Trim(), 1) + "',";
                            }
                            else if (i > 1)
                            {
                                strtemp += "'" + Arrdemand[1].Trim().Substring(i, 1) + "',";
                            }

                        }
                        if (Strings.Right(strtemp.Trim(), 1) == ",")
                        {
                            strtemp = Strings.Left(strtemp.Trim(), strtemp.Trim().Length - 1);
                        }
                    }
                }

                strSQL = "select tnc_filler1 from tradenetcontrol where tnc_optcode='948'";
                string strActBase = "";
                string[] arrActtype;
                strActBase = myLib.GetScalarValueString(strSQL);
                if (strActBase.Trim() != "")
                {
                    arrActtype = strActBase.Trim().Split('|');
                    strActBase = "";
                    for (int i = 0; i < arrActtype.Length; i++)
                    {
                        strActBase += "'" + arrActtype[i].Trim() + "',";
                    }
                    strActBase = Strings.Left(strActBase.Trim(), strActBase.Trim().Length - 1);
                    HttpContext.Current.Session["strActBase"] = strActBase;
                }

                //Haircut
                string strRmsHairCut = myLib.GetSysPARM("RMSHAIRCUT").Trim();
                string strRMSdate = myutil.gstrDBToday();

                strSQL = "select max(rs_dt) as RmsDt From rms_summary";
                string strMaxRMSDate = myLib.GetScalarValueString(strSQL);
                if (strMaxRMSDate == null || strMaxRMSDate == "")
                {
                    strRMSdate = myutil.gstrDBToday();
                }
                else
                {
                    strRMSdate = strMaxRMSDate;
                }
                DataTable dtMainGrd = null;
                try
                {
                    using (SqlConnection curCon = new SqlConnection(connectionstring))
                    {
                        curCon.Open();
                        try
                        {
                            strSQL = "drop table #ScrpRate";
                            myLib.ExecSQL(strSQL, curCon);
                        }
                        catch (Exception)
                        {
                        }
                        finally
                        {
                            strSQL = "Create Table #ScrpRate ( " + myutil.newline() +
                                    " sc_scripcd VarChar(6)," + myutil.newline() +
                                    " sc_Rate money, " + myutil.newline() +
                                    " sc_BseHairCut money, " + myutil.newline() +
                                    " sc_NseHairCut money )";
                            myLib.ExecSQL(strSQL, curCon);
                        }
                        strSQL = "insert into #ScrpRate select ss_cd ,case when ss_bseratedt > ss_nseratedt then ss_bserate else ss_nserate end , 0 , 0 from securities ";
                        myLib.ExecSQL(strSQL, curCon);

                        strSQL = "select count(0) From sysobjects Where name = 'LVarMargin'";
                        DataTable dt1 = myLib.OpenDataTable(strSQL, curCon);
                        if (int.Parse(dt1.Rows[0][0].ToString()) > 0)
                        {
                            strSQL = " update #ScrpRate set sc_BseHairCut = lv_BseVarMargin " + ((strRmsHairCut == "B") ? "+lv_BseELM" : "") + myutil.newline() +
                                    " from LVarMargin where lv_scripcd = sc_scripcd ";
                            myLib.ExecSQL(strSQL, curCon);

                            strSQL = "update #ScrpRate set sc_NseHairCut = lv_NseVarMargin " + ((strRmsHairCut == "B") ? "+lv_NseELM" : "") + myutil.newline() +
                                    " from LVarMargin where lv_scripcd = sc_scripcd ";
                            myLib.ExecSQL(strSQL, curCon);
                        }
                        else
                        {
                            strSQL = "update #ScrpRate set sc_BseHairCut = vm_margin_rate " + ((strRmsHairCut == "B") ? "+vm_max_loss" : "") + " from VarMargin  " + myutil.newline() +
                                    " where vm_scripcd = sc_scripcd and vm_exchange = 'B' " + myutil.newline() +
                                    " and vm_dt =(select max(vm_dt) from VarMargin " + myutil.newline() +
                                    " Where vm_scripcd = sc_scripcd and vm_exchange = 'B' and vm_dt <='" + strRMSdate + "')";
                            myLib.ExecSQL(strSQL, curCon);


                            strSQL = "update #ScrpRate set sc_NseHairCut = Case When vm_exchange = 'N' Or vm_exchange = 'Z' then vm_applicable_var else 0 end " + ((strRmsHairCut == "B") ? "+vm_max_loss" : "") + myutil.newline() +
                                    " from VarMargin  where vm_scripcd = sc_scripcd and vm_exchange = 'N' " + myutil.newline() +
                                    " and vm_dt =(select max(vm_dt) from VarMargin " + myutil.newline() +
                                    " Where vm_scripcd = sc_scripcd and vm_exchange = 'N' and vm_dt <='" + strRMSdate.Trim() + "')";
                            myLib.ExecSQL(strSQL, curCon);
                        }

                        strSQL = "select sc_scripcd, isnull(sc_BseHairCut,0),isnull(sc_NseHairCut,0) from #ScrpRate";
                        DataTable dtChdHCut = myLib.OpenDataTable(strSQL, curCon);
                        HttpContext.Current.Session["ChdHCut"] = dtChdHCut;

                        try
                        {
                            strSQL = "drop table #TmpHolidng";
                            myLib.ExecSQL(strSQL, curCon);
                        }
                        catch (Exception)
                        {
                        }
                        finally
                        {
                            strSQL = "Create Table #TmpHolidng(" + myutil.newline() +
                                    " tmp_clientcd Varchar(8), " + myutil.newline() +
                                    " tmp_scripcd varchar(6), " + myutil.newline() +
                                    " tmp_qty numeric, " + myutil.newline() +
                                    " tmp_rate money, " + myutil.newline() +
                                    " tmp_exchange varchar(1)," + myutil.newline() +
                                    " tmp_Stlmnt varchar(9))";
                            myLib.ExecSQL(strSQL, curCon);
                        }

                        strSQL = "insert into #TmpHolidng " + myutil.newline();
                        strSQL += "select dm_clientcd , dm_scripcd , abs(sum(dm_qty)) , 0 ,se_exchange,'' " + myutil.newline();
                        strSQL += " From Demat, Client_master, settlements, ourdps , #ScrpRate " + myutil.newline();
                        strSQL += " where dm_clientcd = cm_Cd And dm_stlmnt = se_stlmnt and dm_scripcd = sc_scripcd  " + myutil.newline();
                        strSQL += " and dm_ourdp = od_cd " + myutil.newline();
                        strSQL += " and od_acttype in('B','M') and cm_freezeyn='N'" + myutil.newline();
                        if (strActBase.Trim() != "")
                        {
                            strSQL = strSQL + " and od_cd in (" + strActBase.Trim() + ")" + myutil.newline();
                        }
                        if (Code.Trim() != "")
                        {
                            if (select == "CL")
                            {
                                strSQL += " and cm_cd = '" + Code + "'" + myutil.newline();
                            }
                            else if (select == "FM")
                            {
                                strSQL += " and cm_familycd = '" + Code + "'" + myutil.newline();
                            }
                            else if (select == "BR")
                            {
                                strSQL += " and cm_brboffcode = '" + Code + "'" + myutil.newline();
                            }
                            else if (select == "GR")
                            {
                                strSQL += " and cm_groupcd = '" + Code + "'" + myutil.newline();
                            }
                            else if (select == "SB")
                            {
                                strSQL += " and cm_subbroker = '" + Code + "'" + myutil.newline();
                            }
                        }
                        strSQL += " and dm_type= 'BC' and dm_locked = 'N' and dm_transfered = 'N'" + myutil.newline();
                        strSQL += " and se_payoutdt <= '" + myutil.gstrDBToday() + "'" + myutil.newline();
                        strSQL += " and exists " + myutil.LoginAccess("dm_clientcd") + myutil.newline();
                        strSQL += " Group By dm_clientcd , dm_scripcd ,sc_rate,se_exchange ,se_stlmnt" + myutil.newline();
                        myLib.ExecSQL(strSQL, curCon);

                        string strRMSVALATLTRT = myLib.GetSysPARM("RMSVALATLTRT");

                        //'---------Calculating Rate--------------------------------------
                        strSQL = "Update #TmpHolidng set tmp_rate = mk_closerate from market_rates a with (nolock) where mk_exchange = 'B' and mk_scripcd=tmp_scripcd and tmp_exchange = 'B'" + myutil.newline();
                        strSQL += " and mk_dt= (select max(mk_dt) from market_rates with(nolock) where mk_scripcd=tmp_scripcd and mk_exchange = 'B' " + myutil.newline();
                        if (Conversion.Val(strRMSVALATLTRT) > 0)
                        {
                            DateTime DtRMSVALATLTRT = myutil.ConvertDT(myutil.gstrDBToday()).AddDays(-Conversion.Val(strRMSVALATLTRT));
                            string StrNewRMSVALATLTRT = DtRMSVALATLTRT.ToString("yyyyMMdd");
                            strSQL += " and mk_dt >='" + StrNewRMSVALATLTRT + "'";
                        }
                        strSQL += " and mk_dt <='" + myutil.gstrDBToday() + "') ";
                        myLib.ExecSQL(strSQL, curCon);


                        strSQL = "Update #TmpHolidng set tmp_rate = mk_closerate from market_rates a with (nolock) where mk_exchange = 'N' and mk_scripcd=tmp_scripcd and tmp_exchange = 'N'" + myutil.newline();
                        strSQL += " and mk_dt= (select max(mk_dt) from market_rates with(nolock) where mk_scripcd= tmp_scripcd and mk_exchange = 'N'" + myutil.newline();
                        if (Conversion.Val(strRMSVALATLTRT) > 0)
                        {
                            string StrNewRMSVALATLTRT;
                            DateTime DtRMSVALATLTRT = myutil.ConvertDT(myutil.gstrDBToday()).AddDays(-Conversion.Val(strRMSVALATLTRT));
                            StrNewRMSVALATLTRT = DtRMSVALATLTRT.ToString("yyyyMMdd");
                            strSQL += " and mk_dt >='" + StrNewRMSVALATLTRT + "'";
                        }
                        strSQL += " and mk_dt <='" + myutil.gstrDBToday() + "') ";
                        myLib.ExecSQL(strSQL, curCon);


                        strSQL = "Update #TmpHolidng set tmp_rate = mk_closerate from market_rates a with (nolock) where mk_exchange = 'N' and mk_scripcd=tmp_scripcd and tmp_rate = 0 and tmp_exchange = 'B' " + myutil.newline();
                        strSQL += " and mk_dt= (select max(mk_dt) from market_rates with(nolock) where mk_scripcd= tmp_scripcd and mk_exchange = 'N' " + myutil.newline();
                        if (Conversion.Val(strRMSVALATLTRT) > 0)
                        {
                            string StrNewRMSVALATLTRT;
                            DateTime DtRMSVALATLTRT = myutil.ConvertDT(myutil.gstrDBToday()).AddDays(-Conversion.Val(strRMSVALATLTRT));
                            StrNewRMSVALATLTRT = DtRMSVALATLTRT.ToString("yyyyMMdd");
                            strSQL += " and mk_dt >='" + StrNewRMSVALATLTRT + "'";
                        }
                        strSQL += " and mk_dt <='" + myutil.gstrDBToday() + "') ";
                        myLib.ExecSQL(strSQL, curCon);


                        strSQL = "Update #TmpHolidng set tmp_rate = mk_closerate from market_rates a with (nolock) where mk_exchange = 'B' and mk_scripcd=tmp_scripcd and tmp_rate = 0 and tmp_exchange = 'N' " + myutil.newline();
                        strSQL += " and mk_dt= (select max(mk_dt) from market_rates with(nolock) where mk_scripcd=tmp_scripcd and mk_exchange = 'B' " + myutil.newline();
                        if (Conversion.Val(strRMSVALATLTRT) > 0)
                        {
                            string StrNewRMSVALATLTRT;
                            DateTime DtRMSVALATLTRT = myutil.ConvertDT(myutil.gstrDBToday()).AddDays(-Conversion.Val(strRMSVALATLTRT));
                            StrNewRMSVALATLTRT = DtRMSVALATLTRT.ToString("yyyyMMdd");
                            strSQL += " and mk_dt >='" + StrNewRMSVALATLTRT + "'";
                        }
                        strSQL += " and mk_dt <='" + myutil.gstrDBToday() + "')";
                        myLib.ExecSQL(strSQL, curCon);

                        if (strFiller == "Y")
                        {
                            //dtChdHCut
                            strSQL = "update #TmpHolidng set tmp_rate = Round((case tmp_exchange When 'B' then tmp_rate*(100-sc_bsehaircut)/100 else tmp_rate*(100-sc_nsehaircut)/100 end),2) " + myutil.newline() +
                                    " from #ScrpRate where tmp_scripcd=sc_scripcd";
                            myLib.ExecSQL(strSQL, curCon);

                            strSQL = "select * from #TmpHolidng";
                            DataTable dtHolding = myLib.OpenDataTable(strSQL, curCon);
                        }

                        try
                        {
                            strSQL = "drop table #TmpSharePayout ";
                            myLib.ExecSQL(strSQL, curCon);
                        }
                        catch (Exception)
                        {
                        }
                        finally
                        {
                            strSQL = "Create Table #TmpSharePayout" + myutil.newline() +
                                    " (tmp_clientcd varchar(8), " + myutil.newline() +
                                    " tmp_Holding money, " + myutil.newline() +
                                    " tmp_Balance money, " + myutil.newline() +
                                    " tmp_RMSAmount Money, " + myutil.newline() +
                                    " tmp_CLRequest Money, " + myutil.newline() +
                                    " tmp_Request Money) ";
                            myLib.ExecSQL(strSQL, curCon);
                        }

                        //'Calculate Holding
                        strSQL = "insert into #TmpSharePayout " + myutil.newline() +
                                " select tmp_clientcd,Round(sum(tmp_qty*tmp_rate),2),0,0,0,0 " + myutil.newline() +
                                " From #TmpHolidng " + myutil.newline() +
                                " Group By tmp_clientcd ";
                        myLib.ExecSQL(strSQL, curCon);

                        //'Clculate Request
                        strSQL = " Update #TmpSharePayout " + myutil.newline() +
                                " set tmp_Request = Round(isNull((select sum(rq_qty*rq_rate) " + myutil.newline() +
                                " From Holding_release where rq_clientcd = tmp_clientcd  " + myutil.newline() +
                                " and rq_relflag = 'N'),0),2) ";
                        myLib.ExecSQL(strSQL, curCon);


                        strSQL = "select count(0) From sysobjects where name = 'SharesRequest'";
                        int cnt = myLib.GetScalarValueInt(strSQL);
                        if (cnt > 0)
                        {
                            strSQL = " Update #TmpSharePayout  set tmp_CLRequest = X.Amount From" + myutil.newline() +
                                    " (select tmp_clientcd, Round(isnull(sum(rq_qty*tmp_rate),0),2)  Amount " + myutil.newline() +
                                    " From SharesRequest , #TmpHolidng " + myutil.newline() +
                                    " where(rq_clientcd = tmp_clientcd)" + myutil.newline() +
                                    " and tmp_scripcd=Rq_Scripcd " + myutil.newline() +
                                    " and Rq_Satus1 = 'P'" + myutil.newline() +
                                    " Group By tmp_clientcd ) X" + myutil.newline() +
                                    " Where #TmpSharePayout.tmp_clientcd = X.tmp_clientcd";
                            myLib.ExecSQL(strSQL, curCon);
                        }

                        strSQL = " Update #TmpSharePayout " + myutil.newline() +
                                " set tmp_Balance = isNull( (select sum(ld_amount) " + myutil.newline() +
                                " From Ledger where ld_clientcd = tmp_clientcd),0)";
                        myLib.ExecSQL(strSQL, curCon);

                        strSQL = " select tnc_futureyn,tnc_filler2 from tradenetcontrol where Tnc_optcode='947'";
                        DataTable dtOpen = myLib.OpenDataTable(strSQL, curCon);
                        if (dtOpen.Rows.Count > 0)
                        {
                            if (dtOpen.Rows[0]["tnc_futureyn"].ToString().Trim() == "L")
                            {
                                strSQL = " Update #TmpSharePayout set tmp_RMSAmount = Case When tmp_Balance <= 0 then tmp_Holding else Case When (tmp_Holding - (tmp_Balance*(isNull((" + dtOpen.Rows[0]["tnc_filler2"].ToString().Trim() + "),0))/100)) > 0 then (tmp_Holding - (tmp_Balance*(isNull((" + dtOpen.Rows[0]["tnc_filler2"].ToString().Trim() + " ),0))/100)) else 0 end end ";
                                myLib.ExecSQL(strSQL, curCon);
                            }
                            else if (dtOpen.Rows[0]["tnc_futureyn"].ToString().Trim() == "R")
                            {
                                strSQL = " Update #TmpSharePayout " + myutil.newline() +
                                        " set tmp_RMSAmount = isNull( (select sum(Rs_SharePayout) " + myutil.newline() +
                                        " From Rms_Summary where rs_clientcd = tmp_clientcd " + myutil.newline() +
                                        " and Rs_dt = (select max(rs_dt) From rms_summary Where Right(rs_CompanyCode,1) Not in ('X' ,'Z') )),0) ";
                                myLib.ExecSQL(strSQL, curCon);
                            }

                            if (dtOpen.Rows[0]["tnc_futureyn"].ToString().Trim() == "L")
                            {
                                strSQL = "select tmp_clientcd, cm_Name ,  tmp_Balance , tmp_Holding , tmp_RMSAmount , tmp_Request,tmp_CLRequest " + myutil.newline() +
                                        " From #TmpSharePayout,Client_master " + myutil.newline() +
                                        " Where(tmp_clientcd = cm_cd) and tmp_RMSAmount > 0 " + myutil.newline() +
                                        " order by cm_cd ";
                            }
                            else if (dtOpen.Rows[0]["tnc_futureyn"].ToString().Trim() == "R")
                            {
                                strSQL = "select tmp_clientcd, cm_Name ,  tmp_Balance , tmp_Holding , tmp_RMSAmount , tmp_Request,tmp_CLRequest " + myutil.newline() +
                                        " From #TmpSharePayout,Client_master " + myutil.newline() +
                                        " Where(tmp_clientcd = cm_cd) and tmp_RMSAmount >= 0 " + myutil.newline() +
                                        " order by cm_cd ";
                            }
                        }

                        dtMainGrd = myLib.OpenDataTable(strSQL, curCon);
                        int intTotRowCnt = dtMainGrd.Rows.Count - 1;
                        if (dtMainGrd.Rows.Count > 0)
                        {
                            sp = dtMainGrd.AsEnumerable()
                            .Select(row => new SharePayoutModel
                            {
                                Code = row.Field<string>("tmp_clientcd").ToString().Trim(),
                                Name = row.Field<string>("cm_Name").ToString().Trim(),
                                LegderBalance = row.Field<decimal>("tmp_Balance"),
                                Holding = row.Field<decimal>("tmp_Holding"),
                                RMSAmount = row.Field<decimal>("tmp_RMSAmount"),
                                RequestAmt = row.Field<decimal>("tmp_Request"),
                                ClientRequest = row.Field<decimal>("tmp_CLRequest"),
                            }).ToList();
                        }
                    }
                }
                catch (Exception)
                {

                    throw;
                }
            }
            return sp;
        }
        public IEnumerable<SharePayoutEditModel> ProcessSharePayputRequestEdit(string Code, string name, decimal ledbal, decimal holding, decimal rmsamount)
        {
            List<SharePayoutEditModel> shareedit = new List<SharePayoutEditModel>();
            LibraryModel myLib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();

            try
            {
                using (SqlConnection curCon = new SqlConnection(connectionstring))
                {
                    curCon.Open();
                    try
                    {
                        strSQL = "drop table #ScrpRate";
                        myLib.ExecSQL(strSQL, curCon);
                    }
                    catch (Exception)
                    {
                    }
                    finally
                    {
                        strSQL = "Create Table #ScrpRate ( " + myutil.newline() +
                                " sc_scripcd VarChar(6)," + myutil.newline() +
                                " sc_Rate money, " + myutil.newline() +
                                " sc_BseHairCut money, " + myutil.newline() +
                                " sc_NseHairCut money )";
                        myLib.ExecSQL(strSQL, curCon);
                    }
                    strSQL = "insert into #ScrpRate select ss_cd ,case when ss_bseratedt > ss_nseratedt then ss_bserate else ss_nserate end , 0 , 0 from securities ";
                    myLib.ExecSQL(strSQL, curCon);


                    try
                    {
                        strSQL = "drop table #TmpHolidng";
                        myLib.ExecSQL(strSQL, curCon);
                    }
                    catch (Exception)
                    {
                    }
                    finally
                    {
                        strSQL = "Create Table #TmpHolidng(" + myutil.newline() +
                                " tmp_clientcd Varchar(8), " + myutil.newline() +
                                " tmp_scripcd varchar(6), " + myutil.newline() +
                                " tmp_qty numeric, " + myutil.newline() +
                                " tmp_rate money, " + myutil.newline() +
                                " tmp_exchange varchar(1)," + myutil.newline() +
                                " tmp_Stlmnt varchar(9))";
                        myLib.ExecSQL(strSQL, curCon);
                    }

                    strSQL = "select tnc_filler1 from tradenetcontrol where tnc_optcode='947'";
                    string strFiller = myLib.GetScalarValueString(strSQL).Trim();

                    strSQL = "insert into #TmpHolidng " + myutil.newline();
                    strSQL += "select dm_clientcd , dm_scripcd , sum(dm_qty) , sc_rate ,se_exchange,se_stlmnt " + myutil.newline();
                    strSQL += " From Demat, Client_master, settlements, ourdps , #ScrpRate " + myutil.newline();
                    strSQL += " where dm_clientcd = cm_Cd And dm_stlmnt = se_stlmnt and dm_scripcd = sc_scripcd  " + myutil.newline();
                    strSQL += " and dm_ourdp = od_cd " + myutil.newline();
                    strSQL += " and od_acttype in('B','M') and cm_freezeyn='N'" + myutil.newline();
                    //Trim(Session("strActBase")) <> ""
                    string strActBase = (string)HttpContext.Current.Session["strActBase"];
                    if (strActBase.Trim() != "")
                    {
                        strSQL += " and od_cd in (" + strActBase + ")" + myutil.newline();
                    }
                    strSQL += " and dm_clientcd = '" + Code + "'" + myutil.newline();
                    strSQL += " and dm_type= 'BC' and dm_locked = 'N' and dm_transfered = 'N'" + myutil.newline();
                    strSQL += " and se_payoutdt <= '" + myutil.gstrDBToday() + "'" + myutil.newline();
                    strSQL += " Group By dm_clientcd , dm_scripcd ,sc_rate,se_exchange ,se_stlmnt" + myutil.newline();
                    myLib.ExecSQL(strSQL, curCon);

                    string strRMSVALATLTRT = myLib.GetSysPARM("RMSVALATLTRT");

                    strSQL = "Update #TmpHolidng set tmp_rate = mk_closerate from market_rates a with (nolock) where mk_exchange = 'B' and mk_scripcd=tmp_scripcd and tmp_exchange = 'B'" + myutil.newline();
                    strSQL += " and mk_dt= (select max(mk_dt) from market_rates with(nolock) where mk_scripcd=tmp_scripcd and mk_exchange = 'B' " + myutil.newline();
                    if (Conversion.Val(strRMSVALATLTRT) > 0)
                    {
                        string StrNewRMSVALATLTRT;
                        DateTime DtRMSVALATLTRT = myutil.ConvertDT(myutil.gstrDBToday()).AddDays(-Conversion.Val(strRMSVALATLTRT));
                        StrNewRMSVALATLTRT = DtRMSVALATLTRT.ToString("yyyyMMdd");
                        strSQL += " and mk_dt >='" + StrNewRMSVALATLTRT + "'";
                    }
                    strSQL += " and mk_dt <='" + myutil.gstrDBToday() + "') " + myutil.newline();
                    myLib.ExecSQL(strSQL, curCon);

                    strSQL = "Update #TmpHolidng set tmp_rate = mk_closerate from market_rates a with (nolock) where mk_exchange = 'N' and mk_scripcd=tmp_scripcd and tmp_exchange = 'N'" + myutil.newline();
                    strSQL += " and mk_dt= (select max(mk_dt) from market_rates with(nolock) where mk_scripcd= tmp_scripcd and mk_exchange = 'N'" + myutil.newline();
                    if (Conversion.Val(strRMSVALATLTRT) > 0)
                    {
                        string StrNewRMSVALATLTRT;
                        DateTime DtRMSVALATLTRT = myutil.ConvertDT(myutil.gstrDBToday()).AddDays(-Conversion.Val(strRMSVALATLTRT));
                        StrNewRMSVALATLTRT = DtRMSVALATLTRT.ToString("yyyyMMdd");
                        strSQL += " and mk_dt >='" + StrNewRMSVALATLTRT + "'";
                    }
                    strSQL += " and mk_dt <='" + myutil.gstrDBToday() + "') ";
                    myLib.ExecSQL(strSQL, curCon);


                    strSQL = "Update #TmpHolidng set tmp_rate = mk_closerate from market_rates a with (nolock) where mk_exchange = 'N' and mk_scripcd=tmp_scripcd and tmp_rate = 0 and tmp_exchange = 'B' " + myutil.newline();
                    strSQL += " and mk_dt= (select max(mk_dt) from market_rates with(nolock) where mk_scripcd= tmp_scripcd and mk_exchange = 'N' " + myutil.newline();
                    if (Conversion.Val(strRMSVALATLTRT) > 0)
                    {
                        string StrNewRMSVALATLTRT;
                        DateTime DtRMSVALATLTRT = myutil.ConvertDT(myutil.gstrDBToday()).AddDays(-Conversion.Val(strRMSVALATLTRT));
                        StrNewRMSVALATLTRT = DtRMSVALATLTRT.ToString("yyyyMMdd");
                        strSQL += " and mk_dt >='" + StrNewRMSVALATLTRT + "'";
                    }
                    strSQL += " and mk_dt <='" + myutil.gstrDBToday() + "') ";
                    myLib.ExecSQL(strSQL, curCon);


                    strSQL = "Update #TmpHolidng set tmp_rate = mk_closerate from market_rates a with (nolock) where mk_exchange = 'B' and mk_scripcd=tmp_scripcd and tmp_rate = 0 and tmp_exchange = 'N' " + myutil.newline();
                    strSQL += " and mk_dt= (select max(mk_dt) from market_rates with(nolock) where mk_scripcd=tmp_scripcd and mk_exchange = 'B' " + myutil.newline();
                    if (Conversion.Val(strRMSVALATLTRT) > 0)
                    {
                        string StrNewRMSVALATLTRT;
                        DateTime DtRMSVALATLTRT = myutil.ConvertDT(myutil.gstrDBToday()).AddDays(-Conversion.Val(strRMSVALATLTRT));
                        StrNewRMSVALATLTRT = DtRMSVALATLTRT.ToString("yyyyMMdd");
                        strSQL += " and mk_dt >='" + StrNewRMSVALATLTRT + "'";
                    }
                    strSQL += " and mk_dt <='" + myutil.gstrDBToday() + "')";
                    myLib.ExecSQL(strSQL, curCon);





                    string strRate = " , sum( tmp_rate * tmp_qty) / SUM(tmp_qty) Rate ";
                    string strVal = " , sum(tmp_rate * abs(tmp_qty)) Value  ";

                    DataTable DSscrp = null;
                    strSQL = "select tmp_clientcd dm_clientcd , tmp_scripcd dm_scripcd ,ss_name, sum(-tmp_qty) Qty ,cm_name, convert(decimal(15,0), 0) RequestQty, convert(decimal(15,2), 0) RequestValue" + myutil.newline() +
                            strRate + myutil.newline() +
                            strVal + myutil.newline() +
                            " From #TmpHolidng, Client_master, securities " + myutil.newline() +
                            " where tmp_clientcd = cm_Cd and tmp_scripcd = ss_cd  " + myutil.newline() +
                            " and tmp_clientcd = '" + Code + "'" + myutil.newline() +
                            " Group By tmp_clientcd , tmp_scripcd ,ss_name,cm_name" + myutil.newline() +
                            " Order  by ss_name";
                    DataSet dsOpen = myLib.OpenDataSet(strSQL, curCon);
                    if (dsOpen.Tables[0].Rows.Count > 0)
                    {
                        if (strFiller == "Y")
                        {
                            DSscrp = (DataTable)HttpContext.Current.Session["ChdHCut"];
                            for (int V = 0; V < dsOpen.Tables[0].Rows.Count; V++)
                            {
                                DSscrp.DefaultView.RowFilter = " sc_scripcd = '" + dsOpen.Tables[0].Rows[V]["dm_scripcd"].ToString().Trim() + "' ";
                                DataView DV;
                                DV = DSscrp.DefaultView;

                                if (Math.Abs(double.Parse(dsOpen.Tables[0].Rows[V]["qty"].ToString())) > 0)
                                {
                                    dsOpen.Tables[0].Rows[V]["Rate"] = Math.Round(double.Parse(dsOpen.Tables[0].Rows[V]["Rate"].ToString()) * (100 - double.Parse(DV[0][1].ToString())) / 100, 2);
                                    dsOpen.Tables[0].Rows[V]["Value"] = Math.Round(double.Parse(dsOpen.Tables[0].Rows[V]["Rate"].ToString()) * (100 - double.Parse(DV[0][1].ToString())) / 100, 2) * Math.Abs(double.Parse(dsOpen.Tables[0].Rows[V]["qty"].ToString()));
                                }
                                else
                                {
                                    dsOpen.Tables[0].Rows[V]["Rate"] = "0.00";
                                    dsOpen.Tables[0].Rows[V]["Value"] = "0.00";
                                }
                                dsOpen.AcceptChanges();
                            }
                        }
                    }

                    strSQL = "select tmp_clientcd dm_clientcd , tmp_scripcd dm_scripcd ,ss_name, sum(-tmp_qty)Qty ,cm_name,tmp_Stlmnt dm_stlmnt " + myutil.newline() +
                            strRate + myutil.newline() +
                            strVal + myutil.newline() +
                            " From #TmpHolidng, Client_master, securities " + myutil.newline() +
                            " where tmp_clientcd = cm_Cd and tmp_scripcd = ss_cd  " + myutil.newline() +
                            " and tmp_clientcd = '" + Code + "'" + myutil.newline() +
                            " Group By tmp_clientcd , tmp_scripcd ,ss_name,cm_name,tmp_Stlmnt" + myutil.newline() +
                            " Order  by ss_name";
                    DataTable dtdetail = myLib.OpenDataTable(strSQL, curCon);
                    HttpContext.Current.Session["view"] = dtdetail;

                    strSQL = " select * from Holding_Release where rq_clientcd='" + Code + "' and rq_relflag='N' ";
                    DataTable dtHoldingRelease = myLib.OpenDataTable(strSQL, curCon);
                    double IntRval = 0;
                    double IntRate = 0;
                    double intRtot = 0;

                    if (dtHoldingRelease.Rows.Count > 0)
                    {
                        for (int l = 0; l < dtHoldingRelease.Rows.Count; l++)
                        {
                            for (int k = 0; k < dsOpen.Tables[0].Rows.Count; k++)
                            {
                                string scrip = dsOpen.Tables[0].Rows[k]["dm_scripcd"].ToString().Trim();

                                if (scrip.Trim() == dtHoldingRelease.Rows[l]["rq_scripcd"].ToString().Trim())
                                {
                                    dsOpen.Tables[0].Rows[k]["RequestQty"] = int.Parse(dtHoldingRelease.Rows[l]["rq_qty"].ToString());
                                    IntRval = int.Parse(dtHoldingRelease.Rows[l]["rq_qty"].ToString());
                                    IntRate = double.Parse(dsOpen.Tables[0].Rows[k]["Rate"].ToString());

                                    dsOpen.Tables[0].Rows[k]["RequestValue"] = IntRval * IntRate;
                                    intRtot += double.Parse(dsOpen.Tables[0].Rows[k]["RequestValue"].ToString());
                                }
                            }
                        }
                        dsOpen.AcceptChanges();
                    }

                    IntRval = 0;
                    IntRate = 0;
                    intRtot = 0;

                    if (Conversion.Val(myLib.fnFireQuery("sysobjects", "count(0)", "name", "SharesRequest", false)) > 0)
                    {
                        strSQL = " select Rq_Scripcd,Rq_Qty from SharesRequest where Rq_Clientcd='" + Code + "' and Rq_Satus1='P' ";
                        DataTable dtQty = myLib.OpenDataTable(strSQL);
                        if (dtQty.Rows.Count > 0)
                        {
                            for (int l = 0; l < dtQty.Rows.Count; l++)
                            {
                                for (int k = 0; k < dsOpen.Tables[0].Rows.Count; k++)
                                {
                                    string scrip = dsOpen.Tables[0].Rows[k]["dm_scripcd"].ToString().Trim();
                                    if (scrip.Trim() == dtQty.Rows[k]["Rq_Scripcd"].ToString().Trim())
                                    {
                                        dsOpen.Tables[0].Rows[k]["RequestQty"] = int.Parse(dtQty.Rows[k]["Rq_Qty"].ToString());
                                        IntRval = int.Parse(dtQty.Rows[l]["Rq_Qty"].ToString());
                                        IntRate = double.Parse(dsOpen.Tables[0].Rows[k]["Rate"].ToString());
                                        dsOpen.Tables[0].Rows[k]["RequestValue"] = IntRval * IntRate;
                                        if (strFiller == "Y")
                                        {
                                            DSscrp.DefaultView.RowFilter = " sc_scripcd = '" + dtQty.Rows[l]["Rq_Scripcd"].ToString().Trim() + "' ";
                                            DataView DV = new DataView();
                                            DV = DSscrp.DefaultView;
                                            IntRate = Math.Round(double.Parse(dsOpen.Tables[0].Rows[k]["Rate"].ToString()) * (100 - double.Parse(DV[0][1].ToString())) / 100, 2);
                                            dsOpen.Tables[0].Rows[k]["RequestValue"] = Math.Round(double.Parse(dsOpen.Tables[0].Rows[k]["Rate"].ToString()) * (100 - double.Parse(DV[0][1].ToString())) / 100, 2) * Math.Abs(Conversion.Val(dsOpen.Tables[0].Rows[k]["RequestQty"].ToString()));
                                        }
                                    }

                                }

                            }
                            dsOpen.AcceptChanges();
                        }


                    }

                    SharePayoutModel clsedit = new SharePayoutModel()
                    {
                        Code = Code,
                        Name = name,
                        LegderBalance = ledbal,
                        Holding = holding,
                        RMSAmount = rmsamount
                    };

                    if (dsOpen.Tables[0].Rows.Count > 0)
                    {
                        DataTable dtShare = dsOpen.Tables[0];
                        shareedit = dtShare.AsEnumerable()
                        .Select(row => new SharePayoutEditModel
                        {
                            ScripCode = row.Field<string>("dm_scripcd"),
                            ScripName = row.Field<string>("ss_name"),
                            HoldQty = row.Field<decimal>("Qty"),
                            HoldValue = row.Field<decimal>("Value"),
                            Rate = row.Field<decimal>("Rate"),
                            RequestQty = row.Field<decimal>("RequestQty"),
                            RequestValue = row.Field<decimal>("RequestValue"),
                            GetClientSummary = clsedit
                        }).ToList();
                    }
                }
            }
            catch (Exception ex)
            {
                string error = ex.Message;
            }



            return shareedit;
        }

        public IEnumerable<SettlementQtyModel> GetSettlementQty(string Code, string scrip)
        {
            LibraryModel mylib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            List<SettlementQtyModel> stlmnt = new List<SettlementQtyModel>();

            DataTable dtstlmnt = (DataTable)HttpContext.Current.Session["view"];

            try
            {
                using (SqlConnection curCon = new SqlConnection(connectionstring))
                {
                    curCon.Open();

                    try
                    {
                        strSQL = "Drop table #tmpScrpDtl";
                        mylib.ExecSQL(strSQL, curCon);
                    }
                    catch (Exception)
                    {
                    }
                    finally
                    {
                        strSQL = "Create table #tmpScrpDtl ( " + myutil.newline() +
                                " [dm_clientcd] [char] (20) Not Null," + myutil.newline() +
                                " [dm_scripcd] [varchar] (20) Not Null," + myutil.newline() +
                                " [ss_name] [varchar] (50) Not Null," + myutil.newline() +
                                " [Qty] [numeric]  Not Null," + myutil.newline() +
                                " [cm_name] [char] (50) Not Null," + myutil.newline() +
                                " [dm_stlmnt] [varchar] (10) Not Null," + myutil.newline() +
                                " [Rate] [numeric] Not Null," + myutil.newline() +
                                " [Value] [numeric] Not Null)";
                        mylib.ExecSQL(strSQL, curCon);
                    }


                    using (SqlBulkCopy bulkCopy = new SqlBulkCopy(curCon))
                    {
                        bulkCopy.DestinationTableName = "#tmpScrpDtl";
                        bulkCopy.WriteToServer(dtstlmnt);
                    }

                    strSQL = "select * from #tmpScrpDtl where dm_scripcd='" + scrip + "'";
                    DataTable dtscrip = mylib.OpenDataTable(strSQL, curCon);
                    if (dtscrip.Rows.Count > 0)
                    {
                        stlmnt = dtscrip.AsEnumerable()
                        .Select(row => new SettlementQtyModel
                        {
                            Stlmnt = row.Field<string>("dm_stlmnt").Trim(),
                            Qty = row.Field<decimal>("Qty"),
                        }).ToList();
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }


            return stlmnt;
        }

        public void SaveSharePayout(IEnumerable<SharePayoutEditModel> sharepayout, string client)
        {
            UtilityModel myutil = new UtilityModel();
            LibraryModel mylib = new LibraryModel(true);

            try
            {
                using (SqlConnection curCon = new SqlConnection(connectionstring))
                {
                    curCon.Open();

                    strSQL = "delete from holding_release where rq_clientcd='" + client + "' and rq_relflag='N'";
                    mylib.ExecSQL(strSQL, curCon);

                    foreach (var item in sharepayout)
                    {
                        if (item.RequestQty > 0)
                        {
                            strSQL = "Select count(0) From sysobjects Where name = 'SharesRequest'";
                            int intcnt = mylib.GetScalarValueInt(strSQL, curCon);
                            if (intcnt > 0)
                            {
                                strSQL = " Update SharesRequest set Rq_Satus1='R',Rq_Note='Changed By Branch' WHERE rq_clientcd='" + client + "' and Rq_Satus1='P'";
                                mylib.ExecSQL(strSQL, curCon);
                            }

                            strSQL = "insert into holding_release " + myutil.newline() +
                                    " Select '' rq_dpid,'" + client + "' rq_clientcd, " + myutil.newline() +
                                    " '" + item.ScripCode + "' rq_scripcd, " + item.RequestQty + " rq_qty, '" + myutil.gstrDBToday() + "' rq_date ,'' rq_stlmnt,'0' rq_relqty, " + myutil.newline() +
                                    item.Rate + " rq_rate," + myutil.newline() +
                                    " 'N' rq_relflag, 0 rq_instno  ,'' rq_ourdp ,'0' rq_DmSrNo ," + myutil.newline() +
                                    " '" + myutil.gstrUserCd() + "' mkrid,'" + myutil.gstrDBToday() + "' mkrdt,'" + myutil.GetTimeNow() + "' mkrtm ,'" + myutil.gstrPCNname() + "' machineId ";
                            mylib.ExecSQL(strSQL, curCon);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                string strMsg = ex.Message;
                throw;
            }
        }
    }
    public class modBulkPayoutProcess : ConnectionModel
    {
        public string strDate;
        public string strDPID;
        public string gstrDBToday = DateTime.Today.ToString("yyyyMMdd");
        public string format;
        public string type;
        public string Code;

        public modBulkPayoutProcess()
        { }
        public modBulkPayoutProcess(string _strDate, string _strDPID, string _format, string _type, string _Code)
        {
            this.strDate = _strDate;
            this.strDPID = _strDPID;
            this.format = _format;
            this.type = _type;
            this.Code = _Code;
        }

        public void SaveDataBulkPayout(List<BulkPayoutModel> uList, string strDPID, string strDate)
        {
            UtilityModel myutil = new UtilityModel();
            SqlTransaction objTran = null;
            bool begintran = false;
            try
            {
                using (SqlConnection curCon = new SqlConnection(connectionstring))
                {
                    curCon.Open();
                    objTran = curCon.BeginTransaction();
                    begintran = true;
                    foreach (var item in uList)
                    {

                        if (item.Amount > 0)
                        {
                            string gstrTime = System.DateTime.Now.ToString("HH:mm:ss");

                            LibraryModel mylib = new LibraryModel(true);
                            strSQL = "Delete from payout_release where rq_dpid = '" + strDPID.Trim() + "'" + myutil.newline() +
                                    " and rq_clientcd = '" + item.Code + "' and rq_relflag = 'N' ";
                            mylib.ExecSQL(strSQL, curCon, objTran);

                            strSQL = "insert into payout_release " + myutil.newline() +
                                    " Select '" + strDPID + "' rq_dpid,'" + item.Code.Trim() + "' rq_clientcd , " + item.Amt1 + " rq_amt," + myutil.newline() +
                                    " '" + strDate + "' rq_date," + item.Amount + " rq_relAmt,'N' rq_relflag,0 rq_RcSrNo," + myutil.newline() +
                                    " '" + myutil.gstrUserCd() + "' mkrid,'" + gstrDBToday + "' mkrdt, " + myutil.newline() +
                                    " '" + gstrTime + "' mkrtm,'" + System.Environment.MachineName + "' machineId";
                            mylib.ExecSQL(strSQL, curCon, objTran);
                        }
                    }
                    objTran.Commit();
                    begintran = false;
                }
            }
            catch (Exception)
            {
                if (begintran == true)
                {
                    objTran.Rollback();
                }
            }
        }

        public IEnumerable<BulkPayoutModel> GetBulkPayout()
        {
            string strTable1 = "#Style2";
            string strTmptblReport = "#tmptblReport";
            string strClientWhere = "";
            UtilityModel myutil = new UtilityModel();
            List<BulkPayoutModel> bp = new List<BulkPayoutModel>();

            LibraryModel mylib = new LibraryModel();

            if (Code != "")
            {
                if (type == "CL")
                {
                    strClientWhere = " and cm_cd = '" + Code + "'";
                }
                else if (type == "BR")
                {
                    strClientWhere = " and cm_brboffcode = '" + Code + "'";
                }
                else if (type == "GR")
                {
                    strClientWhere = " and cm_groupcd = '" + Code + "'";
                }
                else if (type == "FM")
                {
                    strClientWhere = " and cm_familycd = '" + Code + "'";
                }
                else if (type == "SB")
                {
                    strClientWhere = " and cm_subbroker = '" + Code + "'";
                }
            }

            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {
                curCon.Open();

                try
                {
                    strSQL = "Drop Table " + strTable1;
                    mylib.ExecSQL(strSQL, curCon);
                }
                catch (Exception)
                {
                }
                finally
                {
                    strSQL = " CREATE TABLE " + strTable1 + " ( " + myutil.newline() +
                            " [Client] [char](8) NOT NULL ," + myutil.newline() +
                            " [Name] [char](75) NULL," + myutil.newline() +
                            " [amt1] [money] NOT NULL, " + myutil.newline() +
                            " [amt2] [money] NOT NULL, " + myutil.newline() +
                            " [amt3] [money] NOT NULL, " + myutil.newline() +
                            " [billamt] [money] NOT NULL, " + myutil.newline() +
                            " [otheramt] [money] NOT NULL, " + myutil.newline() +
                            " [minamt] [money] NOT NULL, " + myutil.newline() +
                            " srno [numeric](18, 0) IDENTITY (1, 1) NOT NULL primary key" + myutil.newline() +
                            " ) ";
                    mylib.ExecSQL(strSQL, curCon);
                }


                try
                {
                    strSQL = "Drop Table " + strTmptblReport;
                    mylib.ExecSQL(strSQL, curCon);
                }
                catch (Exception)
                { }
                finally
                {
                    strSQL = " CREATE TABLE " + strTmptblReport + " ( " + myutil.newline() +
                            " [Client] [char](8) NOT NULL ," + myutil.newline() +
                            " [amt1] [money] NOT NULL, " + myutil.newline() +
                            " [amt2] [money] NOT NULL, " + myutil.newline() +
                            " [amt3] [money] not null, " + myutil.newline() +
                            " [dt] [char](8) NOT NULL " + myutil.newline() +
                            " ) ";
                    mylib.ExecSQL(strSQL, curCon);
                }
                try
                {
                    strSQL = "Insert into " + strTmptblReport + " Select cm_cd , Sum(Case When L1.ld_dt <= '" + strDate + "' then L1.ld_amount else 0 end) as amt1, " + myutil.newline() +
                            " Sum(Case When L1.ld_dt > '" + strDate + "' and L1.ld_debitflag = 'D' then L1.ld_amount else 0 end) amt2 , " + myutil.newline() +
                            " amt3 = 0, " + myutil.newline() +
                            " max(Case When ld_dt > '" + strDate + "' and ld_debitflag = 'D' then ld_dt else 0 end) dt " + myutil.newline() +
                            " from Client_Master, Ledger L1" + myutil.newline() +
                            " where L1.ld_clientcd = cm_cd " + myutil.newline() +
                            " and cm_freezeyn = 'N' " + myutil.newline() +
                            " and ld_dpid = '" + strDPID + "' " + strClientWhere + myutil.newline() +
                            " and exists " + myutil.LoginAccess("L1.ld_clientcd") + myutil.newline() +
                            " group by  cm_cd ";
                    mylib.ExecSQL(strSQL, curCon);
                }
                catch (Exception ex)
                {


                }

                strSQL = "Delete from " + strTmptblReport + " where amt1 = 0 ";
                mylib.ExecSQL(strSQL, curCon);

                if (false)
                {
                    strSQL = "delete " + strTmptblReport + " from " + strTmptblReport + " inner join client_info on client=cm2_cd and cm_fundpayout <> 'A' ";
                    mylib.ExecSQL(strSQL, curCon);
                }


                strSQL = "Delete from " + strTmptblReport + " where Client in (  select rq_clientcd from payout_release,client_master where rq_clientcd = cm_cd and rq_relflag='N'  and rq_dpid = 'ABC' group by rq_clientcd)";
                mylib.ExecSQL(strSQL, curCon);

                decimal dblAmt1 = 0;
                decimal dblAmt2 = 0;
                decimal dblFinal = 0;
                strSQL = "Select cm_cd, cm_name, amt1,amt2,amt3, dt,cm_groupcd, cm_familycd, gr_desc, fm_desc, cm_add1, cm_add2, cm_add3, cm_tele1, cm_tele2 " + myutil.newline() +
                        " from Client_master, " + strTmptblReport + ", Group_master, Family_master, Branch_master  " + myutil.newline() +
                        " where client = cm_cd and cm_groupcd= gr_cd and cm_familycd= fm_cd and cm_brboffcode = bm_branchcd Order By cm_cd";
                DataTable dtBulk = mylib.OpenDataTable(strSQL, curCon);
                for (int iRow = 0; iRow < dtBulk.Rows.Count - 1; iRow++)
                {


                    string strGroupCode = dtBulk.Rows[iRow]["cm_cd"].ToString().Trim();
                    do
                    {
                        dblAmt1 = decimal.Parse(dtBulk.Rows[iRow]["Amt1"].ToString());
                        dblAmt2 = decimal.Parse(dtBulk.Rows[iRow]["Amt1"].ToString()) + (decimal.Parse(dtBulk.Rows[iRow]["Amt2"].ToString()) > 0 ? decimal.Parse(dtBulk.Rows[iRow]["Amt2"].ToString()) : 0);

                        dblFinal = dblAmt2 + (decimal.Parse(dtBulk.Rows[iRow]["Amt3"].ToString()) > 0 ? decimal.Parse(dtBulk.Rows[iRow]["Amt3"].ToString()) : 0);
                        if (dblFinal < 0)
                        {
                            strSQL = "Insert into " + strTable1 + " (Client , Name, Amt1, Amt2, amt3, billamt, otheramt, minamt) Values ('" + dtBulk.Rows[iRow]["cm_cd"].ToString().Trim() + "','" + myutil.newline() +
                                    Strings.Left(dtBulk.Rows[iRow]["cm_name"].ToString().Trim(), 50) + "'," + dblAmt1 + "," + dblAmt2 + "," + decimal.Parse(dtBulk.Rows[iRow]["Amt3"].ToString()) + "," + myutil.newline() +
                                    " 0, 0 ," + dblFinal + ")";
                            mylib.ExecSQL(strSQL, curCon);
                        }
                        iRow += 1;

                    } while (strGroupCode.Trim() == dtBulk.Rows[iRow]["cm_cd"].ToString().Trim());
                    strSQL = "delete from " + strTable1 + " where amt1 > 0";
                    mylib.ExecSQL(strSQL, curCon);
                }

                try
                {
                    strSQL = "Select client, name, cast(round(abs(amt1),2) as decimal (15,2)) as amt1 , cast(round(abs(amt2),2) as decimal (15,2)) as amt2,cast(round(abs(billamt),2) as decimal (15,2)) as billamt, cast(round(abs(otheramt),2) as decimal (15,2)) as otheramt,cast(round(abs(minamt),2) as decimal (15,2)) as minamt, cast(round(abs(minamt),2) as decimal (15,0)) as srno, 0 Amount " + myutil.newline() +
                            " from " + strTable1 + " order by srno";
                    DataTable dtVal = mylib.OpenDataTable(strSQL, curCon);
                    if (dtVal.Rows.Count > 0)
                    {
                        bp = dtVal.AsEnumerable()
                        .Select(row => new BulkPayoutModel
                        {
                            Code = row.Field<string>("client"),
                            Name = row.Field<string>("name"),
                            Amt1 = row.Field<decimal>("amt1"),
                            Amt2 = row.Field<decimal>("amt2"),
                            Billamt = row.Field<decimal>("billamt"),
                            Otheramt = row.Field<decimal>("otheramt"),
                            Minamt = row.Field<decimal>("minamt"),
                        }).ToList();
                    }
                }
                catch (Exception ex)
                {

                }
            }

            return bp;
        }
    }
    public class modBillsDetails : ConnectionModel
    {

        public string GetBillsSQL(string billdt, string type, bool blnSum = false)
        {
            string NewLn = Environment.NewLine;
            UtilityModel myutil = new UtilityModel();
            if (blnSum)
            {

                strSQL = "select (case When SIGN(fb_amount) > 0 Then 'REC' else 'PAY' end) as Ctype, count(0) ClientCnt , isnull(Abs(Convert(decimal(15, 2), sum(fb_amount))), 0) ClientSum from " + NewLn +
                           " ( " + NewLn +
                           "  select  fb_clientcd, Sum(fb_amount) fb_amount from    " + NewLn +
                            " ( " + NewLn +
                           "  select fb_clientcd, fb_billdt, sum(fb_amount) fb_amount from FBills Where fb_billdt = '" + billdt + "'" + NewLn +

                            "  and exists " + myutil.LoginAccess("fb_clientcd") + NewLn +
                            " group by fb_clientcd, fb_billdt   " + NewLn +
                           " union all " + NewLn +
                           " select bl_clientcd, se_stdt, SUM(bl_amount) from Bills,Settlements Where bl_stlmnt = se_stlmnt and se_stdt = '" + billdt + "'" + NewLn +
                            " and exists " + myutil.LoginAccess("bl_clientcd") + NewLn +
                           "  group by bl_clientcd, se_stdt  " + NewLn +
                           ")xyz " + NewLn +
                           "gRoup By fb_clientcd   " + NewLn +
                           "having  sum(fb_amount) <> 0  ) y " + NewLn +
                           " Group By SIGN(fb_amount)   ";

            }
            else
            {
                //strSQL = " select fb_clientcd, cm_name, abs(convert(decimal(15,2), isnull(sum(fb_amount),0))) BillAmount, COUNT(*) BillCount from " + NewLn +
                //        "  (select fb_clientcd , fb_amount, fb_billdt from FBills  " + NewLn +
                //        "  union all " + NewLn +
                //        "  select bl_clientcd, bl_amount, bl_billdt from  Bills ) xyz, Client_master  " + NewLn +
                //        "  where fb_clientcd=cm_cd   " + NewLn +
                //        "  and exists " + myutil.LoginAccess("fb_clientcd") + NewLn +
                //        "  and fb_billdt= '" + billdt + "'" + NewLn +
                //        "  group by fb_clientcd, cm_name " + NewLn +
                //        "  having sum(fb_amount) " + (type == "R" ? "<" : ">") + " 0" + NewLn +
                //        " Order By abs(convert(decimal(15,2), isnull(sum(fb_amount),0))) desc ";
                strSQL = " select fb_clientcd ,cm_name,  abs(sum(fb_amount)) BillAmount,Sum(BillCnt) BillCount  from (" + NewLn +
                    " select  fb_clientcd, Sum(fb_amount) fb_amount,Sum(BillCnt)  BillCnt from  " + NewLn +
                    "( " + NewLn +
                    " select fb_clientcd, fb_billdt, sum(fb_amount) fb_amount , COUNT(0) BillCnt" + NewLn +
                    " from FBills Where fb_billdt = '" + billdt + "' " + NewLn +
                   "  and exists " + myutil.LoginAccess("fb_clientcd") + NewLn +
                   " group by fb_clientcd, fb_billdt   " + NewLn +
                   " union all " + NewLn +
                   " select bl_clientcd, bl_stlmnt, SUM(bl_amount) , COUNT(0) BillCnt" + NewLn +
                   " from Bills,Settlements Where bl_stlmnt = se_stlmnt and se_stdt = '" + billdt + "' " + NewLn +
                  " and exists " + myutil.LoginAccess("bl_clientcd") + NewLn +
                  "group by bl_clientcd, bl_stlmnt)xyz  " + NewLn +
                  " group By fb_clientcd" + NewLn +
                  " having sum(fb_amount) <> 0  ) y,Client_master" + NewLn +
                  "Where fb_clientcd = cm_cd  Group by fb_clientcd ,cm_name ";



                if (type == "R")
                {
                    strSQL += " having  sum(fb_amount) > 0";
                }
                else
                {
                    strSQL += " having  sum(fb_amount) < 0";
                }
                strSQL += " order by sum(fb_amount) desc";

            }
            return strSQL;
        }

        //public string GetBillsSQL(string billdt, string type, bool blnSum = false)
        //{
        //    string NewLn = Environment.NewLine;
        //    UtilityModel myutil = new UtilityModel();
        //    if (blnSum)
        //    {
        //        strSQL = "select Ctype, isnull(count(distinct fb_clientcd), 0) ClientCnt, isnull(Abs(Convert(decimal(15, 2), sum(fb_amount))), 0) ClientSum from " + NewLn +
        //                " ( " + NewLn +
        //                " select 'REC' Ctype, fb_clientcd, fb_billdt, sum(fb_amount) fb_amount from FBills " + NewLn +
        //                " group by fb_clientcd, fb_billdt " + NewLn +
        //                " having sum(fb_amount) < 0  " + NewLn +
        //                " union all " + NewLn +
        //                " select 'REC' Ctype, bl_clientcd, bl_billdt, SUM(bl_amount) from Bills " + NewLn +
        //                " group by bl_clientcd, bl_billdt " + NewLn +
        //                " having sum(bl_amount) < 0 " + NewLn +
        //                " Union All " + NewLn +
        //                " select 'PAY' Ctype, fb_clientcd, fb_billdt, sum(fb_amount) fb_amount from FBills " + NewLn +
        //                " group by fb_clientcd, fb_billdt " + NewLn +
        //                " having sum(fb_amount) > 0 " + NewLn +
        //                " union all  " + NewLn +
        //                " select 'PAY' Ctype, bl_clientcd, bl_billdt, SUM(bl_amount) from Bills " + NewLn +
        //                " group by bl_clientcd, bl_billdt " + NewLn +
        //                " having sum(bl_amount) > 0 " + NewLn +
        //                " ) xyz " + NewLn +
        //                " where fb_billdt = '" + billdt + "'" + NewLn +
        //                "  and exists " + myutil.LoginAccess("fb_clientcd") + NewLn +
        //                " Group by Ctype ";
        //    }
        //    else
        //    {
        //        strSQL = " select fb_clientcd, cm_name, abs(convert(decimal(15,2), isnull(sum(fb_amount),0))) BillAmount, COUNT(*) BillCount from " + NewLn +
        //                "  (select fb_clientcd , fb_amount, fb_billdt from FBills  " + NewLn +
        //                "  union all " + NewLn +
        //                "  select bl_clientcd, bl_amount, bl_billdt from  Bills ) xyz, Client_master  " + NewLn +
        //                "  where fb_clientcd=cm_cd   " + NewLn +
        //                "  and exists " + myutil.LoginAccess("fb_clientcd") + NewLn +
        //                "  and fb_billdt= '" + billdt + "'" + NewLn +
        //                "  group by fb_clientcd, cm_name " + NewLn +
        //                "  having sum(fb_amount) " + (type == "R" ? "<" : ">") + " 0" + NewLn +
        //                " Order By abs(convert(decimal(15,2), isnull(sum(fb_amount),0))) desc ";
        //    }
        //    return strSQL;
        //}



        public IEnumerable<BillsViewDashBoardModel> GetBillsViewDashBoard(string type, string billdt)
        {
            List<BillsViewDashBoardModel> bill = new List<BillsViewDashBoardModel>();
            strSQL = GetBillsSQL(billdt, type);
            LibraryModel mylib = new LibraryModel();
            DataTable dtbill = mylib.OpenDataTable(strSQL);
            bill = dtbill.AsEnumerable()
            .Select(row => new BillsViewDashBoardModel
            {
                Code = row.Field<string>("fb_clientcd"),
                Name = row.Field<string>("cm_name"),
                ClientCount = row.Field<int>("BillCount"),
                BillAmount = row.Field<decimal>("BillAmount"),

            }).ToList();

            return bill;
        }

        public IEnumerable<BillSettlementModel> GetBillSettlement(string Code, string billdate)
        {

            List<BillSettlementModel> bill = new List<BillSettlementModel>();


            strSQL = "Select fb_Stlmnt, convert(decimal(15,2),abs(fb_amount)) fb_amount,billtype from  (" +
                "select fb_clientcd , fb_amount, fb_billdt,fb_exchange +'/'+fb_Segment  fb_Stlmnt,'F' as billtype " +
                "from FBills   Where fb_billdt = '" + billdate + "' and fb_clientcd= '" + Code + "'  " +
                "union all  " +
                "select bl_clientcd, bl_amount, se_stdt, bl_stlmnt ,'N' as billtype " +
                "from Bills,Settlements Where bl_stlmnt = se_stlmnt and se_stdt = '" + billdate + "' and bl_clientcd='" + Code + "'" +
                ") xyz ";


            LibraryModel mylib = new LibraryModel();
            DataTable dtbill = mylib.OpenDataTable(strSQL);
            bill = dtbill.AsEnumerable()
            .Select(row => new BillSettlementModel
            {
                Code = Code,
                settlement = row.Field<string>("fb_Stlmnt"),
                amount = row.Field<decimal>("fb_amount"),
                billtype = row.Field<string>("billtype"),
                billdate = billdate
            }).ToList();

            return bill;
        }

        public DashBoardClientCountModel BillsDashBoardCountSum(string billDt)
        {
            UtilityModel myutil = new UtilityModel();
            string dbDate = myutil.dtos(billDt);
            DashBoardClientCountModel dc = new Models.DashBoardClientCountModel()
            {
                Count1 = 0,
                Sum1 = 0,
                Count2 = 0,
                Sum2 = 0
            };

            //Bills Count and Sum
            strSQL = GetBillsSQL(dbDate, "", true);
            LibraryModel mylib = new LibraryModel();
            DataTable dt = mylib.OpenDataTable(strSQL);
            if (dt.Rows.Count > 0)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    if (dt.Rows[i]["Ctype"].ToString().Trim() == "REC")
                    {
                        dc.Count1 = int.Parse(dt.Rows[i]["ClientCnt"].ToString());
                        dc.Sum1 = decimal.Parse(dt.Rows[i]["ClientSum"].ToString());
                    }
                    else if (dt.Rows[i]["Ctype"].ToString().Trim() == "PAY")
                    {
                        dc.Count2 = int.Parse(dt.Rows[i]["ClientCnt"].ToString());
                        dc.Sum2 = decimal.Parse(dt.Rows[i]["ClientSum"].ToString());
                    }
                }
            }
            return dc;
        }


        public List<CodeNameAmountModel> GetDashBoardBrokerageChart()
        {
            UtilityModel myutil = new UtilityModel();
            List<CodeNameAmountModel> bill = new List<CodeNameAmountModel>();
            strSQL = "Select top 10 bl_clientcd, cm_name, SUM(BrokAmt) BrokAmt From " + myutil.newline() +
                    " (  " + myutil.newline() +
                    "    select Rtrim(bl_clientcd) bl_clientcd, isnull(Convert(decimal(15,2), SUM(bl_SpecBrk+bl_DelvBrk)),0) 'BrokAmt'From bills, Settlements " + myutil.newline() +
                    "    Where bl_stlmnt = se_stlmnt and  se_stdt between DATEADD(month, -1, convert(char,getdate(),112))and convert(char,getdate(),112)  " + myutil.newline() +
                    "    Group by bl_clientcd " + myutil.newline() +
                    "    having isnull(Convert(decimal(15,2), SUM(bl_SpecBrk+bl_DelvBrk)),0) > 0   " + myutil.newline() +
                    "    Union All  " + myutil.newline() +
                    "    select Rtrim(fb_clientcd) bl_clientcd, isnull(Convert(decimal(15,2), SUM(FB_FutBrk+FB_OptBrk)),0) 'BrokAmt'  From Fbills   " + myutil.newline() +
                    "    Where fb_billdt between  DATEADD(month, -1, convert(char, getdate(), 112)) and convert(char, getdate(), 112) " + myutil.newline() +
                    "    Group by fb_clientcd  " + myutil.newline() +
                    "     having isnull(Convert(decimal(15,2), SUM(FB_FutBrk+FB_OptBrk)),0) > 0   " + myutil.newline() +
                    " ) X, Client_master " + myutil.newline() +
                    " Where bl_clientcd = cm_cd and cm_schedule=49843750 and cm_type <> 'C' " + myutil.newline() +
                    " and exists " + myutil.LoginAccess("bl_clientcd") + myutil.newline() +
                    " Group by bl_clientcd,cm_name " + myutil.newline() +
                    " order by isnull(SUM(BrokAmt),0) desc ";
            LibraryModel mylib = new LibraryModel();
            DataTable dtRMS = mylib.OpenDataTable(strSQL);
            bill = dtRMS.AsEnumerable()
            .Select(row => new CodeNameAmountModel
            {
                Code = row.Field<string>("bl_clientcd"),
                Name = row.Field<string>("cm_name"),
                Amt = row.Field<decimal>("BrokAmt")
            }).ToList();

            return bill;
        }
    }
    public class modRiskManagementSystem : ConnectionModel
    {
        public bool blnSingleClient;
        public string Code = null;
        public string type = null;

        public modRiskManagementSystem()
        { }
        public modRiskManagementSystem(string _Code = "", string _type = "C", bool _blnSingleClient = false)
        {
            this.Code = _Code;
            this.type = _type;
            this.blnSingleClient = _blnSingleClient;
        }

        public DashBoardClientCountModel RMSDashBoardCountSum()
        {
            LibraryModel mylib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            DashBoardClientCountModel dc = new Models.DashBoardClientCountModel()
            {
                Count1 = 0,
                Sum1 = 0
            };
            bool isBPT = myutil.fnisBPT();

            strSQL = "Select isNull(COUNT(rs_clientcd),0) ClientCnt , isNull(SUM(RMSSUM),0) ClientSum from" + myutil.newline();
            strSQL += " ( " + myutil.newline();
            strSQL += " select rs_clientcd, " + myutil.newline();
            if (isBPT)
            {
                strSQL += " cast((sum(rs_T2ld - (rs_BenHoldingWH + rs_PoolHoldingWH + rs_ExpValueWH + rs_Collateral + rs_bgcoll) + ((rs_UndelvValue) * 110 / 100) + ((rs_shortpayin) * 110 / 100) + (case when right(rtrim(rs_CompanyCode), 1) = 'F' then rs_margin else 0 end))) as decimal(15,2)) RMSSUM " + myutil.newline();
            }
            else
            {
                strSQL += " cast((sum(-rs_T2ld+rs_BenHolding+rs_PoolHolding+rs_DPHolding+rs_ExpValue-rs_UndelvValue+rs_Collateralwh+rs_cashcoll+rs_BGColl))as decimal(15,2)) as RMSSUM " + myutil.newline();
            }
            strSQL += " from rms_summary, Client_master left outer join subbrokers on cm_subbroker = rm_cd " + myutil.newline();
            strSQL += " where rs_dt = (Select max(rs_dt) From rms_summary Where Right(rs_CompanyCode,1) Not in ('X' ,'Z'))  " + myutil.newline();
            strSQL += " and cm_cd = rs_clientcd  " + myutil.newline();
            strSQL += " and exists " + myutil.LoginAccess("rs_clientcd") + myutil.newline();
            strSQL += " group by rs_clientcd " + myutil.newline();
            if (isBPT)
            {
                strSQL += " having cast((sum(rs_T2ld - (rs_BenHoldingWH + rs_PoolHoldingWH + rs_ExpValueWH + rs_Collateral + rs_bgcoll) + ((rs_UndelvValue) * 110 / 100) + ((rs_shortpayin) * 110 / 100) + (case when right(rtrim(rs_CompanyCode), 1) = 'F' then rs_margin else 0 end))) as decimal(15,2)) > 0 " + myutil.newline();
            }
            else
            {
                strSQL += " having cast((sum(-rs_T2ld+rs_BenHolding+rs_PoolHolding+rs_DPHolding+rs_ExpValue-rs_UndelvValue+rs_Collateralwh+rs_cashcoll+rs_BGColl))as decimal(15,2)) < 0 " + myutil.newline();
            }
            strSQL += " ) X" + myutil.newline();
            DataTable dt = mylib.OpenDataTable(strSQL);
            if (dt.Rows.Count > 0)
            {
                dc.Count1 = int.Parse(dt.Rows[0]["ClientCnt"].ToString());
                dc.Sum1 = decimal.Parse(dt.Rows[0]["ClientSum"].ToString());
            }
            return dc;
        }

        public IEnumerable<CodeNameAmountModel> RMSDashBoardCountSumInner(bool blnAll = false)
        {
            LibraryModel mylib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            List<CodeNameAmountModel> rms = new List<CodeNameAmountModel>();
            string newln = Environment.NewLine;
            bool isBPT = myutil.fnisBPT();

            strSQL = " select rs_clientcd, cm_name, " + newln;
            if (isBPT)
            {
                strSQL += " cast((sum(rs_T2ld - (rs_BenHoldingWH + rs_PoolHoldingWH + rs_ExpValueWH + rs_Collateral + rs_bgcoll) + ((rs_UndelvValue) * 110 / 100) + ((rs_shortpayin) * 110 / 100) + (case when right(rtrim(rs_CompanyCode), 1) = 'F' then rs_margin else 0 end))) as decimal(15,2)) RMSSUM " + myutil.newline();
            }
            else
            {
                strSQL += " cast((sum(-rs_T2ld+rs_BenHolding+rs_PoolHolding+rs_DPHolding+rs_ExpValue-rs_UndelvValue+rs_Collateralwh+rs_cashcoll+rs_BGColl)) as decimal(15,2)) as RMSSUM " + myutil.newline();
            }
            strSQL += " from rms_summary, Client_master left outer join subbrokers on cm_subbroker = rm_cd " + myutil.newline();
            strSQL += " where rs_dt = (Select max(rs_dt) From rms_summary Where Right(rs_CompanyCode,1) Not in ('X' ,'Z'))  " + myutil.newline();
            strSQL += " and cm_cd = rs_clientcd  " + myutil.newline();
            strSQL += " and Right(rs_CompanyCode,1) Not in ('X' ,'Z')" + myutil.newline();
            strSQL += " and exists " + myutil.LoginAccess("rs_clientcd") + myutil.newline();
            strSQL += " group by rs_clientcd,cm_name " + myutil.newline();
            if (blnAll)
            {
                if (isBPT)
                {
                    strSQL += " having cast((sum(rs_T2ld - (rs_BenHoldingWH + rs_PoolHoldingWH + rs_ExpValueWH + rs_Collateral + rs_bgcoll) + ((rs_UndelvValue) * 110 / 100) + ((rs_shortpayin) * 110 / 100) + (case when right(rtrim(rs_CompanyCode), 1) = 'F' then rs_margin else 0 end))) as decimal(15,2)) <> 0 " + myutil.newline();
                }
                else
                {
                    strSQL += " having cast((sum(-rs_T2ld+rs_BenHolding+rs_PoolHolding+rs_DPHolding+rs_ExpValue-rs_UndelvValue+rs_Collateralwh+rs_cashcoll+rs_BGColl))as decimal(15,2)) <> 0 " + myutil.newline();
                }
            }
            else
            {
                if (isBPT)
                {
                    strSQL += " having cast((sum(rs_T2ld - (rs_BenHoldingWH + rs_PoolHoldingWH + rs_ExpValueWH + rs_Collateral + rs_bgcoll) + ((rs_UndelvValue) * 110 / 100) + ((rs_shortpayin) * 110 / 100) + (case when right(rtrim(rs_CompanyCode), 1) = 'F' then rs_margin else 0 end))) as decimal(15,2)) > 0 " + myutil.newline();
                }
                else
                {
                    strSQL += " having cast((sum(-rs_T2ld+rs_BenHolding+rs_PoolHolding+rs_DPHolding+rs_ExpValue-rs_UndelvValue+rs_Collateralwh+rs_cashcoll+rs_BGColl))as decimal(15,2)) < 0 " + myutil.newline();
                }
            }
            if (isBPT)
            {
                strSQL += " Order By (sum(rs_T2ld - (rs_BenHoldingWH + rs_PoolHoldingWH + rs_ExpValueWH + rs_Collateral + rs_bgcoll) + ((rs_UndelvValue) * 110 / 100) + ((rs_shortpayin) * 110 / 100) + (case when right(rtrim(rs_CompanyCode), 1) = 'F' then rs_margin else 0 end)))  desc ";
            }
            else
            {
                strSQL += " Order By cast((sum(-rs_T2ld+rs_BenHolding+rs_PoolHolding+rs_DPHolding+rs_ExpValue-rs_UndelvValue+rs_Collateralwh+rs_cashcoll+rs_BGColl))as decimal(15,2))  asc ";
            }
            DataTable dtRMS = mylib.OpenDataTable(strSQL);
            rms = dtRMS.AsEnumerable()
            .Select(row => new CodeNameAmountModel
            {
                Code = row.Field<string>("rs_clientcd"),
                Name = row.Field<string>("cm_name"),
                Amt = row.Field<decimal>("RMSSUM")
            }).ToList();
            return rms;
        }


        public string RMSSQL(string chkTp = "", string chkComm = "", string chkNBFC = "", bool blnsingleclient = false)
        {
            string strSQL = "";
            LibraryModel iHandler = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            string RMSParameter = iHandler.GetScalarValueString("Select sp_sysvalue From sysparameter Where sp_parmcd = 'TNETRMSHEAD'");
            bool isBPT = myutil.fnisBPT();
            string RMSReportHeading = "";

            strSQL = "select bm_branchcd,bm_branchname,";
            if (!blnsingleclient)
            {
                strSQL += " cm_cd as [Code],cm_name as Name, ";
            }
            if (!RMSParameter.Contains("-a"))
            {
                strSQL += "cast((sum(rs_tld))as decimal(15,2)) as 'TDAY',";
                RMSReportHeading = "TDAY,";
            }
            if (!RMSParameter.Contains("-b"))
            {
                strSQL += "cast((sum(rs_t2ld))as decimal(15,2)) as 'T2DAY',";
                RMSReportHeading += "T2DAY,";
            }
            if (!RMSParameter.Contains("-c"))
            {
                strSQL += "cast((sum(rs_uncleared))as decimal(15,2)) as 'UnCleared',";
                RMSReportHeading += "UnCleared,";
            }
            if (!RMSParameter.Contains("-d"))
            {
                strSQL += "cast((sum(rs_CashColl))as decimal(15,2)) as 'CashDeposit',";
                RMSReportHeading += "CashDeposit,";
            }
            if (isBPT)
            {
                if (!RMSParameter.Contains("-e"))
                {
                    strSQL += "cast((sum(rs_Collateral))as decimal(15,2)) as 'ApprovedShares',";
                    RMSReportHeading += "ApprovedShares,";
                }
            }
            else
            {
                if (!RMSParameter.Contains("-e"))
                {
                    strSQL += "cast((sum(rs_Collateral))as decimal(15,2)) as 'ShareCollateral',";
                    RMSReportHeading += "ShareCollateral,";
                }
            }
            if (!RMSParameter.Contains("-f"))
            {
                strSQL += "cast((sum(rs_Margin)) as decimal(15,2)) as 'Margin',";
                RMSReportHeading += "Margin,";
            }
            if (!RMSParameter.Contains("-g"))
            {
                strSQL += "cast((sum(rs_PoolHolding)) as decimal(15,2)) as 'Pool',";
                RMSReportHeading += "Pool,";
            }
            if (!RMSParameter.Contains("-h"))
            {
                strSQL += "cast((sum(rs_DPHolding)) as decimal(15,2)) as 'DPHolding',";
                RMSReportHeading += "DPHolding,";
            }
            if (isBPT)
            {
                if (!RMSParameter.Contains("-i"))
                {
                    strSQL += "cast((sum(rs_Collateral+rs_BenHoldingWH + rs_ExpValueWH + rs_PoolHoldingWH - rs_UndelvValueWH - rs_ShortPayin))as decimal(15,2)) as 'Stock',";
                    RMSReportHeading += "Stock,";
                }
                if (!RMSParameter.Contains("-j"))
                {
                    strSQL += "cast(( sum(-rs_T2ld+rs_BenHolding+rs_PoolHolding+rs_ExpValue-rs_UndelvValue+rs_Collateralwh+rs_cashcoll+rs_BGColl))as decimal(15,2)) as 'Net',";
                    RMSReportHeading += "Net,";
                }
            }
            else
            {
                if (!RMSParameter.Contains("-i"))
                {
                    strSQL += "cast((sum(rs_BenHolding + rs_ExpValue + rs_PoolHolding + rs_DPHolding - rs_UndelvValue - rs_ShortPayin)) as decimal(15,2)) as 'Stock',";
                    RMSReportHeading += "Stock,";
                }
                if (!RMSParameter.Contains("-j"))
                {
                    strSQL += "cast((sum(-rs_T2ld+rs_BenHolding+rs_PoolHolding+rs_DPHolding+rs_ExpValue-rs_UndelvValue+rs_Collateralwh+rs_cashcoll+rs_BGColl))as decimal(15,2)) as 'Net',";
                    RMSReportHeading += "Net,";
                }
            }
            if (!RMSParameter.Contains("-k"))
            {
                strSQL += "cast((sum(rs_NFiller2)) as decimal(15,2)) as 'Abovedays',";
                RMSReportHeading += "Abovedays,";
            }


            strSQL = Strings.Left(strSQL, strSQL.Length - 1);

            DataTable dtRMSHEAD = new DataTable();
            dtRMSHEAD.Clear();
            dtRMSHEAD.Columns.Add("RMSHEAD");
            object[] o = { DBNull.Value };
            dtRMSHEAD.Rows.Add(o);

            string[] ArrRMSCol = RMSParameter.Split(',');
            for (int i = 0; i < ArrRMSCol.Length; i++)
            {

                if (Strings.Left(ArrRMSCol[i].Trim(), 1) != "-" && Strings.Left(ArrRMSCol[i].Trim(), 1) != "")
                {
                    string parameter = "select sp_sysvalue from sysparameter where sp_parmcd like 'RMSFormula" + ArrRMSCol[i].Trim() + "' and sp_sysvalue<>'' ";
                    string rmsformula = iHandler.GetScalarValueString(parameter);
                    if (rmsformula.Trim() != "")
                    {

                        parameter = "select sp_sysvalue from sysparameter where sp_parmcd like 'RMSHEAD" + ArrRMSCol[i].Trim() + "' and sp_sysvalue<>'' ";
                        string rhead = iHandler.GetScalarValueString(parameter);
                        if (rmsformula.Contains("rs_NFiller2"))
                        {
                            object[] g = { rhead.Trim().Replace(" ", "").Replace(".", "") };
                            dtRMSHEAD.Rows.Add(g);
                            dtRMSHEAD = dtRMSHEAD.Rows
                 .Cast<DataRow>()
                 .Where(row => !row.ItemArray.All(f => f is DBNull))
                 .CopyToDataTable();

                        }
                        if (rhead.Trim() != "")
                        {
                            strSQL += ", cast(" + (rmsformula.ToUpper().Contains("SUM") ? "" : "Sum") + "(" + rmsformula + ") as decimal(15, 2)) '" + rhead.Trim().Replace(" ", "").Replace(".", "") + "'";
                            RMSReportHeading += rhead.Trim().Replace(" ", "").Replace(".", "") + ",";
                        }

                    }
                }


            }
            HttpContext.Current.Session["RMSFORMULA1"] = dtRMSHEAD;

            strSQL += " from rms_summary, Client_master left outer join subbrokers on cm_subbroker = rm_cd, branch_master, group_master, family_master " + myutil.newline();
            strSQL += " where rs_dt = (Select max(rs_dt) From rms_summary Where Right(rs_CompanyCode,1) Not in ('X' ,'Z') ) " + myutil.newline();
            strSQL += " and cm_cd = rs_clientcd " + myutil.newline();
            strSQL += " and cm_type <> 'C' " + myutil.newline();
            strSQL += " and cm_groupcd = gr_cd and cm_familycd = fm_cd and cm_brboffcode = bm_branchcd " + myutil.newline();
            if (chkTp == "1" && chkComm == "1")
            {
            }
            else if (chkTp == "1" & chkNBFC == "0")   // ' For Equity
            {
                strSQL = strSQL + " and Right(rs_CompanyCode,1) <> 'X'  and  Right(rs_CompanyCode,1) <> 'Z'";
            }
            else if (chkTp == "1" == true & chkNBFC == "1")
            {
                strSQL = strSQL + " and Right(rs_CompanyCode,1) <> 'X' ";
            }
            else if (chkComm == "1")  // ' For Commodity
            {
                strSQL = strSQL + " and Right(rs_CompanyCode,1) = 'X' ";
            }


            if (type == "CL")
            {
                strSQL += " and cm_cd = '" + Code + "' " + myutil.newline();
            }
            else if (type == "BR")
            {
                strSQL += " and cm_brboffCode = '" + Code + "' " + myutil.newline();
            }
            else if (type == "FM")
            {
                strSQL += " and cm_familycd = '" + Code + "' " + myutil.newline();
            }
            else if (type == "GR")
            {
                strSQL += " and cm_groupcd = '" + Code + "' " + myutil.newline();
            }
            else if (type == "SB")
            {
                strSQL += " and cm_subbroker = '" + Code + "' " + myutil.newline();
            }
            strSQL += HttpContext.Current.Session["LoginAccessOld"];
            //strSQL += " and exists " + myutil.LoginAccess("rs_clientcd") + myutil.newline();
            //strSQL += " and Right(rs_CompanyCode,1) Not in ('X','Z') " + myutil.newline();
            strSQL += " group by bm_branchcd,bm_branchname,cm_cd,cm_name " + myutil.newline();
            if (!blnsingleclient)
            {
                strSQL += " Order by Code ";
            }
            return strSQL;
        }

        public List<CodeNameAmountModel> GetDashBoardRMSChart()
        {
            string strSQL = "";
            LibraryModel iHandler = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            List<CodeNameAmountModel> rms = new List<CodeNameAmountModel>();
            bool isBPT = myutil.fnisBPT();

            string rmsformula = "";
            for (int i = 1; i < 10; i++)
            {
                string parameter = "select sp_sysvalue from sysparameter where sp_parmcd = 'RMSHEAD" + i + "' and sp_sysvalue='PROJECTEDRISK' ";
                string rhead = iHandler.GetScalarValueString(parameter);
                if (rhead.Trim() != "")
                {
                    parameter = "select sp_sysvalue from sysparameter where sp_parmcd = 'rmsformula" + i + "' and sp_sysvalue <>''";
                    string rmsX = iHandler.GetScalarValueString(parameter);
                    if (rmsX.Trim() != "")
                    {
                        //rmsformula = ",cast(" + (rmsX.ToUpper().Contains("SUM") ? "" : "Sum") + "(" + rmsX + ") as decimal(15, 2)) '" + rmsX.Trim().Replace(" ", "").Replace(".", "") + "'";
                        rmsformula = "cast(" + (rmsX.ToUpper().Contains("SUM") ? "" : "Sum") + "(" + rmsX + ") as decimal(15, 2))";
                        break;
                    }
                }
            }

            if (rmsformula.Trim() == "")
            {
                rmsformula = "cast((sum(-rs_T2ld+rs_BenHolding+rs_PoolHolding+rs_DPHolding+rs_ExpValue-rs_UndelvValue+rs_Collateralwh+rs_cashcoll+rs_BGColl))as decimal(15,2))";
            }

            strSQL = "  select top 10 Rtrim(rs_ClientCd) rs_ClientCd, rtrim(cm_name) cm_name ," + rmsformula + "" + myutil.newline();
            strSQL += " 'PROJECTEDRISK'" + myutil.newline();
            strSQL += " from rms_summary, Client_master Where rs_ClientCd=cm_cd and cm_schedule=49843750 and cm_type <> 'C'  " + myutil.newline();
            strSQL += " and rs_dt = ( " + myutil.newline();
            strSQL += " Select max(rs_dt) From rms_summary Where Right(rs_CompanyCode,1) Not in ('X' ,'Z') " + myutil.newline();
            strSQL += " )  " + myutil.newline();
            strSQL += " and exists " + myutil.LoginAccess("rs_ClientCd") + myutil.newline();
            strSQL += " and Right(rs_CompanyCode,1) Not in ('X' ,'Z')" + myutil.newline();
            strSQL += " group by rs_ClientCd, cm_name " + myutil.newline();
            if (isBPT)
            {
                strSQL += " having " + rmsformula + " > 0 " + myutil.newline();
                strSQL += " Order By " + rmsformula + myutil.newline();
                strSQL += " desc " + myutil.newline();
            }
            else
            {
                strSQL += " having " + rmsformula + " < 0 " + myutil.newline();
                strSQL += " Order By " + rmsformula + myutil.newline();
                strSQL += " asc " + myutil.newline();
            }
            LibraryModel mylib = new LibraryModel();
            DataTable dtRMS = mylib.OpenDataTable(strSQL);
            rms = dtRMS.AsEnumerable()
            .Select(row => new CodeNameAmountModel
            {
                Code = row.Field<string>("rs_ClientCd"),
                Name = row.Field<string>("cm_name"),
                Amt = row.Field<decimal>("PROJECTEDRISK")
            }).ToList();

            return rms;
        }

        public DataTable GetRMSReport(string chkTp, string chkComm, string chkNBFC)
        {
            List<RiskManagementModel> rm = new List<RiskManagementModel>();
            strSQL = RMSSQL(chkTp, chkComm, chkNBFC);
            LibraryModel mylib = new LibraryModel();
            DataTable dtRM = mylib.OpenDataTable(strSQL);
            return dtRM;
        }

        public DataTable GetRiskManagement(string Code, bool blnSum)
        {
            string NewLn = Environment.NewLine;
            UtilityModel myutil = new UtilityModel();
            bool isBPT = myutil.fnisBPT();

            strSQL = "Select ";
            if (isBPT)
            {
                strSQL += " cast((sum(rs_T2ld - (rs_BenHoldingWH + rs_PoolHoldingWH + rs_ExpValueWH + rs_Collateral + rs_bgcoll) + ((rs_UndelvValue) * 110 / 100) + ((rs_shortpayin) * 110 / 100) + (case when right(rtrim(rs_CompanyCode), 1) = 'F' then rs_margin else 0 end))) as decimal(15,2)) 'PROJECTEDRISK' " + NewLn;
            }
            else
            {
                strSQL += " cast((sum(-rs_T2ld+rs_BenHolding+rs_PoolHolding+rs_DPHolding+rs_ExpValue-rs_UndelvValue+rs_Collateralwh+rs_cashcoll+rs_BGColl))as decimal(15,2)) 'PROJECTEDRISK' " + NewLn;
            }
            strSQL += " from rms_summary " + NewLn;
            strSQL += " where rs_dt = (Select max(rs_dt) From rms_summary Where Right(rs_CompanyCode,1) Not in ('X' ,'Z') ) " + NewLn;
            strSQL += " and rs_clientcd = '" + Code + "' " + NewLn;
            strSQL += " and Right(rs_CompanyCode,1) Not in ('X','Z') ";
            LibraryModel mylib = new LibraryModel();
            DataTable dtrms = mylib.OpenDataTable(strSQL);
            return dtrms;
        }

        public decimal GetRMSSumByCode(string Code)
        {
            Decimal decRMS = 0;
            DataTable dtVal = GetRiskManagement(Code, true);
            if (dtVal.Rows.Count > 0)
            {
                decRMS = Convert.ToDecimal(Conversion.Val(dtVal.Rows[0][0].ToString()));
            }
            return decRMS;
        }

        public List<DyanmicModel> GetRMSReportByCode()
        {
            List<DyanmicModel> ulist = new List<DyanmicModel>();
            strSQL = RMSSQL("", "", "", true);
            LibraryModel mylib = new LibraryModel();
            DataTable dtRM = mylib.OpenDataTable(strSQL);
            if (dtRM.Rows.Count > 0)
            {
                foreach (DataRow row in dtRM.Rows)
                {
                    foreach (DataColumn column in dtRM.Columns)
                    {
                        DyanmicModel dm = new DyanmicModel();
                        dm.Name = column.ColumnName;
                        dm.Amount = decimal.Parse(row[column].ToString());
                        ulist.Add(dm);
                    }
                }
            }
            return ulist;
        }

        public string GetT5SQL(bool blnSUM)
        {
            string NewLn = Environment.NewLine;
            UtilityModel myutil = new UtilityModel();
            if (blnSUM)
            {
                strSQL = " Select isNull(COUNT(ClientCnt),0) ClientCnt , Convert(decimal(15,2), isNull(SUM(ClientSum),0)) ClientSum " + NewLn +
                        " From " + NewLn +
                        " ( " + NewLn +
                        "  	select rs_clientcd ClientCnt, sum(rs_OutAboveDays) ClientSum " + NewLn +
                        "  	from RMS_Summary " + NewLn +
                        "  	Where Right(rs_CompanyCode,1) Not in ('X' ,'Z')" + NewLn +
                        "  	and  rs_OutAboveDays >0 " + NewLn +
                        "  	and rs_Dt = (select MAX(rs_Dt) from RMS_Summary Where Right(rs_CompanyCode,1) Not in ('X' ,'Z') and  rs_OutAboveDays >0)" + NewLn +
                        "   and exists " + myutil.LoginAccess("rs_clientcd") + NewLn +
                        "  	Group by rs_clientcd" + NewLn +
                        " ) X " + NewLn;
            }
            else
            {
                strSQL = " select rs_clientcd Code, cm_name Name, Convert(decimal(15,2), isNull(SUM(rs_OutAboveDays),0)) Amount" + NewLn +
                         " from RMS_Summary ,Client_master " + NewLn +
                         " Where rs_clientcd=cm_cd and Right(rs_CompanyCode,1) Not in ('X' ,'Z')" + NewLn +
                         " and rs_OutAboveDays >0 " + NewLn +
                         " and rs_Dt = (select MAX(rs_Dt) from RMS_Summary Where Right(rs_CompanyCode,1) Not in ('X' ,'Z'))" + NewLn +
                         "   and exists " + myutil.LoginAccess("rs_clientcd") + NewLn +
                         " Group by rs_clientcd,cm_name " + NewLn +
                         " Order By sum(rs_OutAboveDays) Desc";
            }
            return strSQL;
        }

        public IEnumerable<RMSHawkEYEModel> GetRMSHawkEYE()
        {
            UtilityModel myutil = new UtilityModel();
            List<RMSHawkEYEModel> rms = new List<RMSHawkEYEModel>();
            strSQL = "Select Vw_BP_CombinedReport.* From Vw_BP_CombinedReport ";
            strSQL += " Where exists " + myutil.LoginAccess("ClientCode");
            strSQL += " Order By  ProjectedRisk Desc";
            LibraryModel mylib = new LibraryModel();
            DataTable dtRMS = mylib.OpenDataTable(strSQL);
            if (dtRMS.Rows.Count > 0)
            {
                rms = dtRMS.AsEnumerable()
                .Select(row => new RMSHawkEYEModel
                {
                    Code = row.Field<string>("ClientCode"),
                    Name = row.Field<string>("ClientName"),
                    CashLedBal = row.Field<decimal>("CashLedBal"),
                    FNOLedBal = row.Field<decimal>("FNOLedBal"),
                    TotalLedBal = row.Field<decimal>("TotalLedBal"),
                    CashHolding = row.Field<decimal>("CashHolding"),
                    Collateral = row.Field<decimal>("Collateral"),
                    TotalHolding = row.Field<decimal>("TotalHolding"),
                    CurrCashExposure = row.Field<decimal>("CurrCashExposure"),
                    FNOM2M = row.Field<decimal>("FNOM2M"),
                    TotalCurrExposure = row.Field<decimal>("TotalCurrExposure"),
                    CurrSpanMgn = row.Field<decimal>("CurrSpanMgn"),
                    CurrExposureMgn = row.Field<decimal>("CurrExposureMgn"),
                    TotalMgn = row.Field<decimal>("TotalMgn"),
                    PremiumDrCr = row.Field<decimal>("PremiumDrCr"),
                    OptionM2M = row.Field<decimal>("OptionM2M"),
                    Expenses = row.Field<decimal>("Expenses"),
                    FinalLedBal = row.Field<decimal>("FinalLedBal"),
                    ActualRisk = row.Field<decimal>("ActualRisk"),
                    ProjectedRisk = row.Field<decimal>("ProjectedRisk"),
                    CollectionValue = row.Field<decimal>("CollectionValue"),
                    UnclearChq = row.Field<decimal>("UnclearChq"),
                    BODRMSLmt = row.Field<decimal>("BODRMSLmt"),
                    DPHolding = row.Field<decimal>("DPHolding"),
                    AvailableMgn = row.Field<decimal>("AvailableMgn"),
                    IncrDecMargin = row.Field<decimal>("IncrDecMargin"),
                    DELIVERYSELLVAL = row.Field<decimal>("DELIVERYSELLVAL"),
                    Adjst = row.Field<decimal>("Adjst"),
                    CashMTM = row.Field<decimal>("CashMTM"),
                    NBFCLedger = row.Field<decimal>("NBFCLedger"),
                    NBFCCollateral = row.Field<decimal>("NBFCCollateral"),
                    DebitGreater5Days = row.Field<decimal>("DebitGreater5Days"),
                    TotalHoldingAHC = row.Field<decimal>("TotalHoldingAHC"),
                    MTFLedger = row.Field<decimal>("MTFLedger"),
                    MTFHolding = row.Field<decimal>("MTFHolding"),
                    MTFHoldingAHC = row.Field<decimal>("MTFHoldingAHC")
                }).ToList();
            }
            return rms;
        }

        public IEnumerable<RMSClientPositionModel> GetRMSHawkEYEByCode(string Code)
        {
            List<RMSClientPositionModel> rms = new List<RMSClientPositionModel>();
            try
            {
                UtilityModel myutil = new UtilityModel();
                strSQL = "select ClientCode,cm_name,Scripcode,SymbolSeries,BOD,cast((Rate) as decimal(15,2)) as Rate,cast((BuyQty) as decimal(15,0)) as BuyQty,";
                strSQL += "cast((BuyAvgRate) as decimal(15,2)) as BuyAvgRate,cast((BuyValue) as decimal(15,2)) as BuyValue,";
                strSQL += "cast((SellQty) as decimal(15,0)) as SellQty,cast((SellAvgRate) as decimal(15,2)) as SellAvgRate,";
                strSQL += "cast((SellValue) as decimal(15,2)) as SellValue,";
                strSQL += "cast((0) as decimal(15,0)) as NetQty,";
                strSQL += "cast((NetValue) as decimal(15,2)) as NetValue,";
                strSQL += "cast((LastRate) as decimal(15,2)) as LTP,";
                strSQL += "cast((0) as decimal(15,2)) as LiqValue,";
                strSQL += "cast((SPANMgn+ExposureMgn) as decimal(15,2)) as TotalMgn,";
                strSQL += "cast((0) as decimal(15,2)) as M2M ";
                strSQL += "from vw_clientpositiondata,Client_master  ";
                strSQL += " Where ClientCode=cm_cd and ClientCode = '" + Code.Trim() + "' and exists " + myutil.LoginAccess("ClientCode");
                LibraryModel mylib = new LibraryModel();
                DataTable dtRMS = mylib.OpenDataTable(strSQL);
                if (dtRMS.Rows.Count > 0)
                {
                    rms = dtRMS.AsEnumerable()
                    .Select(row => new RMSClientPositionModel
                    {
                        Code = row.Field<string>("ClientCode").Trim(),
                        Name = row.Field<string>("cm_name").Trim(),
                        Scripcode = row.Field<string>("ScripCode").Trim(),
                        SymbolSeries = row.Field<string>("SymbolSeries").Trim(),
                        BOD = row.Field<Int64>("BOD"),
                        Rate = row.Field<decimal>("Rate"),
                        BuyQty = row.Field<decimal>("BuyQty"),
                        BuyAvgRate = row.Field<decimal>("BuyAvgRate"),
                        BuyValue = row.Field<decimal>("BuyValue"),
                        SellQty = row.Field<decimal>("SellQty"),
                        SellAvgRate = row.Field<decimal>("SellAvgRate"),
                        SellValue = row.Field<decimal>("SellValue"),
                        NetQty = 0,
                        NetValue = row.Field<decimal>("NetValue"),
                        LTP = 0,
                        LiqValue = 0,
                        TotalMgn = row.Field<decimal>("TotalMgn"),
                        M2M = 0
                    }).ToList();
                }
            }
            catch (Exception ex)
            {

                string error = ex.Message;
            }
            return rms;

        }

        public IEnumerable<DPHodlingRMSModel> GetDpHoldingLink(string CId)
        {
            UtilityModel myutil = new UtilityModel();
            string NewLn = Environment.NewLine;
            List<DPHodlingRMSModel> DPHolding = new List<DPHodlingRMSModel>();

            strSQL = "select rd_scripcd as ScripCd, ss_name AS 'ScripName',  sum(rd_qty) as 'HOLDING',cast(sum(rd_qty*rd_rate) as decimal(15,2)) as VALUE," + myutil.newline();
            strSQL += " isNull((select im_isin from ISIN Where im_scripcd = rd_scripcd and  im_active  = 'Y' and im_priority = (select min(im_priority) From ISIN " + myutil.newline();
            strSQL += "Where im_scripcd = rd_scripcd and im_active  = 'Y' )),'') ISIN " + myutil.newline();
            strSQL += "from rms_detail,securities where ss_cd=rd_scripcd and rd_clientcd='" + CId + "' and rd_type='DP'" + myutil.newline();
            strSQL += "group by rd_scripcd,ss_name" + myutil.newline();
            LibraryModel mylib = new LibraryModel();
            DataTable dtDP = mylib.OpenDataTable(strSQL);
            DPHolding = dtDP.AsEnumerable()
            .Select(row => new DPHodlingRMSModel
            {
                ScripCd = row.Field<string>("ScripCd"),
                ScripName = row.Field<string>("ScripName"),
                ISIN = row.Field<string>("ISIN"),
                HOLDING = row.Field<decimal>("HOLDING"),
                VALUE = row.Field<decimal>("VALUE")
            }).ToList();

            return DPHolding;

        }

        public IEnumerable<StockRMSModel> GetStockLink(string CId)
        {
            UtilityModel myutil = new UtilityModel();
            string NewLn = Environment.NewLine;
            List<StockRMSModel> stock = new List<StockRMSModel>();

            strSQL = "select  rd_scripcd as 'ScripCode',ltrim(rtrim(ss_Name))  + case" + myutil.newline();
            strSQL += "When charindex('0', ss_closedt)  > 0 Then ' [Approved]' else '' end as [Scrip Name]," + myutil.newline();
            strSQL += "sum(rd_qty) as [Holding], cast(sum(rd_rate*rd_qty)as decimal(15,2)) as [ActulAmount]," + myutil.newline();
            strSQL += "cast(sum(round((rd_rate*rd_qty)*case rd_type When 'UNDEL' Then (100+rd_haircut)" + myutil.newline();
            strSQL += "else (100-rd_haircut) end/100,2)) as decimal(15,2)) as [AmtAfterHairCut]," + myutil.newline();
            strSQL += "case When charindex('0',ss_closedt)  > 0 Then 'Y' else 'N' end Approved" + myutil.newline();
            strSQL += "from rms_detail, securities where rd_scripcd=ss_cd and rd_clientcd='" + CId + "' " + myutil.newline();
            strSQL += "and rd_type in ('BEN','EXP','UNDEL','POOL','PAYSH','COLL','NBFC')  and rd_type <>'NBFC'" + myutil.newline();
            strSQL += "Group By rd_scripcd,ss_Name,ss_closedt having sum(rd_qty) <> 0  order by rd_scripcd,ss_Name" + myutil.newline();
            LibraryModel mylib = new LibraryModel();
            DataTable dtstock = mylib.OpenDataTable(strSQL);
            stock = dtstock.AsEnumerable()
            .Select(row => new StockRMSModel
            {
                ScripCode = row.Field<string>("ScripCode"),
                ScripName = row.Field<string>("Scrip Name"),
                Holding = row.Field<decimal>("Holding"),
                ActulAmount = row.Field<decimal>("ActulAmount"),
                AmtAfterHairCut = row.Field<decimal>("AmtAfterHairCut"),
                Approved = row.Field<string>("Approved")
            }).ToList();

            return stock;

        }
        public IEnumerable<ApprovedShareRMSModel> GetApprovedShareRMS(string CId)
        {
            UtilityModel myutil = new UtilityModel();
            string NewLn = Environment.NewLine;
            List<ApprovedShareRMSModel> Appshare = new List<ApprovedShareRMSModel>();
            string strsql = null;
            strsql = "select case right(rd_companyCode,1) when 'C' then 'CASH' when 'F' then 'F&O' else '' end Segment, ";
            strsql = strsql + " rd_scripcd as [Scrip Code],ss_name as [Scrip Name],rd_qty as [Quantity],cast(rd_rate*rd_qty as decimal(15,2)) as [Amount],";
            strsql = strsql + " cast(rd_haircut as decimal(15,2)) [HairCut],cast(round((rd_rate*rd_qty)*(100-rd_haircut)/100,2) as decimal(15,2)) as [AmtAfterHairCut]";
            strsql = strsql + " from rms_detail,securities where rd_scripcd=ss_cd";  // and rd_companycode='" & Session("CompanyCode") & "'
            strsql = strsql + " and rd_clientcd='" + CId + "' and Rd_Type = 'COLL' order by rd_scripcd ";
            LibraryModel mylib = new LibraryModel();
            DataTable dtAppshare = mylib.OpenDataTable(strsql);
            Appshare = dtAppshare.AsEnumerable()
            .Select(row => new ApprovedShareRMSModel
            {
                Segment = row.Field<string>("Segment"),
                ScripCd = row.Field<string>("Scrip Code"),
                ScripName = row.Field<string>("Scrip Name"),
                Quantity = row.Field<decimal>("Quantity"),
                Amount = row.Field<decimal>("Amount"),
                HairCut = row.Field<decimal>("HairCut"),
                AmtAfterHairCut = row.Field<decimal>("AmtAfterHairCut")
            }).ToList();

            return Appshare;

        }


        public IEnumerable<ApprovedShareRMSModel> GetNEWCOLLRMS(string CId)
        {
            UtilityModel myutil = new UtilityModel();
            string NewLn = Environment.NewLine;
            List<ApprovedShareRMSModel> Appshare = new List<ApprovedShareRMSModel>();
            string strsql = null;
            strsql = "select case right(rd_companyCode,1) when 'C' then 'CASH' when 'F' then 'F&O' else '' end Segment, ";
            strsql = strsql + " rd_scripcd as [Scrip Code],ss_name as [Scrip Name],rd_qty as [Quantity],cast(rd_rate*rd_qty as decimal(15,2)) as [Amount],";
            strsql = strsql + " cast(rd_haircut as decimal(15,2)) [HairCut],cast(round((rd_rate*rd_qty)*(100-rd_haircut)/100,2) as decimal(15,2)) as [AmtAfterHairCut]";
            strsql = strsql + " from rms_detail,securities where rd_scripcd=ss_cd";  // and rd_companycode='" & Session("CompanyCode") & "'
            strsql = strsql + " and rd_clientcd='" + CId + "' and Rd_Type = 'PLDAP'";
            LibraryModel mylib = new LibraryModel();
            DataTable dtAppshare = mylib.OpenDataTable(strsql);
            Appshare = dtAppshare.AsEnumerable()
            .Select(row => new ApprovedShareRMSModel
            {
                Segment = row.Field<string>("Segment"),
                ScripCd = row.Field<string>("Scrip Code"),
                ScripName = row.Field<string>("Scrip Name"),
                Quantity = row.Field<decimal>("Quantity"),
                Amount = row.Field<decimal>("Amount"),
                HairCut = row.Field<decimal>("HairCut"),
                AmtAfterHairCut = row.Field<decimal>("AmtAfterHairCut")
            }).ToList();

            return Appshare;

        }



        public IEnumerable<StockRMSSModel> GetStockbylink(string CId, string ScriptName)
        {
            UtilityModel myutil = new UtilityModel();
            string NewLn = Environment.NewLine;
            List<StockRMSSModel> link = new List<StockRMSSModel>();

            strSQL = "select rtrim(rd_scripcd) + '[' + ltrim(rtrim(ss_Name)) + ']' as [ScripCode],isNull(rd_stlmnt,'') rd_stlmnt," + myutil.newline();
            strSQL += "isNull(se_shpayindt,'') se_shpayindt, case rd_type when 'BEN' then 'Benf Holding' when 'EXP' then 'Expected Value'" + myutil.newline();
            strSQL += "when 'UNDEL' then 'Undeliver Value' when 'DP' then 'DP Holding' when 'POOL' then 'Pool Holding'  when 'PAYSH'" + myutil.newline();
            strSQL += "then 'Pay-In Short' When 'COLL' Then 'Share Collateral' when 'NBFC' then 'NBFC'   else '' end as Type," + myutil.newline();
            strSQL += "sum(rd_qty) as [Holding], sum(rd_rate*rd_qty) as [ActulAmount], rd_hairCut as [HairCut], " + myutil.newline();
            strSQL += "cast(sum(round((rd_rate*rd_qty)*(100-case Rd_Type When 'UNDEL' Then -rd_haircut else rd_haircut end)/100,2))" + myutil.newline();
            strSQL += "as decimal(15,2)) as [AmtAfterHairCut] from rms_detail left outer join settlements on rd_stlmnt=se_stlmnt ,securities " + myutil.newline();
            strSQL += "where rd_scripcd=ss_cd and rd_clientcd='" + CId + "' and rd_type in ('BEN','EXP','UNDEL','POOL','PAYSH','COLL','NBFC')  and rd_type <>'NBFC' and rd_scripcd='" + ScriptName + "' " + myutil.newline();
            strSQL += "group by rd_stlmnt,isNull(se_shpayindt,''),rd_hairCut,rd_scripcd,ss_Name, case rd_type when 'BEN' then 'Benf Holding' when 'EXP' then 'Expected Value'  when 'UNDEL' then 'Undeliver Value' when 'DP' then 'DP Holding' when 'POOL' then 'Pool Holding'  when 'PAYSH' then 'Pay-In Short' When 'COLL' Then 'Share Collateral' when 'NBFC' then 'NBFC'   else '' end " + myutil.newline();

            LibraryModel mylib = new LibraryModel();
            DataTable dtstocklink = mylib.OpenDataTable(strSQL);
            link = dtstocklink.AsEnumerable()
            .Select(row => new StockRMSSModel
            {
                ScripCode = row.Field<string>("ScripCode"),
                rd_stlmnt = row.Field<string>("rd_stlmnt"),
                se_shpayindt = row.Field<string>("se_shpayindt"),
                Type = row.Field<string>("Type"),
                Holding = row.Field<decimal>("Holding"),
                ActulAmount = row.Field<decimal>("ActulAmount"),
                HairCut = row.Field<decimal>("HairCut"),
                AmtAfterHairCut = row.Field<decimal>("AmtAfterHairCut")
            }).ToList();

            return (link);
        }

    }
    public class modQuarterlySquareOff : ConnectionModel
    {
        public QuarterlySquareOffModel GetQuarterlySquareOffByCode(string Code, string strdate = "")
        {
            UtilityModel myutil = new UtilityModel();
            LibraryModel mylib = new LibraryModel();
            string NewLn = myutil.newline();
            // strdate = myutil.dtos(strdate);

            QuarterlySquareOffModel qs = new QuarterlySquareOffModel();
            strSQL = "select qs_dt, " + NewLn;
            strSQL += " convert(decimal(15, 2), qs_LedBal) as qs_LedBal, convert(decimal(15, 2), qs_LedBalM) as qs_LedBalM, convert(decimal(15, 2), qs_TotalFunds) as qs_TotalFunds, " + NewLn;
            strSQL += " convert(decimal(15, 2), qs_CollBeforeH) as qs_CollBeforeH, convert(decimal(15, 2), qs_CollAfterH) as qs_CollAfterH, convert(decimal(15, 2), qs_BenfBeforeH) as qs_BenfBeforeH, " + NewLn;
            strSQL += " convert(decimal(15, 2), qs_BenfAfterH) as qs_BenfAfterH, convert(decimal(15, 2), qs_TotalShares) as qs_TotalShares, convert(decimal(15, 2), qs_TotalFundShare) as qs_TotalFundShare, " + NewLn;
            strSQL += " convert(decimal(15, 2), qs_DebitLedger) as qs_DebitLedger, convert(decimal(15, 2), qs_DebitLedgerM) as qs_DebitLedgerM, convert(decimal(15, 2), qs_TotalDebitLedger) as qs_TotalDebitLedger, " + NewLn;
            strSQL += " convert(decimal(15, 2), qs_FundPayInCashT) as qs_FundPayInCashT, convert(decimal(15, 2), qs_FundPayInFOT) as qs_FundPayInFOT, convert(decimal(15, 2), qs_FundPayInFXT) as qs_FundPayInFXT, " + NewLn;
            strSQL += " convert(decimal(15, 2), qs_FundPayInCashT1) as qs_FundPayInCashT1, convert(decimal(15, 2), qs_SharePayInCashT) as qs_SharePayInCashT, convert(decimal(15, 2), qs_SharePayInCashT1) as qs_SharePayInCashT1, " + NewLn;
            strSQL += " convert(decimal(15, 2), qs_MarginFO) as qs_MarginFO, convert(decimal(15, 2), qs_MarginFX) as qs_MarginFX, convert(decimal(15, 2), qs_TotalMargin) as qs_TotalMargin, " + NewLn;
            strSQL += " convert(decimal(15, 2), qs_TurnoverCash) as qs_TurnoverCash, convert(decimal(15, 2), qs_TotalRetainReq) as qs_TotalRetainReq, convert(decimal(15, 2), qs_RetainFund) as qs_RetainFund, " + NewLn;
            strSQL += " convert(decimal(15, 2), qs_RetainShares) as qs_RetainShares, convert(decimal(15, 2), qs_TotalRetain) as qs_TotalRetain, convert(decimal(15, 2), qs_ReleaseFund) as qs_ReleaseFund, " + NewLn;
            strSQL += " convert(decimal(15, 2), qs_ReleaseShares) as qs_ReleaseShares, convert(decimal(15, 2), qs_TotalRelease) as qs_TotalRelease, convert(decimal(15, 2), qs_CollFD) as qs_CollFD, " + NewLn;
            strSQL += " convert(decimal(15, 2), qs_CollBG) as qs_CollBG, convert(decimal(15, 2), qs_Netvalue) as qs_Netvalue, convert(decimal(15, 2), qs_RetAllowed) as qs_RetAllowed, " + NewLn;
            strSQL += " cm_cd,cm_name,cm_add1,cm_add2,cm_add3,cm_add4,cm_email,cm_pincode,cm_mobile, " + NewLn;
            strSQL += " convert(char,convert(datetime,qs_dt,103),103) as LastSqdt" + NewLn;
            strSQL += " From QuarterlySquareoff, Client_master  where qs_cmcd=cm_cd and " + NewLn;
            strSQL += " qs_dt= '" + strdate + "' and cm_cd='" + Code + "'" + NewLn;
            DataTable dtQS = mylib.OpenDataTable(strSQL);
            if (dtQS.Rows.Count > 0)
            {
                DataRow drQS = dtQS.Rows[0];
                qs = new QuarterlySquareOffModel
                {
                    qs_dt = drQS["qs_dt"].ToString().Trim(),
                    qs_cmcd = drQS["qs_dt"].ToString().Trim(),
                    qs_LedBal = Convert.ToDecimal(drQS["qs_LedBal"].ToString()),
                    qs_LedBalM = Convert.ToDecimal(drQS["qs_LedBalM"].ToString()),
                    qs_TotalFunds = Convert.ToDecimal(drQS["qs_TotalFunds"].ToString()),
                    qs_CollBeforeH = Convert.ToDecimal(drQS["qs_CollBeforeH"].ToString()),
                    qs_CollAfterH = Convert.ToDecimal(drQS["qs_CollAfterH"].ToString()),
                    qs_BenfBeforeH = Convert.ToDecimal(drQS["qs_BenfBeforeH"].ToString()),
                    qs_BenfAfterH = Convert.ToDecimal(drQS["qs_BenfAfterH"].ToString()),
                    qs_TotalShares = Convert.ToDecimal(drQS["qs_TotalShares"].ToString()),
                    qs_TotalFundShare = Convert.ToDecimal(drQS["qs_TotalFundShare"].ToString()),
                    qs_DebitLedger = Convert.ToDecimal(drQS["qs_DebitLedger"].ToString()),
                    qs_DebitLedgerM = Convert.ToDecimal(drQS["qs_DebitLedgerM"].ToString()),
                    qs_TotalDebitLedger = Convert.ToDecimal(drQS["qs_TotalDebitLedger"].ToString()),
                    qs_FundPayInCashT = Convert.ToDecimal(drQS["qs_FundPayInCashT"].ToString()),
                    qs_FundPayInFOT = Convert.ToDecimal(drQS["qs_FundPayInFOT"].ToString()),
                    qs_FundPayInFXT = Convert.ToDecimal(drQS["qs_FundPayInFXT"].ToString()),
                    qs_FundPayInCashT1 = Convert.ToDecimal(drQS["qs_FundPayInCashT1"].ToString()),
                    qs_SharePayInCashT = Convert.ToDecimal(drQS["qs_SharePayInCashT"].ToString()),
                    qs_SharePayInCashT1 = Convert.ToDecimal(drQS["qs_SharePayInCashT1"].ToString()),
                    qs_MarginFO = Convert.ToDecimal(drQS["qs_MarginFO"].ToString()),
                    qs_MarginFX = Convert.ToDecimal(drQS["qs_MarginFX"].ToString()),
                    qs_TotalMargin = Convert.ToDecimal(drQS["qs_TotalMargin"].ToString()),
                    qs_TurnoverCash = Convert.ToDecimal(drQS["qs_TurnoverCash"].ToString()),
                    qs_TotalRetainReq = Convert.ToDecimal(drQS["qs_TotalRetainReq"].ToString()),
                    qs_RetainFund = Convert.ToDecimal(drQS["qs_RetainFund"].ToString()),
                    qs_RetainShares = Convert.ToDecimal(drQS["qs_RetainShares"].ToString()),
                    qs_ReleaseFund = Convert.ToDecimal(drQS["qs_ReleaseFund"].ToString()),
                    qs_ReleaseShares = Convert.ToDecimal(drQS["qs_ReleaseShares"].ToString()),
                    qs_TotalRelease = Convert.ToDecimal(drQS["qs_CollFD"].ToString()),
                    qs_CollFD = Convert.ToDecimal(drQS["qs_CollFD"].ToString()),
                    qs_CollBG = Convert.ToDecimal(drQS["qs_CollBG"].ToString()),
                    qs_Netvalue = Convert.ToDecimal(drQS["qs_Netvalue"].ToString()),
                    qs_RetAllowed = Convert.ToDecimal(drQS["qs_RetAllowed"].ToString())
                };
            }
            return qs;
        }

    }
    public class modEntityMaster : ConnectionModel
    {

        //public IEnumerable<JsonComboModel> GetCompanyExchSeg()
        //{
        //    strSQL = "select Right(ces_cd,2) Value, Rtrim(CES_Exchange) +  ' ' + Rtrim(CES_Segment) Display ";
        //    strSQL += " from CompanyExchangeSegments ";
        //    strSQL += " Where RIGHT(ces_cd,1) in ('C','F','K','X') ";
        //    strSQL += " Order by Case RIGHT(ces_cd,1) when 'C' then 0 when 'F' then 1 when 'K' then 2 else 3 end";
        //    LibraryModel mylib = new LibraryModel();
        //    List<JsonComboModel> ulist = new List<JsonComboModel>();

        //    DataTable dtRMS = mylib.OpenDataTable(strSQL);
        //    ulist = dtRMS.AsEnumerable()
        //    .Select(row => new JsonComboModel
        //    {
        //        Display = row.Field<string>("Display").Trim(),
        //        Value = row.Field<string>("Value").Trim(),
        //    }).ToList();

        //    return ulist;
        //}

        public IEnumerable<JsonComboModel> GetCompanyExchSeg(string PageName)

        {
            DataTable dtRMS = new DataTable();
            DataTable dtCommexRMS = new DataTable();
            LibraryModel mylib = new LibraryModel();
            UtilityDBModel mydbutil = new UtilityDBModel();
            SqlConnection SQLConnComex = mydbutil.commexTemp_conn("Commex");
            List<JsonComboModel> ulist = new List<JsonComboModel>();

            string Segmentcash = PageName;

            if (mydbutil.commexTemp_conn("Commex") != null)
            {
                mydbutil.getallwebPeram();

            }
            strSQL = "select Right(et_login,2) Value, Rtrim(et_exchange) +  ' ' + Rtrim(case et_segment when 'Future & Options' then 'F&O' when 'Currency Derivative' then 'Fx' when 'Mutual Fund' then 'MF' when 'Commodity' then 'COMM' else et_segment end) Display, et_name,et_cd,et_exchange,case et_segment when 'Future & Options' then 'F&O' when 'Currency Derivative' then 'Fx' when 'Mutual Fund' then 'MF' when 'Commodity' then 'COMM' else et_segment end et_segment,et_login ";
            strSQL += " from vwlogin where et_cd = '" + HttpContext.Current.Session["CompanyCode"] + "'";
            if (Segmentcash != "")
            {
                if (Strings.InStr(Segmentcash, "F") > 0)
                {
                    Segmentcash += ",K";
                }

                if (Strings.InStr(Segmentcash, "M") > 0)
                {
                    strSQL += " and right(et_login,1) in('" + Strings.Replace(Segmentcash, ",", "','") + "')";
                }
                else
                {
                    strSQL += " and right(et_login,1) in('" + Strings.Replace(Segmentcash, ",", "','") + "') and right(et_login,1) not in ('M')";
                }
            }

            strSQL += " order by et_cd, et_exchange,et_login ";
            dtRMS = mylib.OpenDataTable(strSQL);

            if (Strings.InStr(PageName, "M") > 0)
            {
            }
            else
            {

            }

            if ((string)HttpContext.Current.Session["IsTplusCommex"] == "N")
            {
                for (int i = dtRMS.Rows.Count - 1; i >= 0; i--)
                {
                    DataRow dr = dtRMS.Rows[i];
                    if (dr["Display"].ToString() == "BSE COMM")
                        dr.Delete();
                }
                dtRMS.AcceptChanges();

            }


            if (mylib.fnFireQuery("Other_Products", "op_Product", "op_status='A' and op_Product", "Commex", true) != "" & Strings.InStr(Segmentcash, "X") > 0)
            {

                if (SQLConnComex != null)
                {
                    SQLConnComex.Open();
                    strSQL = "select SUBSTRING(ces_cd, 2, 1) Value, Rtrim(CES_Exchange) +  ' ' + 'Comm' Display ";
                    strSQL += " from CompanyExchangeSegments ";

                    dtCommexRMS = mylib.OpenDataTable(strSQL, SQLConnComex);


                    for (int i = dtCommexRMS.Rows.Count - 1; i >= 0; i--)
                    {
                        DataRow dr = dtCommexRMS.Rows[i];
                        if (dr["Value"].ToString() == "S")
                            dr.Delete();
                    }
                    dtCommexRMS.AcceptChanges();

                }



            }
            else
            {

            }

            if ((string)HttpContext.Current.Session["IsTplusCommex"] == "Y")
            {
                foreach (DataRow row in dtCommexRMS.Rows)
                {
                    if (row[1].ToString().Trim() == "MCX F&O")
                        row[0] = "MX";
                    if (row[1].ToString().Trim() == "NCDEX F&O")
                        row[0] = Interaction.IIf(HttpContext.Current.Application["ChangeForNCDEX"].ToString().Trim() == "Y", "FX", "NX"); ;
                    if (row[1].ToString().Trim() == "Ahm-NMCE F&O")
                        row[0] = "AX";
                }

            }
            else
            {
            }



            //if (Segmentcash != "")
            //{
            //    if (Strings.InStr(Segmentcash, "F") > 0)
            //    {
            //        Segmentcash += "','K";
            //    }

            //    //if (Strings.InStr(Segmentcash, "M") > 0)
            //    //{
            //    //    Segmentcash += " and right(et_login,1) in('" + Strings.Replace(Segmentcash, ",", "','") + "')";
            //    //}
            //    //else
            //    //{
            //    //    Segmentcash += " and right(et_login,1) in('" + Strings.Replace(Segmentcash, ",", "','") + "') and right(et_login,1) not in ('M')";
            //    //}
            //}

            //strSQL = "select Right(ces_cd,2) Value, Rtrim(CES_Exchange) +  ' ' + Rtrim(CES_Segment) Display ";
            //strSQL += " from CompanyExchangeSegments ";
            //strSQL += " Where RIGHT(ces_cd,1) in ('" + Segmentcash + "') ";
            //strSQL += " Order by Case RIGHT(ces_cd,1) when 'C' then 0 when 'F' then 1 when 'K' then 2 else 3 end";



            //if (PageName == "Cash")
            //{
            //    Segmentcash = "'F','K','X'";

            //    strSQL = "select SUBSTRING(ces_cd, 2, 1) Value, Rtrim(CES_Exchange) +  ' ' + Rtrim(CES_Segment) Display ";
            //    strSQL += " from CompanyExchangeSegments ";
            //    strSQL += " Where RIGHT(ces_cd,1) in (" + Segmentcash + ") ";
            //    strSQL += " Order by Case RIGHT(ces_cd,1) when 'C' then 0 when 'F' then 1 when 'K' then 2 else 3 end";
            //    if (SQLConnComex != null)
            //    {
            //        dtCommexRMS = mylib.OpenDataTable(strSQL, SQLConnComex);
            //    }

            //    strSQL = "select Right(ces_cd,2) Value, Rtrim(CES_Exchange) +  ' ' + Rtrim(CES_Segment) Display ";
            //    strSQL += " from CompanyExchangeSegments ";
            //    strSQL += " Where RIGHT(ces_cd,1) in (" + Segmentcash + ") ";
            //    strSQL += " Order by Case RIGHT(ces_cd,1) when 'C' then 0 when 'F' then 1 when 'K' then 2 else 3 end";

            //    dtRMS = mylib.OpenDataTable(strSQL);
            //}
            //else
            //{
            //    if (PageName == "Comm")
            //    {
            //        strSQL = "select SUBSTRING(ces_cd, 2, 1) Value, Rtrim(CES_Exchange) +  ' ' + Rtrim(CES_Segment) Display ";
            //        strSQL += " from CompanyExchangeSegments ";
            //        strSQL += " Where RIGHT(ces_cd,1) in (" + Segmentcash + ") ";
            //        strSQL += " Order by Case RIGHT(ces_cd,1) when 'C' then 0 when 'F' then 1 when 'K' then 2 else 3 end";
            //        if (SQLConnComex != null)
            //        {
            //            dtCommexRMS = mylib.OpenDataTable(strSQL, SQLConnComex);
            //        }

            //    }
            //    else if (PageName == "ALL")
            //    {
            //        strSQL = "select SUBSTRING(ces_cd, 2, 1) Value, Rtrim(CES_Exchange) +  ' ' + Rtrim(CES_Segment) Display ";
            //        strSQL += " from CompanyExchangeSegments ";
            //        strSQL += " Where RIGHT(ces_cd,1) in (" + Segmentcash + ") ";
            //        strSQL += " Order by Case RIGHT(ces_cd,1) when 'C' then 0 when 'F' then 1 when 'K' then 2 else 3 end";
            //        if (SQLConnComex != null)
            //        {
            //            dtCommexRMS = mylib.OpenDataTable(strSQL, SQLConnComex);
            //        }

            //        strSQL = "select Right(ces_cd,2) Value, Rtrim(CES_Exchange) +  ' ' + Rtrim(CES_Segment) Display ";
            //        strSQL += " from CompanyExchangeSegments ";
            //        strSQL += " Where RIGHT(ces_cd,1) in (" + Segmentcash + ") ";
            //        strSQL += " Order by Case RIGHT(ces_cd,1) when 'C' then 0 when 'F' then 1 when 'K' then 2 else 3 end";

            //        dtRMS = mylib.OpenDataTable(strSQL);
            //    }
            //    else if (PageName == "ALLWithX")
            //    {
            //        strSQL = "select left(CES_Cd,2)+'X' Value, Rtrim(CES_Exchange) +  ' ' + Rtrim(CES_Segment) Display ";
            //        strSQL += " from CompanyExchangeSegments ";
            //        strSQL += " Where RIGHT(ces_cd,1) in (" + Segmentcash + ") ";
            //        strSQL += " Order by Case RIGHT(ces_cd,1) when 'C' then 0 when 'F' then 1 when 'K' then 2 else 3 end";
            //        if (SQLConnComex != null)
            //        {
            //            dtCommexRMS = mylib.OpenDataTable(strSQL, SQLConnComex);
            //        }

            //        strSQL = "select ces_cd Value, Rtrim(CES_Exchange) +  ' ' + Rtrim(CES_Segment) Display ";
            //        strSQL += " from CompanyExchangeSegments ";
            //        strSQL += " Where RIGHT(ces_cd,1) in (" + Segmentcash + ") ";
            //        strSQL += " Order by Case RIGHT(ces_cd,1) when 'C' then 0 when 'F' then 1 when 'K' then 2 else 3 end";

            //        dtRMS = mylib.OpenDataTable(strSQL);
            //    }
            //    else
            //    {

            //        strSQL = "select SUBSTRING(ces_cd, 2, 1) Value, Rtrim(CES_Exchange) +  ' ' + Rtrim(CES_Segment) Display ";
            //        strSQL += " from CompanyExchangeSegments ";
            //        strSQL += " Where RIGHT(ces_cd,1) in (" + Segmentcash + ") ";
            //        strSQL += " Order by Case RIGHT(ces_cd,1) when 'C' then 0 when 'F' then 1 when 'K' then 2 else 3 end";
            //        if (SQLConnComex != null)
            //        {
            //            dtCommexRMS = mylib.OpenDataTable(strSQL, SQLConnComex);
            //        }

            //        strSQL = "select Right(ces_cd,2) Value, Rtrim(CES_Exchange) +  ' ' + Rtrim(CES_Segment) Display ";
            //        strSQL += " from CompanyExchangeSegments ";
            //        strSQL += " Where RIGHT(ces_cd,1) in (" + Segmentcash + ") ";
            //        strSQL += " Order by Case RIGHT(ces_cd,1) when 'C' then 0 when 'F' then 1 when 'K' then 2 else 3 end";

            //        dtRMS = mylib.OpenDataTable(strSQL);

            //    }
            //}

            dtRMS.Merge(dtCommexRMS);

            ulist = dtRMS.AsEnumerable()
            .Select(row => new JsonComboModel
            {
                Display = row.Field<string>("Display").Trim(),
                Value = row.Field<string>("Value").Trim(),
            }).ToList();

            return ulist;
        }

        public IEnumerable<JsonComboModel> GetCompanyExchSegForBankRecipt()
        {
            DataTable dtRMS = new DataTable();
            DataTable dtCommexRMS = new DataTable();
            LibraryModel mylib = new LibraryModel();
            UtilityDBModel mydbutil = new UtilityDBModel();
            SqlConnection SQLConnComex = mydbutil.commexTemp_conn("Commex");
            List<JsonComboModel> ulist = new List<JsonComboModel>();
            string StrSql = "";
            StrSql = "Select CES_Cd,CES_Exchange+'/'+CES_Segment ExchSeg from CompanyExchangeSegments Where CES_CompanyCd = '" + HttpContext.Current.Session["CompanyCode"] + "' and CES_CompanyCd = '" + HttpContext.Current.Session["CompanyCode"] + "'";
            if (SQLConnComex != null)
            {
                StrSql += " Union all  ";
                StrSql += " Select left(CES_Cd,2)+'X',CES_Exchange+'/'+'Comm' ExchSeg from " + "[" + SQLConnComex.DataSource + "]" + "." + SQLConnComex.Database + ".dbo.CompanyExchangeSegments ";
                // StrSql += " Select left(CES_Cd,2)+'X',CES_Exchange+'/'+'Comm' ExchSeg from "  + SQLConnComex.Database + ".dbo.CompanyExchangeSegments ";
            }



            dtRMS = mylib.OpenDataTable(StrSql);


            ulist = dtRMS.AsEnumerable()
            .Select(row => new JsonComboModel
            {
                Display = row.Field<string>("ExchSeg").Trim(),
                Value = row.Field<string>("CES_Cd").Trim(),
            }).ToList();

            return ulist;
        }

        public EntityMasterModel GetEntityMaster()
        {
            string result = System.Configuration.ConfigurationManager.AppSettings["CompanyCode"];
            string strSQL = "select em_cd CompanyCode,em_name OrgName ,em_panno PanNo,em_add1 add1,em_add2 add2,em_add3 add3, em_add4 add4 from Entity_Master ";
            if (result == "")
            {
                strSQL += "where em_cd in (select min(em_cd) from Entity_master) ";
            }
            else if (result == "X")
            {
                strSQL += "where em_cd = '" + HttpContext.Current.Session["Company"] + "'";
            }
            else
            {
                strSQL += "where em_cd = '" + result + "'";
            }
            //if (result != "")
            //{
            //    strSQL = " select em_cd CompanyCode,em_name OrgName ,em_panno PanNo,em_add1 add1,em_add2 add2,em_add3 add3, em_add4 add4 from Entity_Master with (nolock) where em_cd in (select em_cd from Entity_master) where CompanyCode='" + result + "'";
            //}
            //else
            //{
            //    strSQL = " select em_cd CompanyCode,em_name OrgName ,em_panno PanNo,em_add1 add1,em_add2 add2,em_add3 add3, em_add4 add4 from Entity_Master with (nolock) where em_cd in (select em_cd from Entity_master) ";
            //}


            LibraryModel lib = new LibraryModel();
            DataTable dt = lib.OpenDataTable(strSQL);
            EntityMasterModel em = new EntityMasterModel()
            {
                em_name = dt.Rows[0]["OrgName"].ToString().Trim(),
                em_cd = dt.Rows[0]["CompanyCode"].ToString().Trim(),
                em_add1 = dt.Rows[0]["add1"].ToString().Trim(),
                em_add2 = dt.Rows[0]["add2"].ToString().Trim(),
                em_add3 = dt.Rows[0]["add3"].ToString().Trim(),
                em_add4 = dt.Rows[0]["add4"].ToString().Trim(),
                em_panno = dt.Rows[0]["PanNo"].ToString().Trim()

            };
            if (dt.Rows.Count > 0)
            {
                HttpContext.Current.Session["OrgName"] = em.em_name;
                HttpContext.Current.Session["CompanyCode"] = em.em_cd;
                HttpContext.Current.Session["add1"] = em.em_add1;
                HttpContext.Current.Session["add2"] = em.em_add2;
                HttpContext.Current.Session["add3"] = em.em_add3;
                HttpContext.Current.Session["add4"] = em.em_add4;
                HttpContext.Current.Session["PanNo"] = em.em_panno;
            }
            return em;
        }

    }
    public class modUserDetailsModel : ConnectionModel
    {
        public UserMasterModel GetUserDetails(string user)
        {
            UserMasterModel um = new UserMasterModel();
            strSQL = "Select * from User_master Where um_user_id = '" + user + "'";
            LibraryModel mylib = new LibraryModel();
            DataTable dtUser = mylib.OpenDataTable(strSQL);

            if (dtUser.Rows.Count > 0)
            {
                DataRow dR = dtUser.Rows[0];
                um = new UserMasterModel
                {
                    um_user_id = dR["um_user_id"].ToString().Trim(),
                    um_passwd = dR["um_passwd"].ToString(),
                    um_loginflag = dR["um_loginflag"].ToString().Trim(),
                    um_user_name = dR["um_user_name"].ToString().Trim(),
                    Um_Locked = dR["Um_Locked"].ToString().Trim(),
                    um_status = dR["um_status"].ToString().Trim(),

                };
            }
            return um;
        }
        //public UserMasterModel GetUserDetails(string user, string pwd = "")
        //{
        //    UtilityModel util = new UtilityModel();
        //    UserMasterModel um = new UserMasterModel();
        //    strSQL = "Select * from User_master Where um_user_id = '" + util.mfnReplaceForSQLInjection(user) + "'";
        //    if (pwd.Trim() != "")
        //    {
        //        strSQL += "and um_passwd='" + util.Encrypt(util.mfnReplaceForSQLInjection(pwd.Trim())) + "' ";
        //    }
        //    LibraryModel mylib = new LibraryModel();
        //    DataTable dtUser = mylib.OpenDataTable(strSQL);
        //    if (dtUser.Rows.Count > 0)
        //    {
        //        DataRow dR = dtUser.Rows[0];
        //        um = new UserMasterModel
        //        {
        //            um_user_id = dR["um_user_id"].ToString().Trim(),
        //            um_loginflag = dR["um_loginflag"].ToString().Trim(),
        //            um_passwd = dR["um_passwd"].ToString().Trim(),
        //            um_user_name = dR["um_user_name"].ToString().Trim()
        //        };
        //    }
        //    else
        //    {
        //        um = null;
        //    }
        //    return um;
        //}
    }
    public class modBillSummary : ConnectionModel
    {

        //public IEnumerable<BillSummaryModel> GetBillSummary(string type, string Code, string groupby, string fromdate, string strDpid)
        //{
        //    UtilityModel myutil = new UtilityModel();
        //    string strBillDt = myutil.dtos(fromdate);
        //    string strDPIDWhere = "";
        //    if (strDpid.Trim() != "")
        //    {
        //        String[] Dpid = strDpid.Trim().Split(',');
        //        for (int i = 0; i < Dpid.Length; i++)
        //        {
        //            if (Dpid[i].Trim() != "")
        //            {
        //                strDPIDWhere += "'" + Dpid[i].Trim() + "',";
        //            }

        //        }
        //        if (Strings.Right(strDPIDWhere.Trim(), 1) == ",")
        //        {
        //            strDPIDWhere = Strings.Left(strDPIDWhere.Trim(), strDPIDWhere.Trim().Length - 1);
        //        }
        //    }


        //    string strClientWhere = "";
        //    if (Code.Trim() != "")
        //    {
        //        if (type.Trim() == "CL")
        //        {
        //            strClientWhere = " and cm_cd = '" + Code.Trim() + "' ";
        //        }
        //        else if (type.Trim() == "FM")
        //        {
        //            strClientWhere = " and cm_familycd = '" + Code.Trim() + "' ";
        //        }
        //        else if (type.Trim() == "GR")
        //        {
        //            strClientWhere = " and cm_groupcd = '" + Code.Trim() + "' ";
        //        }
        //        else if (type.Trim() == "BR")
        //        {
        //            strClientWhere = " and cm_brboffcode = '" + Code.Trim() + "' ";
        //        }
        //    }

        //    bool blnmargin = false;
        //    string strSelect = "";

        //    switch (groupby)
        //    {
        //        case "Client":
        //            strSelect = "select '' as [BranchCode],";
        //            break;

        //        case "Branch":
        //            strSelect = "select rtrim(bm_branchname) + '['+ ltrim(rtrim(cm_brboffcode))+']' as [BranchCode],";
        //            break;

        //        case "Group":
        //            strSelect = "select rtrim(gr_desc) + '['+ ltrim(rtrim(cm_groupcd)) + ']' as [BranchCode],";
        //            break;

        //        case "Family":
        //            strSelect = "select rtrim(fm_desc) + '[' + ltrim(rtrim(cm_familycd)) + ']' as [BranchCode],";
        //            break;
        //    }

        //    string newln = Environment.NewLine;

        //    if (strDPIDWhere.Trim() != "")
        //    {
        //        strSQL = strSelect + "ces_cd,cm_cd as [Code] , cm_name as [Name/Description],bl_stlmnt as [Settlement], " + newln;
        //        strSQL += "case when bl_amount>0 then convert(varchar(20),bl_amount) else '0' end as  [Due To Us], " + newln;
        //        strSQL += "case when bl_amount<0 then convert(varchar(20),abs(bl_amount))  else '0' end as  [Due To You], " + newln;
        //        strSQL += "bl_billno as [Bill No], 'C' as [Segment] from Bills,settlements,companyexchangesegments,Client_master, branch_master , group_master, family_master " + newln;
        //        strSQL += " where CES_CompanyCd = '" + HttpContext.Current.Session["CompanyCode"] + "' and bl_companycode+left(bl_stlmnt,1)+'C'=ces_cd and bl_stlmnt = se_stlmnt and se_stdt = '" + strBillDt + "' and cm_cd = bl_clientcd " + newln;
        //        strSQL += " and cm_groupcd=gr_cd and cm_familycd=fm_cd " + newln;
        //        strSQL += " and left(bl_stlmnt,1)+'c' in (" + strDPIDWhere.Trim() + ")" + newln;
        //        strSQL += " and exists " + myutil.LoginAccess("bl_clientcd") + strClientWhere;
        //        strSQL += " and bl_billno<>0  and cm_brboffcode = bm_branchcd and cm_type<>'C'";
        //        //sbsql.Append(Filter1.prpSelectionSQL)
        //        strSQL += " union all ";
        //        strSQL += strSelect + "ces_cd,cm_cd as [Code] , cm_name as [Name/Description] , ";
        //        strSQL += " ltrim(rtrim(rtrim(ces_exchange)+'/'+ ces_segment)) as [Settlement],";
        //        strSQL += " Case When (case (fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case when fb_postmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + " ) then fb_margin1 + fb_margin2 else 0 end + case when fb_postExpmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_Expmargin1 + fb_Expmargin2 else 0 end) when 0 then fb_amount else (fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case when fb_postmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_margin1 + fb_margin2 else 0 end + case when fb_postExpmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_Expmargin1 + fb_Expmargin2 else 0 end) end) > 0 ";
        //        strSQL += " Then  (case (fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case when fb_postmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_margin1 + fb_margin2 else 0 end + case when fb_postExpmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_Expmargin1 + fb_Expmargin2 else 0 end) when 0 then convert(varchar(20), abs(fb_amount)) else (convert(varchar(20),abs(fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case when fb_postmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_margin1 + fb_margin2 else 0 end + case when fb_postExpmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_Expmargin1 + fb_Expmargin2 else 0 end))) end) else '0' end [Due To Us], ";
        //        strSQL += " Case When (case (fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case when fb_postmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_margin1 + fb_margin2 else 0 end + case when fb_postExpmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_Expmargin1 + fb_Expmargin2 else 0 end) when 0 then fb_amount else (fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case when fb_postmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_margin1 + fb_margin2 else 0 end + case when fb_postExpmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_Expmargin1 + fb_Expmargin2 else 0 end) end) < 0  ";
        //        strSQL += " Then (case (fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case when fb_postmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_margin1 + fb_margin2 else 0 end + case when fb_postExpmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_Expmargin1 + fb_Expmargin2 else 0 end) when 0 then convert(varchar(20), abs(fb_amount)) else (convert(varchar(20), abs(fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case when fb_postmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_margin1 + fb_margin2 else 0 end +  case when fb_postExpmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_Expmargin1 + fb_Expmargin2 else 0 end))) end) else '0' end [Due To You], ";
        //        strSQL += " fb_billno as [Bill No],fb_Segment as [Segment] from fbills, client_master,branch_master , group_master, family_master,companyexchangesegments";
        //        strSQL += " where CES_CompanyCd = '" + HttpContext.Current.Session["CompanyCode"] + "' and fb_billdt = '" + strBillDt + "' and cm_cd = fb_clientcd and fb_companycode+fb_exchange+fb_Segment=ces_cd";
        //        strSQL += " and cm_groupcd=gr_cd and cm_familycd=fm_cd ";
        //        strSQL += " and fb_exchange+fb_segment in (" + strDPIDWhere.Trim() + ")";
        //        strSQL += " and fb_billno<>0  and cm_brboffcode = bm_branchcd and cm_type<>'C'";
        //        strSQL += " and exists " + myutil.LoginAccess("fb_clientcd") + strClientWhere;
        //        //sbsql.Append(Filter1.prpSelectionSQL)
        //    }
        //    //    If ObjCommexCon.Database <> "" And ObjCommexCon.DataSource <> "" And strComExchange <> "" Then
        //    //        If sbsql.Length <> 0 Then sbsql.Append(" union all ")
        //    //    sbsql.Append(strSelect & "ces_cd,cm_cd as [Code] , cm_name as [Name/Description], ")
        //    //    sbsql.Append(" ltrim(rtrim(ces_exchange)) + '-Commodity' as [Settlement],")

        //    //    sbsql.Append(" Case When (case (fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case  when fb_postmrgyn in ('Y'" & If(chkmargin.Checked = True, ",'T'", "") & ") then fb_margin1 + fb_margin2 else 0 end ) when 0 then fb_amount else (fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case when fb_postmrgyn in ('Y' " & If(chkmargin.Checked = True, ",'T'", "") & " ) then fb_margin1 + fb_margin2 else 0 end ) end) > 0  ")
        //    //    sbsql.Append(" Then  (case (fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case when fb_postmrgyn in ('Y'" & If(chkmargin.Checked = True, ",'T'", "") & " ) then fb_margin1 + fb_margin2 else 0 end ) when 0 then convert(varchar(20),abs(fb_amount)) else (convert( varchar(20),abs(fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case when fb_postmrgyn in ('Y' " & If(chkmargin.Checked = True, ",'T'", "") & " ) then fb_margin1 + fb_margin2 else 0 end ))) end) else '0' end [Due To Us],")
        //    //    sbsql.Append("  Case When (case (fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case when fb_postmrgyn in ('Y' " & If(chkmargin.Checked = True, ",'T'", "") & " ) then fb_margin1 + fb_margin2 else 0 end ) when 0 then fb_amount else (fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case when fb_postmrgyn in ('Y' " & If(chkmargin.Checked = True, ",'T'", "") & " ) then fb_margin1 + fb_margin2 else 0 end ) end) < 0  ")
        //    //    sbsql.Append(" Then (case (fb_mtm+fb_premium+fb_exerassign+fb_charges1 +  case when fb_postmrgyn in ('Y' " & If(chkmargin.Checked = True, ",'T'", "") & " ) then fb_margin1 + fb_margin2 else 0 end ) when 0 then convert(varchar(20), abs(fb_amount)) else (convert(varchar(20),abs(fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case when fb_postmrgyn in ('Y' " & If(chkmargin.Checked = True, ",'T'", "") & " ) then fb_margin1 + fb_margin2 else 0 end ))) end) else '0' end [Due To You], ")

        //    //    sbsql.Append(" fb_billno as [Bill No],'X' + fb_exchange  as [Segment] from " & "[" & ObjCommexCon.DataSource & "]" & "." & ObjCommexCon.Database & ".dbo.fbills, " & "[" & ObjCommexCon.DataSource & "]" & "." & ObjCommexCon.Database & ".dbo.client_master,")
        //    //    sbsql.Append("[" & ObjCommexCon.DataSource & "]" & "." & ObjCommexCon.Database & ".dbo.branch_master , " & "[" & ObjCommexCon.DataSource & "]" & "." & ObjCommexCon.Database & ".dbo.group_master, " & "[" & ObjCommexCon.DataSource & "]" & "." & ObjCommexCon.Database & ".dbo.family_master,")
        //    //    sbsql.Append("[" & ObjCommexCon.DataSource & "]" & "." & ObjCommexCon.Database & ".dbo.companyexchangesegments ")
        //    //    sbsql.Append(" where fb_billdt = '" & MyDatecontrol.PrpFromDateString & "' and cm_cd = fb_clientcd ")
        //    //    sbsql.Append(" and cm_groupcd=gr_cd and cm_familycd=fm_cd and fb_companycode+fb_exchange+'F'=ces_cd")
        //    //    sbsql.Append(" and fb_exchange " & IIf(Application("IsTplusCommex") = "Y", "+'X'", "") & " in ('" & Replace(strComExchange, ",", "','") & "')")

        //    //     sbsql.Append(" and fb_billno<>0  and cm_brboffcode = bm_branchcd and cm_type<>'C'" & objApplicationUser.fnLoginFilter())
        //    //    sbsql.Append(Filter1.prpSelectionSQL)
        //    //End If
        //    strSQL += " order by BranchCode,cm_cd ";

        //    List<BillSummaryModel> ulist = new List<BillSummaryModel>();
        //    LibraryModel mylib = new LibraryModel();
        //    DataTable dtSum = mylib.OpenDataTable(strSQL);
        //    if (dtSum.Rows.Count > 0)
        //    {
        //        ulist = dtSum.AsEnumerable()
        //        .Select(row => new BillSummaryModel
        //        {
        //            GroupCode = row.Field<string>("BranchCode"),
        //            Code = row.Field<string>("Code"),
        //            Name = row.Field<string>("Name/Description"),
        //            Settlement = row.Field<string>("Settlement"),
        //            Segment = row.Field<string>("Segment"),
        //            CompanyCode = row.Field<string>("ces_cd"),
        //            DueToUs = row.Field<string>("Due To Us"),
        //            DueToYou = row.Field<string>("Due To You"),
        //            BillNo = row.Field<decimal>("Bill No")
        //        }).ToList();
        //    }
        //    return ulist;
        //}

        public IEnumerable<BillSummaryModel> GetBillSummary(string type, string Code, string groupby, string fromdate, string strDpid)
        {
            UtilityModel myutil = new UtilityModel();
            string strBillDt = myutil.dtos(fromdate);
            UtilityDBModel mydbutil = new UtilityDBModel();
            SqlConnection SQLConnComex = mydbutil.commexTemp_conn("Commex");
            //string strDPIDWhere = "";
            string strSQL = "";
            string IsTplusCommex;
            if ((string)HttpContext.Current.Session["IsTplusCommex"] == "Y")
            {
                IsTplusCommex = "Y";
            }
            else
            {
                IsTplusCommex = "N";
            }
            //if (strDpid.Trim() != "")
            //{
            //    String[] Dpid = strDpid.Trim().Split(',');
            //    for (int i = 0; i < Dpid.Length; i++)
            //    {
            //        if (Dpid[i].Trim() != "")
            //        {
            //            strDPIDWhere += "'" + Dpid[i].Trim() + "',";
            //        }

            //    }
            //    if (Strings.Right(strDPIDWhere.Trim(), 1) == ",")
            //    {
            //        strDPIDWhere = Strings.Left(strDPIDWhere.Trim(), strDPIDWhere.Trim().Length - 1);
            //    }
            //}
            string ExCommex = "";
            string Exchng = "";
            string[] strArray = strDpid.Split(',');
            bool first = true;
            foreach (string obj in strArray)
            {
                if (obj.Length >= 2)
                {
                    if (first)
                    {
                        Exchng = obj;
                        first = false;
                    }
                    else
                    {
                        Exchng = obj + "," + Exchng;
                    }
                }

                //your insert query
            }
            bool Cofirst = true;
            foreach (string obj in strArray)
            {
                if ((string)HttpContext.Current.Session["IsTplusCommex"] == "Y")
                {
                    if (obj.Substring(1, 1) == "X")
                    {
                        if (Cofirst)
                        {
                            ExCommex = obj;
                            Cofirst = false;
                        }
                        else
                        {
                            ExCommex = obj + "," + ExCommex;
                        }
                    }
                }
                else
                {
                    if (obj.Length < 2)
                    {
                        if (Cofirst)
                        {
                            ExCommex = obj;
                            Cofirst = false;
                        }
                        else
                        {
                            ExCommex = obj + "," + ExCommex;
                        }
                    }

                }

                //your insert query
            }


            string strClientWhere = "";
            if (Code.Trim() != "")
            {
                if (type.Trim() == "CL")
                {
                    strClientWhere = " and cm_cd = '" + Code.Trim() + "' ";
                }
                else if (type.Trim() == "FM")
                {
                    strClientWhere = " and cm_familycd = '" + Code.Trim() + "' ";
                }
                else if (type.Trim() == "GR")
                {
                    strClientWhere = " and cm_groupcd = '" + Code.Trim() + "' ";
                }
                else if (type.Trim() == "BR")
                {
                    strClientWhere = " and cm_brboffcode = '" + Code.Trim() + "' ";
                }
            }

            bool blnmargin = false;
            string strSelect = "";

            switch (groupby)
            {
                case "Client":
                    strSelect = "select '' as [BranchCode],";
                    break;

                case "Branch":
                    strSelect = "select rtrim(bm_branchname) + '['+ ltrim(rtrim(cm_brboffcode))+']' as [BranchCode],";
                    break;

                case "Group":
                    strSelect = "select rtrim(gr_desc) + '['+ ltrim(rtrim(cm_groupcd)) + ']' as [BranchCode],";
                    break;

                case "Family":
                    strSelect = "select rtrim(fm_desc) + '[' + ltrim(rtrim(cm_familycd)) + ']' as [BranchCode],";
                    break;
            }

            string newln = Environment.NewLine;

            if (Exchng.Trim() != "")
            {
                strSQL = strSelect + "ces_cd,cm_cd as [Code] , cm_name as [Name/Description],bl_stlmnt as [Settlement], " + newln;
                strSQL += "case when bl_amount>0 then convert(varchar(20),bl_amount) else '0' end as  [Due To Us], " + newln;
                strSQL += "case when bl_amount<0 then convert(varchar(20),abs(bl_amount))  else '0' end as  [Due To You], " + newln;
                strSQL += "bl_billno as [Bill No], 'C' as [Segment] from Bills,settlements,companyexchangesegments,Client_master, branch_master , group_master, family_master " + newln;
                strSQL += " where CES_CompanyCd = '" + HttpContext.Current.Session["CompanyCode"] + "' and bl_companycode+left(bl_stlmnt,1)+'C'=ces_cd and bl_stlmnt = se_stlmnt and se_stdt = '" + strBillDt + "' and cm_cd = bl_clientcd " + newln;
                strSQL += " and cm_groupcd=gr_cd and cm_familycd=fm_cd " + newln;
                strSQL += " and left(bl_stlmnt,1)+'c' in ('" + (Exchng.Replace("X", "")).Replace(",", "','") + "')" + newln;
                //strSQL += " and exists " + myutil.LoginAccess("bl_clientcd") + strClientWhere;
                strSQL += strClientWhere + HttpContext.Current.Session["LoginAccessOld"];
                strSQL += " and bl_billno<>0  and cm_brboffcode = bm_branchcd and cm_type<>'C'";
                //sbsql.Append(Filter1.prpSelectionSQL)
                strSQL += " union all ";
                strSQL += strSelect + "ces_cd,cm_cd as [Code] , cm_name as [Name/Description] , ";
                strSQL += " ltrim(rtrim(rtrim(ces_exchange)+'/'+ ces_segment)) as [Settlement],";
                strSQL += " Case When (case (fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case when fb_postmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + " ) then fb_margin1 + fb_margin2 else 0 end + case when fb_postExpmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_Expmargin1 + fb_Expmargin2 else 0 end) when 0 then fb_amount else (fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case when fb_postmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_margin1 + fb_margin2 else 0 end + case when fb_postExpmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_Expmargin1 + fb_Expmargin2 else 0 end) end) > 0 ";
                strSQL += " Then  (case (fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case when fb_postmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_margin1 + fb_margin2 else 0 end + case when fb_postExpmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_Expmargin1 + fb_Expmargin2 else 0 end) when 0 then convert(varchar(20), abs(fb_amount)) else (convert(varchar(20),abs(fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case when fb_postmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_margin1 + fb_margin2 else 0 end + case when fb_postExpmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_Expmargin1 + fb_Expmargin2 else 0 end))) end) else '0' end [Due To Us], ";
                strSQL += " Case When (case (fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case when fb_postmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_margin1 + fb_margin2 else 0 end + case when fb_postExpmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_Expmargin1 + fb_Expmargin2 else 0 end) when 0 then fb_amount else (fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case when fb_postmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_margin1 + fb_margin2 else 0 end + case when fb_postExpmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_Expmargin1 + fb_Expmargin2 else 0 end) end) < 0  ";
                strSQL += " Then (case (fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case when fb_postmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_margin1 + fb_margin2 else 0 end + case when fb_postExpmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_Expmargin1 + fb_Expmargin2 else 0 end) when 0 then convert(varchar(20), abs(fb_amount)) else (convert(varchar(20), abs(fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case when fb_postmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_margin1 + fb_margin2 else 0 end +  case when fb_postExpmrgyn in ('Y'" + (blnmargin ? ",'T'" : "") + ") then fb_Expmargin1 + fb_Expmargin2 else 0 end))) end) else '0' end [Due To You], ";
                strSQL += " fb_billno as [Bill No],fb_Segment as [Segment] from fbills, client_master,branch_master , group_master, family_master,companyexchangesegments";
                strSQL += " where CES_CompanyCd = '" + HttpContext.Current.Session["CompanyCode"] + "' and fb_billdt = '" + strBillDt + "' and cm_cd = fb_clientcd and fb_companycode+fb_exchange+fb_Segment=ces_cd";
                strSQL += " and cm_groupcd=gr_cd and cm_familycd=fm_cd ";
                strSQL += " and fb_exchange+fb_segment in ('" + (Exchng.Replace("X", "")).Replace(",", "','") + "')";
                strSQL += " and fb_billno<>0  and cm_brboffcode = bm_branchcd and cm_type<>'C'";
                strSQL += strClientWhere + HttpContext.Current.Session["LoginAccessOld"];
                //strSQL += " and exists " + myutil.LoginAccess("fb_clientcd") + strClientWhere;
                //sbsql.Append(Filter1.prpSelectionSQL)
            }

            if (SQLConnComex.DataSource != null & ExCommex != "" & SQLConnComex.Database != null)
            {
                if (strSQL.Length != 0)
                    strSQL += " union all ";
                strSQL += strSelect + "ces_cd,cm_cd as [Code] , cm_name as [Name/Description], ";
                strSQL += " ltrim(rtrim(ces_exchange)) + '-Commodity' as [Settlement],";
                strSQL += " Case When (case (fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case  when fb_postmrgyn in ('Y'" + (blnmargin == true ? ",'T'" : "") + ") then fb_margin1 + fb_margin2 else 0 end ) when 0 then fb_amount else (fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case when fb_postmrgyn in ('Y' " + (blnmargin == true ? ",'T'" : "") + " ) then fb_margin1 + fb_margin2 else 0 end ) end) > 0  ";
                strSQL += " Then  (case (fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case when fb_postmrgyn in ('Y'" + (blnmargin == true ? ",'T'" : "") + " ) then fb_margin1 + fb_margin2 else 0 end ) when 0 then convert(varchar(20),abs(fb_amount)) else (convert( varchar(20),abs(fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case when fb_postmrgyn in ('Y' " + (blnmargin == true ? ",'T'" : "") + " ) then fb_margin1 + fb_margin2 else 0 end ))) end) else '0' end [Due To Us],";
                strSQL += "  Case When (case (fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case when fb_postmrgyn in ('Y' " + (blnmargin == true ? ",'T'" : "") + " ) then fb_margin1 + fb_margin2 else 0 end ) when 0 then fb_amount else (fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case when fb_postmrgyn in ('Y' " + (blnmargin == true ? ",'T'" : "") + " ) then fb_margin1 + fb_margin2 else 0 end ) end) < 0  ";
                strSQL += " Then (case (fb_mtm+fb_premium+fb_exerassign+fb_charges1 +  case when fb_postmrgyn in ('Y' " + (blnmargin == true ? ",'T'" : "") + " ) then fb_margin1 + fb_margin2 else 0 end ) when 0 then convert(varchar(20), abs(fb_amount)) else (convert(varchar(20),abs(fb_mtm+fb_premium+fb_exerassign+fb_charges1 + case when fb_postmrgyn in ('Y' " + (blnmargin == true ? ",'T'" : "") + " ) then fb_margin1 + fb_margin2 else 0 end ))) end) else '0' end [Due To You], ";
                strSQL += " fb_billno as [Bill No],'X' + fb_exchange  as [Segment] from " + "[" + SQLConnComex.DataSource + "]" + "." + SQLConnComex.Database + ".dbo.fbills, " + "[" + SQLConnComex.DataSource + "]" + "." + SQLConnComex.Database + ".dbo.client_master,";
                strSQL += "[" + SQLConnComex.DataSource + "]" + "." + SQLConnComex.Database + ".dbo.branch_master , " + "[" + SQLConnComex.DataSource + "]" + "." + SQLConnComex.Database + ".dbo.group_master, " + "[" + SQLConnComex.DataSource + "]" + "." + SQLConnComex.Database + ".dbo.family_master,";
                strSQL += "[" + SQLConnComex.DataSource + "]" + "." + SQLConnComex.Database + ".dbo.companyexchangesegments ";
                strSQL += " where fb_billdt = '" + strBillDt + "' and cm_cd = fb_clientcd ";
                strSQL += " and cm_groupcd=gr_cd and cm_familycd=fm_cd and fb_companycode+fb_exchange+'F'=ces_cd";
                strSQL += "  and fb_exchange " + (IsTplusCommex == "Y" ? "+'X'" : "") + " in ('" + ExCommex.Replace(",", "','") + "')";
                //strSQL += " and fb_exchange = '" + (IsTplusCommex == "Y" ? ExCommex.Replace("X", "") : strDpid) + "'";
                strSQL += " and fb_billno<>0  and cm_brboffcode = bm_branchcd and cm_type<>'C'";
                strSQL += " and exists " + myutil.LoginAccessCommex("fb_clientcd") + strClientWhere;
            }

            strSQL += " order by BranchCode,cm_cd "; // '& IIf(Trim(cmbBranchWise.SelectedValue) <> "Client", "cm_cd", "")



            List<BillSummaryModel> ulist = new List<BillSummaryModel>();
            LibraryModel mylib = new LibraryModel();
            DataTable dtSum = mylib.OpenDataTable(strSQL);
            if (dtSum.Rows.Count > 0)
            {
                ulist = dtSum.AsEnumerable()
                .Select(row => new BillSummaryModel
                {
                    GroupCode = row.Field<string>("BranchCode"),
                    Code = row.Field<string>("Code"),
                    Name = row.Field<string>("Name/Description"),
                    Settlement = row.Field<string>("Settlement"),
                    Segment = row.Field<string>("Segment"),
                    CompanyCode = row.Field<string>("ces_cd"),
                    DueToUs = row.Field<string>("Due To Us"),
                    DueToYou = row.Field<string>("Due To You"),
                    BillNo = row.Field<decimal>("Bill No")
                }).ToList();
            }
            return ulist;
        }

        public IEnumerable<BillPrintModel> GetBillPrint()
        {

            List<BillPrintModel> ulist = new List<BillPrintModel>();
            return ulist;
        }

    }
    public class modTrades : ConnectionModel
    {

        public IEnumerable<CodeNameAmountModel> GetTradesDashBoard(string strDate)
        {

            UtilityModel myutil = new UtilityModel();

            strDate = myutil.dtos(strDate);




            strSQL = "select bl_Stlmnt  , Sum(bl_SpecTO+bl_DelvTO) amount from Bills,settlements,Client_master ";
            strSQL += " Where bl_Stlmnt = se_Stlmnt and bl_clientcd = cm_cd and cm_type <> 'C' and cm_schedule = 49843750 and se_stdt = '" + strDate + "'";
            strSQL += " and exists " + myutil.LoginAccess("bl_clientcd");
            strSQL += " Group By bl_Stlmnt ";
            strSQL += " union all";
            strSQL += " select Rtrim(CES_Exchange)+'-'+CES_Segment bl_Stlmnt , Sum(FB_FutTO+FB_OptTO) amount  from Fbills,Client_master,CompanyExchangeSegments";
            strSQL += " Where fb_clientcd = cm_cd and fb_companycode + fb_exchange + fb_Segment = CES_Cd and cm_type <> 'C' and cm_schedule = 49843750 and fb_billdt = '" + strDate + "'";
            strSQL += " and exists " + myutil.LoginAccess("fb_clientcd");
            strSQL += " Group By Rtrim(CES_Exchange) +'-'+ CES_Segment";
            LibraryModel mylib = new LibraryModel();
            DataTable dtTrx = mylib.OpenDataTable(strSQL);
            List<CodeNameAmountModel> uList = new List<CodeNameAmountModel>();
            uList = dtTrx.AsEnumerable()
            .Select(row => new CodeNameAmountModel
            {
                Code = row.Field<string>("bl_Stlmnt").Trim(),
                Name = "",
                Amt = row.Field<decimal>("amount"),
            }).ToList();

            return uList;
        }
        public CodeNameAmountModel GetTradesDashBoardDelSpec(string strDate)
        {

            UtilityModel myutil = new UtilityModel();
            strDate = myutil.dtos(strDate);
            strSQL = "select Sum(Spec) Spec, Sum(Delv) Delv , isnull (Sum(Futures),0) Futures, isnull(Sum(Options),0) Options from (";
            strSQL += "select Sum(bl_SpecBrk) Spec , Sum(bl_DelvBrk) Delv , 0 Futures, 0 Options " + myutil.newline();
            strSQL += "from Bills,settlements,Client_master " + myutil.newline();
            strSQL += "Where bl_Stlmnt = se_Stlmnt and bl_clientcd = cm_cd and cm_type <> 'C' and cm_schedule = 49843750 " + myutil.newline();
            strSQL += "and se_stdt = '" + strDate + "' " + myutil.newline();
            strSQL += "and exists " + myutil.LoginAccess("bl_clientcd");
            strSQL += "Group By bl_Stlmnt " + myutil.newline();
            strSQL += "union all " + myutil.newline();
            strSQL += "select 0 Spec , 0 Delv ,  Sum(FB_FutBrk) Future , Sum(FB_OptBrk) Options" + myutil.newline();
            strSQL += "from Fbills,Client_master,CompanyExchangeSegments" + myutil.newline();
            strSQL += "Where fb_clientcd = cm_cd and fb_companycode + fb_exchange + fb_Segment = CES_Cd and cm_type <> 'C' and cm_schedule = 49843750 and fb_billdt = '" + strDate + "'" + myutil.newline();
            strSQL += "and exists " + myutil.LoginAccess("fb_clientcd");
            strSQL += ")a";



            LibraryModel mylib = new LibraryModel();
            CodeNameAmountModel uList = new CodeNameAmountModel();
            DataTable dtTrx = mylib.OpenDataTable(strSQL);
            if (dtTrx.Rows.Count > 0)
            {
                uList.Amt = decimal.Parse(dtTrx.Rows[0]["Spec"].ToString());
                uList.Amt2 = decimal.Parse(dtTrx.Rows[0]["Delv"].ToString());
                uList.futures = decimal.Parse(dtTrx.Rows[0]["Futures"].ToString());
                uList.options = decimal.Parse(dtTrx.Rows[0]["Options"].ToString());


            }



            return uList;
        }
        public IEnumerable<BillPrintModel> GetCashBill(string strstlmnt, string strOrderBy, string Code, string strSelect, string strDate)
        {
            LibraryModel mylib = new LibraryModel(true);
            UtilityModel myutil = new UtilityModel();
            string strsql = "";
            string strDistProcess = "N";
            string strsqlfun;
            //if (!string.IsNullOrEmpty(Strings.Trim(strstlmnt)))
            //{
            //    if (Strings.Trim(mylib.fnGetSysParam("DistProcess")) == "Y")
            //    {
            //        strsqlfun = " Select Count(0) From Company_settlement With (nolock) ";
            //        strsqlfun = strsqlfun + " Where cs_companyCode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
            //        strsqlfun = strsqlfun + " and cs_stlmnt = '" + strstlmnt + "'";
            //        strsqlfun = strsqlfun + " and cs_lockflag = 'D' ";
            //        DataTable dt = mylib.OpenDataTable(strsqlfun);

            //        if (dt.Rows.Count > 0)
            //        {
            //            strDistProcess = "N";
            //        }
            //    }
            //}


            List<BillPrintModel> ulist = new List<BillPrintModel>();
            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {
                curCon.Open();
                try
                {

                    mylib.ExecSQL("drop table #tmpDosBill", curCon);
                }
                catch (Exception)
                {

                }
                finally
                {

                    strsql = "create table #tmpDosBill (";
                    strsql = strsql + " td_companycode char(1),td_stlmnt char(9),td_dt char(8),td_clientcd char(8) ,cm_name char(50),cm_groupcd  char(3),";
                    strsql = strsql + " cm_familycd  char(3),cm_subbroker char(8),cm_email varchar(75),cm_type char(1),cm_gainloss money,";
                    strsql = strsql + " cm_jobloss money,td_scripcd char(6),ss_name char(40), tqty numeric(17,3),td_rate money, dqty numeric(9,3),   ";
                    strsql = strsql + " tvalue money,  brokerage numeric(17),  turnover numeric(17), td_cfflag varchar(1),  bl_billno numeric(9), ";
                    strsql = strsql + " bl_billdt char(8),  ledgercd char(8),td_tradeid char(20),td_subtradeid char(9), rectype int, sortlist int , sr_nodelyn char(1),";
                    strsql = strsql + " clientrec char(1),se_stdt char(8),se_endt char(8),cm_billflag char(1),";
                    strsql = strsql + " cm_add1 varchar(50),cm_add2 varchar(50),cm_add3 varchar(50), td_ordertime varchar(15), ";
                    strsql = strsql + " td_orderid numeric(25), td_time char(8), td_marketrate money, td_mainbrrate money, td_brokerage money, ";
                    strsql = strsql + " td_mainbrbrokerage money, ss_closedt char(8), cm_contractflag char(1),cm_add4 char(50), cm_pincode char(10), td_brokeragetype char(3),";
                    strsql = strsql + " td_turnovertax money, cm_brboffcode char(6), cm_sebino char(15), se_shpayindt char(8), se_shpayoutdt char(8),";
                    strsql = strsql + " ss_lname char(60), cm_cd char(8)";
                    strsql = strsql + " )";
                    mylib.ExecSQL(strsql, curCon);
                }

                string strClientWhere = "";
                string strWhere = "";
                string StrStlmntNew = "";
                bool blnInterOP = false;


                string StrMsg;
                strDate = mylib.fnFireQuery("Settlements", "se_stdt", "se_stlmnt", strstlmnt, true, curCon);
                StrMsg = mylib.fnCheckInterOperability(strDate, "C", curCon);

                if (StrMsg.ToUpper().Trim() == "TRUE")
                {
                    blnInterOP = true;
                }

                string[] arrStlmnt;

                if (blnInterOP)
                {
                    arrStlmnt = Strings.Split(mylib.fnGetInterOpStlmnts(Strings.Trim(strstlmnt), false, curCon), ",");
                    //arrStlmnt = strstlmnt.Trim().Split(',');



                    for (int i = 0; i < arrStlmnt.Length; i++)
                    {
                        if (arrStlmnt.Length == 1)
                        { strWhere += " and td_stlmnt = '" + arrStlmnt[i] + "'"; }
                        else
                        {
                            if (i == 0)
                            {
                                strWhere += " and td_stlmnt in ('" + arrStlmnt[i] + "'";
                            }
                            else
                            {


                                if (i == arrStlmnt.Length - 1)
                                { strWhere += ",'" + arrStlmnt[i] + "')"; }
                                else
                                {
                                    strWhere += ",'" + arrStlmnt[i] + "'";
                                }

                            }
                        }


                    }


                    //if (arrStlmnt.Length > 1)
                    //{
                    //    strWhere += " and td_stlmnt in ('" + arrStlmnt[0] + "','" + arrStlmnt[1] + "')";
                    //}
                    //else
                    //{
                    //    strWhere += " and td_stlmnt = '" + arrStlmnt[0] + "'";
                    //}
                    //StrStlmntNew = arrStlmnt[0];
                    //  StrStlmntNew = arrStlmnt[1];
                }
                else
                {
                    strWhere += " and td_stlmnt='" + strstlmnt.Trim() + "' ";
                    StrStlmntNew = "";
                }
                if (Code != "")
                {
                    strClientWhere = strClientWhere + " and cm_cd = '" + Code + "' ";
                }

                strClientWhere = strClientWhere + " and cm_type <>'C' ";
                strClientWhere = strClientWhere + HttpContext.Current.Session["LoginAccessOld"];
                strsql = "select * from sysobjects where name='#tmpDosBill'";
                mylib.ExecSQL(strsql, curCon);

                strsql = "INSERT INTO #tmpDosBill ";
                {
                    if (Strings.Left(strstlmnt, 1) == "B" & Strings.Mid(strstlmnt, 2, 1) == "C")
                    {
                        strsql = strsql + " select td_companycode," + Interaction.IIf(blnInterOP, "'" + StrStlmntNew.Trim() + "' td_stlmnt", "td_stlmnt") + ",td_dt,td_clientcd,cm_name,cm_groupcd,cm_familycd,cm_subbroker,cm_email,cm_type,cm_gainloss,cm_jobloss,td_scripcd,ss_name,";
                        strsql = strsql + " (td_bqty - td_sqty) tqty,td_rate,(td_bqty - td_sqty) dqty,";
                        strsql = strsql + " Convert(money, (td_bqty - td_sqty) * td_rate)  'tvalue',";
                        strsql = strsql + " convert(money,(td_bqty + td_sqty)*td_brokerage) brokerage, convert(money,(td_bqty + td_sqty)* td_rate) turnover,";
                        strsql = strsql + " case td_cfflag when 'Y' then 'B' else 'T' end td_cfflag,";
                        strsql = strsql + "  isnull(bl_billno,0) bl_billno,isnull(bl_billdt,'') bl_billdt,'' ledgercd,td_tradeid,td_subtradeid,";
                        strsql = strsql + " 1 rectype,1 sortlist,'N' sr_nodelyn,'C' clientrec,se_stdt,se_endt,cm_billflag,cm_add1,cm_add2,cm_add3,isnull(td_ordertime,'') td_ordertime,";
                        strsql = strsql + " td_orderid, td_time, td_marketrate, td_mainbrrate, td_brokerage, td_mainbrbrokerage, ss_closedt, cm_contractflag, cm_add4, cm_pincode, td_brokeragetype, td_turnovertax, cm_brboffcode, cm_sebino, se_shpayindt, se_shpayoutdt, ss_lname, cm_cd";
                        strsql = strsql + " from Trx x left outer join Bills on bl_companycode = td_companycode and bl_stlmnt = td_stlmnt and bl_clientcd = td_clientcd,Securities,Client_master,Settlements";
                        strsql = strsql + " where se_stlmnt = td_stlmnt And td_scripcd = ss_cd And td_clientcd = cm_cd ";
                        strsql = strsql + " and td_scripcd not in (select sr_scripcd from Std_rates where sr_stlmnt = td_stlmnt and sr_nodelyn = 'Y')";
                        strsql = strsql + " ";
                        strsql = strsql + " and cm_type <> 'C'";
                        strsql = strsql + " and td_companycode='" + HttpContext.Current.Session["CompanyCode"] + "'  and (td_rate > 0 )";
                        strsql = strsql + strWhere + strClientWhere;


                    }
                    else if (Strings.Left(strstlmnt, 1) == "N")
                    {
                        strsql = strsql + "  select td_companycode," + Interaction.IIf(blnInterOP, "'" + StrStlmntNew.Trim() + "' td_stlmnt", "td_stlmnt") + ",td_dt,td_clientcd,cm_name,cm_groupcd,cm_familycd,cm_subbroker,cm_email,cm_type,cm_gainloss,cm_jobloss,td_scripcd,ss_name,";
                        strsql = strsql + " (td_bqty - td_sqty) tqty,td_rate,(td_bqty - td_sqty) dqty,";
                        strsql = strsql + " Convert(money, (td_bqty - td_sqty) * td_rate)  'tvalue',";
                        strsql = strsql + " convert(money,(td_bqty + td_sqty)*td_brokerage) brokerage, convert(money,(td_bqty + td_sqty)* td_rate) turnover,";
                        strsql = strsql + " case td_cfflag when 'Y' then 'B' else 'T' end td_cfflag,";
                        strsql = strsql + " isnull(bl_billno,0) bl_billno,isnull(bl_billdt,'') bl_billdt,'' ledgercd,td_tradeid,td_subtradeid,";
                        strsql = strsql + " 1 rectype,1 sortlist,'N' sr_nodelyn,'C' clientrec,se_stdt,se_endt,cm_billflag,cm_add1,cm_add2,cm_add3,isnull(td_ordertime,'') td_ordertime,";
                        strsql = strsql + " td_orderid, td_time, td_marketrate, td_mainbrrate, td_brokerage, td_mainbrbrokerage, ss_closedt, cm_contractflag, cm_add4, cm_pincode, td_brokeragetype, td_turnovertax, cm_brboffcode, cm_sebino, se_shpayindt, se_shpayoutdt, ss_lname, cm_cd";
                        if (strDistProcess == "Y")
                        {
                            strsql = strsql + " from TrxDaily x With(index(idx_TrxDaily_stlmnt_clientcd)) left outer join Bills on bl_companycode = td_companycode and bl_stlmnt = td_stlmnt and bl_clientcd = td_clientcd ,Securities,Client_master,Settlements";
                        }
                        else
                        {
                            strsql = strsql + " from Trx x With(index(idx_Trx_stlmnt_clientcd)) left outer join Bills on bl_companycode = td_companycode and bl_stlmnt = td_stlmnt and bl_clientcd = td_clientcd,Securities,Client_master,Settlements";
                        }

                        strsql = strsql + "  where se_stlmnt = td_stlmnt And td_scripcd = ss_cd And td_clientcd = cm_cd ";
                        strsql = strsql + " and td_companycode='" + HttpContext.Current.Session["CompanyCode"] + "'  and (td_rate > 0) " + strWhere + strClientWhere;
                        strsql = strsql + " and cm_type <> 'C'";
                    }
                    else
                    {
                        strsql = strsql + " select td_companycode," + Interaction.IIf(blnInterOP, "'" + StrStlmntNew.Trim() + "' td_stlmnt", "td_stlmnt") + ",td_dt,td_clientcd,cm_name,cm_groupcd,cm_familycd,cm_subbroker,cm_email,cm_type,cm_gainloss,cm_jobloss,td_scripcd,ss_name,  ";
                        strsql = strsql + " (td_bqty - td_sqty) tqty,td_rate,(td_bqty - td_sqty) dqty,  ";
                        strsql = strsql + "  Convert(money, (td_bqty - td_sqty) * td_rate)   'tvalue',  ";
                        strsql = strsql + " convert(money,(td_bqty + td_sqty)*td_brokerage) brokerage, convert(money,(td_bqty + td_sqty)* td_mainbrrate) turnover,  ";
                        strsql = strsql + " case td_cfflag when 'Y' then 'B' else 'T' end td_cfflag ,isnull(bl_billno,0) bl_billno,isnull(bl_billdt,'') bl_billdt,'' ledgercd,td_tradeid,td_subtradeid,  ";
                        strsql = strsql + " 1 rectype,1  sortlist,'N'  sr_nodelyn,";
                        strsql = strsql + " 'C' clientrec,se_stdt,se_endt,cm_billflag,cm_add1,cm_add2,cm_add3,isnull(td_ordertime,'') td_ordertime,  ";
                        strsql = strsql + " td_orderid, td_time, td_marketrate, td_mainbrrate, td_brokerage, td_mainbrbrokerage, ss_closedt, cm_contractflag, cm_add4, cm_pincode, td_brokeragetype, td_turnovertax, cm_brboffcode, cm_sebino, se_shpayindt, se_shpayoutdt, ss_lname, cm_cd";
                        if (strDistProcess == "Y")
                        {
                            strsql = strsql + " from TrxDaily x With(index(idx_TrxDaily_stlmnt_clientcd)) left outer join Bills on bl_companycode = td_companycode and bl_stlmnt = td_stlmnt and bl_clientcd = td_clientcd,Securities,Client_master,Settlements";
                        }
                        else
                        {
                            strsql = strsql + " from Trx x With(index(idx_Trx_stlmnt_clientcd)) left outer join Bills on bl_companycode = td_companycode and bl_stlmnt = td_stlmnt and bl_clientcd = td_clientcd,Securities,Client_master,Settlements";
                        }

                        strsql = strsql + " where td_stlmnt = se_stlmnt " + Interaction.IIf(blnInterOP, "", "and se_exchange = 'B'") + "  and td_scripcd = ss_cd and td_clientcd = cm_cd   ";
                        strsql = strsql + " and td_companycode='" + HttpContext.Current.Session["CompanyCode"] + "'  and (td_rate > 0) " + strWhere + strClientWhere;
                        strsql = strsql + " union all";
                        strsql = strsql + " select td_companycode," + Interaction.IIf(blnInterOP, "'" + StrStlmntNew.Trim() + "' td_stlmnt", "td_stlmnt") + ",'',td_clientcd,cm_name,cm_groupcd,cm_familycd,cm_subbroker,cm_email,cm_type,cm_gainloss,cm_jobloss,td_scripcd,ss_name,  ";
                        strsql = strsql + " sum(td_sqty - td_bqty) tqty,isnull(sr_makingrate ,0.0000),0 dqty,  ";
                        strsql = strsql + " Convert(money, sum((td_sqty - td_bqty) * isnull(sr_makingrate, 0.0)))  'tvalue',  ";
                        strsql = strsql + " convert(money,0.0000) brokerage, convert(money,0.0000) turnover,  ";
                        strsql = strsql + " 'Z' td_cfflag, 0 bl_billno,'' bl_billdt,'' ledgercd, 0,0,  ";
                        strsql = strsql + " 2 rectype,1 sortlist,isnull(sr_nodelyn, 'N') sr_nodelyn,'C' clientrec,se_stdt,se_endt,cm_billflag,cm_add1,cm_add2,cm_add3,'',  ";
                        strsql = strsql + " 0 td_orderid, '' td_time,td_marketrate,td_mainbrrate,td_brokerage,td_mainbrbrokerage,ss_closedt, cm_contractflag,cm_add4,cm_pincode,'SD1',convert(money,0.0000),cm_brboffcode,cm_sebino,se_shpayindt,se_shpayoutdt,ss_lname   ,cm_cd";
                        if (strDistProcess == "Y")
                        {
                            strsql = strsql + " from TrxDaily x With(index(idx_TrxDaily_stlmnt_clientcd)) ,Securities,Std_rates,Client_master,Bills,Settlements";
                        }
                        else
                        {
                            strsql = strsql + " from Trx x With(index(idx_Trx_stlmnt_clientcd)) ,Securities,Std_rates,Client_master,Bills,Settlements";
                        }

                        strsql = strsql + "  where(td_stlmnt = se_stlmnt And td_scripcd = ss_cd And td_clientcd = cm_cd)";
                        strsql = strsql + " and sr_stlmnt = td_stlmnt and sr_scripcd = td_scripcd  and sr_nodelyn = 'Y'  ";
                        strsql = strsql + " and cm_type <> 'C'  ";
                        strsql = strsql + " and td_companycode='" + HttpContext.Current.Session["CompanyCode"] + "'  and td_rate > 0  " + strWhere + strClientWhere;
                        strsql = strsql + " group by  td_companycode,td_stlmnt,se_stdt,se_endt,td_clientcd,cm_cd,cm_schedule,cm_name,cm_groupcd,cm_familycd,cm_subbroker,cm_email,cm_type,cm_gainloss,cm_jobloss,cm_billflag,cm_add1,cm_add2,cm_add3,td_scripcd,ss_name,sr_nodelyn,sr_makingrate,  ";
                        strsql = strsql + "  td_marketrate, td_mainbrrate, td_brokerage, td_mainbrbrokerage, ss_closedt, cm_contractflag, cm_add4, cm_pincode, cm_brboffcode, cm_sebino, se_shpayindt, se_shpayoutdt, ss_lname";
                        strsql = strsql + "  having(sum(td_sqty - td_bqty) <> 0)";
                    }
                }

                {
                    // //---------------------BuyBack--------------------------------------//'
                    strsql = strsql + " union all select td_companycode," + Interaction.IIf(blnInterOP, "'" + StrStlmntNew.Trim() + "' td_stlmnt", "td_stlmnt") + ",td_dt,td_clientcd,cm_name,cm_groupcd,cm_familycd,cm_subbroker,cm_email,cm_type,cm_gainloss,cm_jobloss,td_scripcd,ss_name,";
                    strsql = strsql + " (td_sqty - td_bqty) tqty,(case left(td_stlmnt,2) when 'BC' then td_rate else td_mainbrrate end ) td_rate,(td_sqty - td_bqty) dqty,";
                    strsql = strsql + " Convert(money, (td_sqty - td_bqty) * (case left(td_stlmnt,2) when 'BC' then td_rate else td_mainbrrate end ))  'tvalue',";
                    strsql = strsql + " convert(money,(td_sqty - td_bqty)*td_brokerage) brokerage, convert(money,(td_bqty + td_sqty)* (case left(td_stlmnt,2) when 'BC' then td_rate else td_mainbrrate end )) turnover,";
                    strsql = strsql + " case td_cfflag when 'Y' then 'B' else 'T' end td_cfflag,";
                    strsql = strsql + " isnull(bl_billno,0) bl_billno,isnull(bl_billdt,'') bl_billdt,'' ledgercd,td_tradeid,td_subtradeid,";
                    strsql = strsql + " 1 rectype,1 sortlist,'N' sr_nodelyn,'C' clientrec,se_stdt,se_endt,cm_billflag,cm_add1,cm_add2,cm_add3,isnull(td_ordertime,'') td_ordertime,";
                    strsql = strsql + " td_orderid, td_time, td_marketrate, td_mainbrrate, td_brokerage, td_mainbrbrokerage, ss_closedt, cm_contractflag, cm_add4, cm_pincode, td_brokeragetype, td_turnovertax, cm_brboffcode, cm_sebino, se_shpayindt, se_shpayoutdt, ss_lname, cm_cd";
                    if (strDistProcess == "Y")
                    {
                        strsql = strsql + " from TrxDaily x With(index(idx_TrxDaily_stlmnt_clientcd)) left outer join Bills on bl_companycode = td_companycode and bl_stlmnt = td_stlmnt and bl_clientcd = td_clientcd ,Securities,Client_master,Settlements";
                    }
                    else
                    {
                        strsql = strsql + " from Trx x With(index(idx_Trx_stlmnt_clientcd)) left outer join Bills on bl_companycode = td_companycode and bl_stlmnt = td_stlmnt and bl_clientcd = td_clientcd,Securities,Client_master,Settlements";
                    }

                    strsql = strsql + "  where se_stlmnt = td_stlmnt And td_scripcd = ss_cd And td_clientcd = cm_cd ";
                    strsql = strsql + " and td_companycode='" + HttpContext.Current.Session["CompanyCode"] + "'  and ((case left(td_stlmnt,2) when 'BC' then td_rate else td_mainbrrate end ) > 0)" + strWhere + strClientWhere;
                    strsql = strsql + " and cm_type <> 'C' and td_marginyn = 'B'";

                }

                {
                    // //---------------------BuyBack--------------------------------------//'

                    // --charges here  
                    strsql = strsql + " union all";
                    strsql = strsql + " select bc_companycode," + Interaction.IIf(blnInterOP, "'" + StrStlmntNew.Trim() + "' bc_stlmnt", "bc_stlmnt") + " ,'',bc_clientcd ,cm_name ,cm_groupcd,cm_familycd,cm_subbroker,cm_email,cm_type,0,0,cg_cd,cg_desc,";
                    strsql = strsql + " 0 tqty,convert(money,0.0000) as td_rate,0 dqty,";
                    strsql = strsql + " sum(bc_amount) tvalue ,";
                    strsql = strsql + " convert(money,0.0000) brokerage, convert(money,0.0000) turnover,";
                    strsql = strsql + " 'N',isnull(bl_billno,0) bl_billno,isnull(bl_billdt,'') bl_billdt,cg_ledgercd ledgercd,0,0,";
                    strsql = strsql + " 3 rectype,2 sortlist,'N' sr_nodelyn,'C' clientrec,se_stdt,se_endt,cm_billflag,cm_add1,cm_add2,cm_add3,'',";
                    strsql = strsql + " 0 as td_orderid,'' as td_time,0 as td_marketrate,0 as td_mainbrrate,0 as td_brokerage,0 as td_mainbrbrokerage, '' as ss_closedt, cm_contractflag,cm_add4,cm_pincode,'SD1' td_brokeragetype,convert(money,0.0000) td_turnovertax,cm_brboffcode,cm_sebino,se_shpayindt,se_shpayoutdt,cg_desc ,cm_cd";
                    strsql = strsql + " from CBilled_Charges left outer join Bills on bl_companycode = bc_companycode and bl_stlmnt = bc_stlmnt and bl_clientcd = bc_clientcd, Settlements, Client_master, Charges_master";
                    strsql = strsql + " where bc_companycode = cg_companycode And Left(bc_stlmnt, 1) = cg_exchange ";
                    strsql = strsql + " and bc_stlmnt = se_stlmnt and bc_clientcd = cm_cd and cm_cd <> 'C' ";
                    strsql = strsql + " and bc_chargecode = cg_cd and charindex(substring(bc_stlmnt,2,1),cg_on) > 0";
                    strsql = strsql + " ";
                    strsql = strsql + " and bl_companycode='" + HttpContext.Current.Session["CompanyCode"] + "'" + strWhere.Replace("td_", "bc_") + strClientWhere;
                    strsql = strsql + " group by bc_companycode,bc_stlmnt,se_stdt,se_endt,bc_clientcd,cm_name,cm_type,cm_groupcd,cm_familycd,cm_subbroker,cm_billflag,cm_email,cm_add1,cm_add2,cm_add3,cg_cd,cg_basis,cg_ledgercd,cg_desc,bl_billno,bl_billdt, cm_contractflag,cm_add4,cm_pincode,cm_brboffcode,cm_sebino,se_shpayindt,se_shpayoutdt,cm_cd";
                    // ----Special charges here  
                    strsql = strsql + " union all";
                    strsql = strsql + " select sh_companycode," + Interaction.IIf(blnInterOP, "'" + StrStlmntNew.Trim() + "' sh_stlmnt", "sh_stlmnt") + ",'',sh_clientcd ,cm_name ,cm_groupcd,cm_familycd,cm_subbroker,cm_email,cm_type,0,0,'' cd_cd,sh_desc,  ";
                    strsql = strsql + " 0 tqty,convert(money,0.0000) td_rate,0 dqty,";
                    strsql = strsql + " convert(money,sh_amount)  tvalue,  ";
                    strsql = strsql + " convert(money,0.0000)  brokerage, convert(money,0.0000) turnover,  ";
                    strsql = strsql + " 'N',isnull(bl_billno,0) bl_billno,isnull(bl_billdt,'') bl_billdt,sh_lclientcd,0,0,  ";
                    strsql = strsql + " 4 rectype,3 sortlist,'N' sr_nodelyn,case cm_type when 'C' then 'E' else 'C' end,se_stdt,se_endt,cm_billflag,cm_add1,cm_add2,cm_add3,'',  ";
                    strsql = strsql + " 0 as td_orderid,'' as  td_time,0 as td_marketrate,0 as td_mainbrrate,0 as td_brokerage,0 as td_mainbrbrokerage,'' as ss_closedt, cm_contractflag,cm_add4,cm_pincode,'SD1',convert(money,0.0000),cm_brboffcode,cm_sebino,se_shpayindt,se_shpayoutdt,sh_desc  ,cm_cd";
                    strsql = strsql + " from Specialcharges left outer join Bills on bl_companycode = sh_companycode and bl_stlmnt = sh_stlmnt and bl_clientcd = sh_clientcd, Client_master, Settlements ";
                    strsql = strsql + " where  sh_stlmnt = se_stlmnt and sh_clientcd = cm_cd ";
                    strsql = strsql + " and sh_companycode='" + HttpContext.Current.Session["CompanyCode"] + "'" + strWhere.Replace("td_", "sh_") + strClientWhere;
                    strsql = strsql + " union all";
                    strsql = strsql + " select sh_companycode," + Interaction.IIf(blnInterOP, "'" + StrStlmntNew.Trim() + "' sh_stlmnt", "sh_stlmnt") + ",'',sh_clientcd,cm_name ,cm_groupcd,cm_familycd,cm_subbroker,cm_email,cm_type,0,0,'01' cd_cd,'Service Tax',  ";
                    strsql = strsql + " 0 tqty,convert(money,0.0000) td_rate,0 dqty, round(convert(money,sum(sh_servicetax)),2)  tvalue,  ";
                    strsql = strsql + " convert(money,0.0000)  brokerage, convert(money,0.0000) turnover,  ";
                    strsql = strsql + " 'N',0 bl_billno,''bl_billdt,convert(char(8),isnull((select sp_sysvalue from Sysparameter where sp_parmcd = 'SERTACT'),'')),0,0,  ";
                    strsql = strsql + " 4 rectype,3 sortlist,'N' sr_nodelyn,case cm_type when 'C' then 'E' else 'C' end,se_stdt,se_endt,cm_billflag,cm_add1,cm_add2,cm_add3,'',  ";
                    strsql = strsql + " 0 as td_orderid,'' as  td_time,0 as td_marketrate,0 as td_mainbrrate,0 as td_brokerage,0 as td_mainbrbrokerage,'' as ss_closedt, cm_contractflag,cm_add4,cm_pincode,'SD1',convert(money,0.0000),cm_brboffcode,cm_sebino,se_shpayindt,se_shpayoutdt,'Service Tax'  ,cm_cd";
                    strsql = strsql + " from Specialcharges, Client_master, Settlements ";
                    strsql = strsql + " where sh_stlmnt = se_stlmnt And sh_clientcd = cm_cd And sh_servicetax <> 0 ";
                    strsql = strsql + " and sh_companycode='" + HttpContext.Current.Session["CompanyCode"] + "'" + strWhere.Replace("td_", "sh_") + strClientWhere;
                    strsql = strsql + " group by sh_companycode,sh_stlmnt,se_stdt,se_endt,sh_clientcd,cm_cd,cm_name,cm_groupcd,cm_familycd,cm_subbroker,cm_email,cm_type,cm_billflag,cm_add1,cm_add2,cm_add3, cm_contractflag,cm_add4,cm_pincode,cm_brboffcode,cm_sebino,se_shpayindt,se_shpayoutdt  ,cm_cd";
                    strsql = strsql + " having sum(sh_servicetax) <> 0";
                    //strsql = strsql + " union all";
                    //strsql = strsql + " select sh_companycode," + Interaction.IIf(blnInterOP, "'" + StrStlmntNew.Trim() + "' bc_stlmnt", "bc_stlmnt") + ",'',sh_clientcd ,cm_name ,cm_groupcd,cm_familycd,cm_subbroker,cm_email,cm_type,0,0,'' cd_cd,sh_desc,  ";
                    //strsql = strsql + " 0 tqty,convert(money,0.0000) td_rate,0 dqty,";
                    //strsql = strsql + " sum(convert(money,sh_amount))  tvalue,  ";
                    //strsql = strsql + " convert(money,0.0000)  brokerage, convert(money,0.0000) turnover,  ";
                    //strsql = strsql + " 'N',0,'','',0,0,  ";
                    //strsql = strsql + " 4 rectype,3 sortlist,'N' sr_nodelyn,case cm_type when 'C' then 'E' else 'C' end,se_stdt,se_endt,cm_billflag,cm_add1,cm_add2,cm_add3,'',  ";
                    //strsql = strsql + " 0 as td_orderid,'' as  td_time,0 as td_marketrate,0 as td_mainbrrate,0 as td_brokerage,0 as td_mainbrbrokerage,'' as ss_closedt, cm_contractflag,cm_add4,cm_pincode,'SD1',convert(money,0.0000),cm_brboffcode,cm_sebino,se_shpayindt,se_shpayoutdt,sh_desc  ,cm_cd";
                    //strsql = strsql + " from Specialcharges left outer join Bills on bl_companycode = sh_companycode and bl_stlmnt = " + Interaction.IIf(blnInterOP, "'" + StrStlmntNew.Trim() + "' ", "") + " and bl_clientcd = sh_clientcd, Client_master, Settlements ";
                    //strsql = strsql + " where  sh_stlmnt = se_stlmnt and sh_clientcd = cm_cd ";
                    //strsql = strsql + " and sh_companycode='" + HttpContext.Current.Session["CompanyCode"] + "'" + strWhere.Replace("td_", "sh_") + strClientWhere;
                    //strsql = strsql + "group by sh_companycode,sh_clientcd,cm_name,cm_groupcd,cm_familycd,cm_subbroker,cm_email,cm_type,sh_desc ,se_stdt,se_endt,cm_billflag,cm_add1,cm_add2,cm_add3,cm_contractflag,cm_add4,cm_pincode,cm_brboffcode";
                    //strsql = strsql + ",cm_sebino,se_shpayindt,se_shpayoutdt,sh_desc ,cm_cd";
                    //strsql = strsql + " union all";
                    //strsql = strsql + " select sh_companycode," + Interaction.IIf(blnInterOP, "'" + StrStlmntNew.Trim() + "' sh_stlmnt", "sh_stlmnt") + ",'',sh_clientcd,cm_name ,cm_groupcd,cm_familycd,cm_subbroker,cm_email,cm_type,0,0,'01' cd_cd,'Service Tax',  ";
                    //strsql = strsql + " 0 tqty,convert(money,0.0000) td_rate,0 dqty, round(convert(money,sum(sh_servicetax)),2)  tvalue,  ";
                    //strsql = strsql + " convert(money,0.0000)  brokerage, convert(money,0.0000) turnover,  ";
                    //strsql = strsql + " 'N',0 bl_billno,''bl_billdt,convert(char(8),isnull((select sp_sysvalue from Sysparameter where sp_parmcd = 'SERTACT'),'')),0,0,  ";
                    //strsql = strsql + " 4 rectype,3 sortlist,'N' sr_nodelyn,case cm_type when 'C' then 'E' else 'C' end,se_stdt,se_endt,cm_billflag,cm_add1,cm_add2,cm_add3,'',  ";
                    //strsql = strsql + " 0 as td_orderid,'' as  td_time,0 as td_marketrate,0 as td_mainbrrate,0 as td_brokerage,0 as td_mainbrbrokerage,'' as ss_closedt, cm_contractflag,cm_add4,cm_pincode,'SD1',convert(money,0.0000),cm_brboffcode,cm_sebino,se_shpayindt,se_shpayoutdt,'Service Tax'  ,cm_cd";
                    //strsql = strsql + " from Specialcharges, Client_master, Settlements ";
                    //strsql = strsql + " where sh_stlmnt = se_stlmnt And sh_clientcd = cm_cd And sh_servicetax <> 0 ";
                    //strsql = strsql + " and sh_companycode='" + HttpContext.Current.Session["CompanyCode"] + "'" + strWhere.Replace("td_", "sh_") + strClientWhere;
                    //strsql = strsql + " group by sh_companycode,sh_stlmnt,se_stdt,se_endt,sh_clientcd,cm_cd,cm_name,cm_groupcd,cm_familycd,cm_subbroker,cm_email,cm_type,cm_billflag,cm_add1,cm_add2,cm_add3, cm_contractflag,cm_add4,cm_pincode,cm_brboffcode,cm_sebino,se_shpayindt,se_shpayoutdt  ,cm_cd";
                    //strsql = strsql + " having sum(sh_servicetax) <> 0";
                    mylib.ExecSQL(strsql, curCon);

                }

                strsql = "update a set sr_nodelyn='Y' from #tmpDosBill a , std_rates b ";
                strsql = strsql + "where td_stlmnt=sr_stlmnt and td_scripcd=sr_scripcd  and b.sr_nodelyn='Y'";
                mylib.ExecSQL(strsql, curCon);

                //HttpContext.Current.Session["dblFinal"] = mylib.mfnRoundoffCashbill("10105", "01/08/2021", 0.0, "C", "A");


                strsql = "Select cm_cd, cm_name, cm_add1, cm_add2, cm_add3, cm_panno, cm_add4, cm_pincode From Client_Master ";
                strsql += " Where cm_cd = '" + Code + "'";
                DataTable dtclient = mylib.OpenDataTable(strsql, curCon);
                ClientMasterBillModel cmbill = new ClientMasterBillModel
                {
                    Code = Code,
                    Name = dtclient.Rows[0]["cm_name"].ToString().Trim(),
                    Add1 = dtclient.Rows[0]["cm_add1"].ToString().Trim(),
                    Add2 = dtclient.Rows[0]["cm_add2"].ToString().Trim(),
                    Add3 = dtclient.Rows[0]["cm_add3"].ToString().Trim(),
                    City = dtclient.Rows[0]["cm_add4"].ToString().Trim(),
                    PAN = dtclient.Rows[0]["cm_panno"].ToString().Trim(),
                    Pincode = dtclient.Rows[0]["cm_pincode"].ToString().Trim(),
                    Settlement = strstlmnt.Trim(),
                    BillFrom = strDate,
                    BillTo = strDate
                };

                //strsql = "select recType, sr_nodelyn, tqty , tvalue, td_rate, convert(varchar(10), convert(date, td_dt), 103) td_dt , td_scripcd, ss_name from #tmpDosBill";
                //strsql += " order by td_stlmnt, ";
                //if (strOrderBy == "Branch")
                //{
                //    strsql += " cm_brboffcode,";
                //}
                //else if (strOrderBy == "Family")
                //{
                //    strsql += " cm_familycd,";
                //}
                //else if (strOrderBy == "Group")
                //{
                //    strsql += " cm_groupcd,";
                //}
                //strsql += " replicate(' ',8-len(ltrim(rtrim(td_clientcd)))) + ltrim(rtrim(td_clientcd)) , ";
                //strsql += " recType, Case Rtrim(td_scripcd) When '01' then 1 else 0 end  ,sortlist , ss_Name    ";
                strsql = "select * from #tmpDosBill order by td_stlmnt, replicate(' ',8-len(ltrim(rtrim(td_clientcd)))) + ltrim(rtrim(td_clientcd)) , sortlist , ss_Name ";

                DataTable dtBill = mylib.OpenDataTable(strsql, curCon);
                ulist = dtBill.AsEnumerable()
                .Select(row => new BillPrintModel
                {
                    GetClientDetail = cmbill,
                    Rectype = row.Field<int>("recType"),
                    Nodel = row.Field<string>("sr_nodelyn"),
                    Qty = row.Field<decimal>("tqty"),
                    Value = row.Field<decimal>("tvalue"),
                    Rate = row.Field<decimal>("td_rate"),
                    Date = row.Field<string>("td_dt"),
                    ScripCd = row.Field<string>("td_scripcd"),
                    ScripName = row.Field<string>("ss_name")
                }).ToList();
            }


            return ulist;
        }
        public IEnumerable<BillPrintModel> GetBillPrint(string strstlmnt, string strOrderBy, string Code, string strSelect, string strDate)
        {
            LibraryModel mylib = new LibraryModel(true);
            UtilityModel myutil = new UtilityModel();

            string strTblName = "#TmpBl" + myutil.gstrUserCd();

            List<BillPrintModel> ulist = new List<BillPrintModel>();
            try
            {
                using (SqlConnection curCon = new SqlConnection(connectionstring))
                {
                    curCon.Open();
                    try
                    {
                        mylib.ExecSQL("drop table " + strTblName, curCon);
                    }
                    catch (Exception)
                    {

                    }
                    finally
                    {
                        strSQL = " create table " + strTblName + " (" + myutil.newline() +
                                " [cs_billflag] [varchar] (1) NULL ," + myutil.newline() +
                                " [cs_billchanged] [varchar] (1) NULL ," + myutil.newline() +
                                " [td_stlmnt] [char] (9) NULL ," + myutil.newline() +
                                " [td_tradeid] [numeric](18, 0) NULL ," + myutil.newline() +
                                " [td_subtradeid] [numeric](18, 0) NULL ," + myutil.newline() +
                                " [zero] [int] NULL ," + myutil.newline() +
                                " [se_stdt] [char] (8) NULL ," + myutil.newline() +
                                " [se_endt] [char] (8) NULL ," + myutil.newline() +
                                " [bl_billdt] [char] (8) NULL ," + myutil.newline() +
                                " [bl_billno] [numeric](18, 0) NULL ," + myutil.newline() +
                                " [td_clientcd] [char] (8) NULL ," + myutil.newline() +
                                " [cm_name] [char] (50) NULL ," + myutil.newline() +
                                " [cm_email] [varchar] (75) NULL ," + myutil.newline() +
                                " [cm_type] [char] (1) NULL ," + myutil.newline() +
                                " [cm_gainloss] [money] NULL ," + myutil.newline() +
                                " [cm_jobloss] [money] NULL ," + myutil.newline() +
                                " [cm_billflag] [char] (1) NULL ," + myutil.newline() +
                                " [td_scripcd] [char] (6) NULL ," + myutil.newline() +
                                " [ss_name] [char] (40) NULL ," + myutil.newline() +
                                " [tqty] [numeric](19, 0) NULL ," + myutil.newline() +
                                " [dqty] [numeric](19, 0) NULL ," + myutil.newline() +
                                " [td_rate] [money] NULL ," + myutil.newline() +
                                " [tvalue] [numeric](38, 6) NULL ," + myutil.newline() +
                                " [td_cfflag] [varchar] (1) NULL ," + myutil.newline() +
                                " [td_dt] [char] (8) NULL ," + myutil.newline() +
                                " [rectype] [int] NULL ," + myutil.newline() +
                                " [cm_groupcd] [char] (3) NULL ," + myutil.newline() +
                                " [cm_familycd] [char] (3) NULL ," + myutil.newline() +
                                " [cm_brboffcode] [char] (6) NULL ," + myutil.newline() +
                                " [sortlist] [int] NULL ," + myutil.newline() +
                                " [listorder] [int] NULL ," + myutil.newline() +
                                " [cm_add1] [varchar] (50) NULL ," + myutil.newline() +
                                " [cm_add2] [varchar] (50) NULL ," + myutil.newline() +
                                " [cm_add3] [varchar] (50) NULL ," + myutil.newline() +
                                " [cm_add4] [char] (50) NULL ," + myutil.newline() +
                                " [cm_pincode] [char] (10) NULL ," + myutil.newline() +
                                " [sr_nodelyn] [varchar] (1) NULL )" + myutil.newline();

                        mylib.ExecSQL(strSQL, curCon);

                        strSQL = "Create clustered Index idx_" + strTblName + "_clientcd_stlmnt " + myutil.newline() +
                                "on " + strTblName + "(td_clientcd,td_stlmnt,rectype)";
                        mylib.ExecSQL(strSQL, curCon);

                    }

                    string strClientWhere = "";
                    string strWhere = "";
                    string StrStlmntNew = "";
                    bool blnInterOP = false;

                    string StrMsg;
                    strDate = mylib.fnFireQuery("Settlements", "se_stdt", "se_stlmnt", strstlmnt, true, curCon);
                    StrMsg = mylib.fnCheckInterOperability(strDate, "C", curCon);

                    if (StrMsg.ToUpper().Trim() == "TRUE")
                    {
                        blnInterOP = true;
                    }

                    string[] arrStlmnt;

                    if (blnInterOP)
                    {
                        arrStlmnt = Strings.Split(mylib.fnGetInterOpStlmnts(Strings.Trim(strstlmnt), false, curCon), ",");
                        //arrStlmnt = strstlmnt.Trim().Split(',');

                        if (arrStlmnt.Length > 1)
                        {
                            strWhere += " and td_stlmnt in ('" + arrStlmnt[0] + "','" + arrStlmnt[1] + "')";
                        }
                        else
                        {
                            strWhere += " and td_stlmnt = '" + arrStlmnt[0] + "'";
                        }
                        StrStlmntNew = arrStlmnt[0];
                    }
                    else
                    {
                        strWhere += " and td_stlmnt='" + strstlmnt.Trim() + "' ";
                        StrStlmntNew = "";
                    }

                    //if (strSelect == "CL")
                    //{
                    //    strClientWhere += "and cm_cd = '" + Code.Trim() + "'";
                    //}
                    //else if (strSelect == "BR")
                    //{
                    //    strClientWhere += "and cm_brboffcode = '" + Code.Trim() + "'";
                    //}
                    //else if (strSelect == "FM")
                    //{
                    //    strClientWhere += " and cm_familycd = '" + Code.Trim() + "' ";
                    //}
                    //else if (strSelect == "GR")
                    //{
                    //    strClientWhere += " and cm_groupcd = '" + Code.Trim() + "' ";
                    //}
                    //else if (strSelect == "SB")
                    //{
                    //    strClientWhere += " and cm_subbroker = '" + Code.Trim() + "' ";
                    //}
                    strClientWhere += "and cm_cd = '" + Code.Trim() + "'";
                    strClientWhere += " and cm_type <>'C' ";
                    strSQL = "insert into " + strTblName + myutil.newline();
                    strSQL += " select 'Y' cs_billflag, 'N' cs_billchanged," + myutil.newline();
                    strSQL += (blnInterOP ? "'" + StrStlmntNew.Trim() + "' td_stlmnt" : "td_stlmnt") + " ,td_tradeid,td_subtradeid,0 zero,'' se_stdt," + myutil.newline();
                    strSQL += " '' se_endt,'' bl_billdt,'0' bl_billno,td_clientcd, cm_name, " + myutil.newline();
                    strSQL += " cm_email, cm_type, cm_gainloss, cm_jobloss, " + myutil.newline();
                    strSQL += " cm_billflag, td_scripcd, '' ss_name, (td_bqty - td_sqty) tqty," + myutil.newline();
                    strSQL += " (td_bqty - td_sqty) dqty, td_rate," + myutil.newline();
                    strSQL += " convert(money,(td_bqty - td_sqty )*td_rate) tvalue," + myutil.newline();
                    strSQL += " td_cfflag, td_dt, 1 rectype,  cm_groupcd,  cm_familycd, cm_brboffcode, 1 sortlist,1 listorder, " + myutil.newline();
                    strSQL += " cm_add1, cm_add2, cm_add3, cm_add4, cm_pincode, 'N' sr_nodelyn " + myutil.newline();
                    strSQL += " from Trx a, client_master  where td_companycode='" + HttpContext.Current.Session["CompanyCode"].ToString() + "' and td_clientcd=cm_cd and cm_type<>'C' " + myutil.newline();
                    strSQL += " and exists " + myutil.LoginAccess("td_clientcd");
                    strSQL += strWhere + strClientWhere + myutil.newline();
                    if (strOrderBy == "Client")
                    {
                        strSQL += " order by listorder ,td_clientcd ,td_cfflag, td_dt,td_tradeid,td_subtradeid " + myutil.newline();
                    }
                    else if (strOrderBy == "Branch")
                    {
                        strSQL += " order by cm_brboffcode,listorder ,td_clientcd ,td_cfflag, td_dt,td_tradeid,td_subtradeid " + myutil.newline();
                    }
                    else if (strOrderBy == "Family")
                    {
                        strSQL += " order by cm_familycd,listorder ,td_clientcd ,td_cfflag, td_dt,td_tradeid,td_subtradeid " + myutil.newline();
                    }
                    else if (strOrderBy == "Group")
                    {
                        strSQL += " order by cm_groupcd,listorder ,td_clientcd ,td_cfflag, td_dt,td_tradeid,td_subtradeid " + myutil.newline();
                    }

                    mylib.ExecSQL(strSQL, curCon);


                    //'//---------------------BuyBack--------------------------------------//'
                    strSQL = "insert into " + strTblName + myutil.newline();
                    strSQL += " select 'Y' cs_billflag, 'N' cs_billchanged," + myutil.newline();
                    strSQL += (blnInterOP ? "'" + StrStlmntNew.Trim() + "' td_stlmnt" : "td_stlmnt") + " ,td_tradeid,td_subtradeid,0 zero,'' se_stdt," + myutil.newline();
                    strSQL += " '' se_endt,'' bl_billdt,'0' bl_billno,td_clientcd, cm_name, " + myutil.newline();
                    strSQL += " cm_email, cm_type, cm_gainloss, cm_jobloss, " + myutil.newline();
                    strSQL += " cm_billflag, td_scripcd, '' ss_name, (td_sqty - td_bqty) tqty," + myutil.newline();
                    strSQL += " (td_sqty - td_bqty) dqty,(case left(td_stlmnt,2) when 'BC' then td_rate else td_mainbrrate end ) td_rate," + myutil.newline();
                    strSQL += " convert(money,(td_sqty - td_bqty)* (case left(td_stlmnt,2) when 'BC' then td_rate else td_mainbrrate end )) tvalue," + myutil.newline();
                    strSQL += " td_cfflag, td_dt, 1 rectype,  cm_groupcd,  cm_familycd, cm_brboffcode, 1 sortlist,1 listorder, " + myutil.newline();
                    strSQL += " cm_add1, cm_add2, cm_add3, cm_add4, cm_pincode, 'N' sr_nodelyn  " + myutil.newline();
                    strSQL += " from Trx a, client_master where td_companycode='" + HttpContext.Current.Session["CompanyCode"].ToString() + "' and td_clientcd=cm_cd and cm_type<>'C'and td_marginyn = 'B'" + myutil.newline();
                    strSQL += strWhere + strClientWhere + myutil.newline();
                    strSQL += " and exists " + myutil.LoginAccess("td_clientcd");
                    if (strOrderBy == "Client")
                    {
                        strSQL += " order by listorder ,td_clientcd ,td_cfflag, td_dt,td_tradeid,td_subtradeid ";
                    }
                    else if (strOrderBy == "Branch")
                    {
                        strSQL += " order by cm_brboffcode,listorder ,td_clientcd ,td_cfflag, td_dt,td_tradeid,td_subtradeid ";
                    }
                    else if (strOrderBy == "Family")
                    {
                        strSQL += " order by cm_familycd,listorder ,td_clientcd ,td_cfflag, td_dt,td_tradeid,td_subtradeid ";
                    }
                    else if (strOrderBy == "Group")
                    {
                        strSQL += " order by cm_groupcd,listorder ,td_clientcd ,td_cfflag, td_dt,td_tradeid,td_subtradeid ";
                    }
                    mylib.ExecSQL(strSQL, curCon);


                    strSQL = " update a set a.ss_name=b.ss_name from " + strTblName + " a, Securities b where td_scripcd=ss_cd";
                    mylib.ExecSQL(strSQL, curCon);

                    strSQL = " update a set sr_nodelyn='Y' from " + strTblName + " a , std_rates b ";
                    strSQL += " where td_stlmnt=sr_stlmnt and td_scripcd=sr_scripcd  and b.sr_nodelyn='Y'";
                    mylib.ExecSQL(strSQL, curCon);


                    strSQL = "insert into " + strTblName + myutil.newline();
                    strSQL += " select 'Y' cs_billflag, 'N' cs_billchanged, " + (blnInterOP ? "'" + StrStlmntNew.Trim() + "' td_stlmnt" : "bc_stlmnt td_stlmnt") + " , 0 td_tradeid," + myutil.newline();
                    strSQL += " 0 td_subtradeid,0 zero,'' se_stdt,  " + myutil.newline();
                    strSQL += " '' se_endt,'' bl_billdt,'0' bl_billno,bc_clientcd td_clientcd, cm_name,  cm_email, " + myutil.newline();
                    strSQL += " cm_type, cm_gainloss, cm_jobloss,  cm_billflag, bc_chargecode, cg_desc ss_name, 0 tqty,  " + myutil.newline();
                    strSQL += " 0 dqty, 0 , bc_amount tvalue, 'N' td_cfflag,  " + myutil.newline();
                    strSQL += " '' td_dt, 2 rectype,  cm_groupcd,  cm_familycd, cm_brboffcode, 2 sortlist,2 listorder,  cm_add1, cm_add2, cm_add3,  " + myutil.newline();
                    strSQL += " cm_add4, cm_pincode, '' sr_nodelyn" + myutil.newline();
                    strSQL += " from Cbilled_charges, client_master, Charges_master " + myutil.newline();
                    strSQL += " where bc_companycode='" + HttpContext.Current.Session["CompanyCode"].ToString() + "' and bc_clientcd=cm_cd and cm_type<>'C'" + myutil.newline();
                    strSQL += " and bc_companycode = cg_companycode " + myutil.newline();
                    strSQL += " and exists " + myutil.LoginAccess("bc_clientcd");
                    strSQL += strClientWhere + myutil.newline();
                    strSQL += " and cg_exchange = left(bc_stlmnt,1)" + myutil.newline();
                    strSQL += " and cg_cd = bc_chargecode " + myutil.newline();
                    strSQL += strWhere.Replace("td_", "bc_") + myutil.newline();
                    mylib.ExecSQL(strSQL, curCon);


                    strSQL = "insert into " + strTblName + myutil.newline() +
                            " select 'Y' cs_billflag, 'N' cs_billchanged, " + (blnInterOP ? "'" + StrStlmntNew.Trim() + "' td_stlmnt" : "sh_stlmnt td_stlmnt") + " , 0 td_tradeid," + myutil.newline() +
                            " 0 td_subtradeid,0 zero,'' se_stdt,  " + myutil.newline() +
                            " '' se_endt,'' bl_billdt,'0' bl_billno,sh_clientcd td_clientcd, cm_name,  cm_email, " + myutil.newline() +
                            " cm_type, cm_gainloss, cm_jobloss,  cm_billflag, sh_recordsource, sh_desc ss_name, 0 tqty,  " + myutil.newline() +
                            " 0 dqty, 0 , sh_amount tvalue, 'N' td_cfflag,  " + myutil.newline() +
                            " '' td_dt, 2 rectype,  cm_groupcd,  cm_familycd, cm_brboffcode, 2 sortlist,2 listorder,  cm_add1, cm_add2, cm_add3,  " + myutil.newline() +
                            " cm_add4, cm_pincode, '' sr_nodelyn" + myutil.newline() +
                            " from SpecialCharges, client_master " + myutil.newline() +
                            " where sh_companycode='" + HttpContext.Current.Session["CompanyCode"].ToString() + "' and sh_clientcd=cm_cd and cm_type<>'C'" + myutil.newline() +
                            " and exists " + myutil.LoginAccess("sh_clientcd") + myutil.newline() +
                            strWhere.Replace("td_", "sh_") + myutil.newline() +
                            strClientWhere;
                    mylib.ExecSQL(strSQL, curCon);


                    strSQL = "insert into " + strTblName + myutil.newline() +
                            " select 'Y' cs_billflag, 'N' cs_billchanged," + (blnInterOP ? "'" + StrStlmntNew.Trim() + "' td_stlmnt" : "sh_stlmnt td_stlmnt") + ", 0 td_tradeid," + myutil.newline() +
                            " 0 td_subtradeid,0 zero,'' se_stdt,  " + myutil.newline() +
                            " '' se_endt,'' bl_billdt,'0' bl_billno,sh_clientcd td_clientcd, cm_name,  cm_email, " + myutil.newline() +
                            " cm_type, cm_gainloss, cm_jobloss,  cm_billflag, '01', 'Service tax' ss_name, 0 tqty,  " + myutil.newline() +
                            " 0 dqty, 0 , sh_servicetax tvalue, 'N' td_cfflag,  " + myutil.newline() +
                            " '' td_dt, 2 rectype,  cm_groupcd,  cm_familycd, cm_brboffcode, 2 sortlist,2 listorder,  cm_add1, cm_add2, cm_add3,  " + myutil.newline() +
                            " cm_add4, cm_pincode, '' sr_nodelyn" + myutil.newline() +
                            " from SpecialCharges, client_master" + myutil.newline() +
                            " where sh_companycode='" + HttpContext.Current.Session["CompanyCode"].ToString() + "' and sh_clientcd=cm_cd and cm_type<>'C'" + myutil.newline() +
                            " and exists " + myutil.LoginAccess("sh_clientcd") + myutil.newline() +
                            strWhere.Replace("td_", "sh_") + myutil.newline() +
                            strClientWhere + myutil.newline() +
                            " and sh_servicetax > 0 ";
                    mylib.ExecSQL(strSQL, curCon);


                    strSQL = " update a set a.se_Endt=b.se_endt, se_stdt=b.se_stdt " + myutil.newline() +
                            " from " + strTblName + " a, settlements b " + myutil.newline() +
                            " where(td_stlmnt = se_stlmnt)";
                    mylib.ExecSQL(strSQL, curCon);


                    strSQL = " update a set a.bl_billdt=b.bl_billdt, a.bl_billno = b.bl_billno " + myutil.newline() +
                            " from " + strTblName + " a, Bills b " + myutil.newline() +
                            " Where td_stlmnt = b.bl_stlmnt and td_clientcd = b.bl_clientcd " + myutil.newline() +
                            " and b.bl_companycode = '" + HttpContext.Current.Session["CompanyCode"].ToString() + "'" + myutil.newline() +
                            " and b.bl_stlmnt = '" + strstlmnt.Trim() + "'";
                    mylib.ExecSQL(strSQL, curCon);

                    strSQL = "Select cm_cd, cm_name, cm_add1, cm_add2, cm_add3, cm_panno, cm_add4, cm_pincode From Client_Master ";
                    strSQL += " Where cm_cd = '" + Code + "'";
                    DataTable dtclient = mylib.OpenDataTable(strSQL, curCon);
                    ClientMasterBillModel cmbill = new ClientMasterBillModel
                    {
                        Code = Code,
                        Name = dtclient.Rows[0]["cm_name"].ToString().Trim(),
                        Add1 = dtclient.Rows[0]["cm_add1"].ToString().Trim(),
                        Add2 = dtclient.Rows[0]["cm_add2"].ToString().Trim(),
                        Add3 = dtclient.Rows[0]["cm_add3"].ToString().Trim(),
                        City = dtclient.Rows[0]["cm_add4"].ToString().Trim(),
                        PAN = dtclient.Rows[0]["cm_panno"].ToString().Trim(),
                        Pincode = dtclient.Rows[0]["cm_pincode"].ToString().Trim(),
                        Settlement = strstlmnt.Trim(),
                        BillFrom = strDate,
                        BillTo = strDate
                    };

                    strSQL = "select recType, sr_nodelyn, tqty , tvalue, td_rate, convert(varchar(10), convert(date, td_dt), 103) td_dt , td_scripcd, ss_name from " + strTblName;
                    strSQL += " order by td_stlmnt, ";
                    if (strOrderBy == "Branch")
                    {
                        strSQL += " cm_brboffcode,";
                    }
                    else if (strOrderBy == "Family")
                    {
                        strSQL += " cm_familycd,";
                    }
                    else if (strOrderBy == "Group")
                    {
                        strSQL += " cm_groupcd,";
                    }
                    strSQL += " replicate(' ',8-len(ltrim(rtrim(td_clientcd)))) + ltrim(rtrim(td_clientcd)) , ";
                    strSQL += " recType, Case Rtrim(td_scripcd) When '01' then 1 else 0 end  ,sortlist , ss_Name    ";

                    DataTable dtBill = mylib.OpenDataTable(strSQL, curCon);
                    ulist = dtBill.AsEnumerable()
                    .Select(row => new BillPrintModel
                    {
                        GetClientDetail = cmbill,
                        Rectype = row.Field<int>("recType"),
                        Nodel = row.Field<string>("sr_nodelyn"),
                        Qty = row.Field<decimal>("tqty"),
                        Value = row.Field<decimal>("tvalue"),
                        Rate = row.Field<decimal>("td_rate"),
                        Date = row.Field<string>("td_dt"),
                        ScripCd = row.Field<string>("td_scripcd"),
                        ScripName = row.Field<string>("ss_name")
                    }).ToList();
                }
            }
            catch (Exception ex)
            {
                string error = ex.Message;
            }

            return ulist;
        }

        public IEnumerable<FOBillprintModel> GetFOVbnetBillPrint(string Code, string strOrderBy, string strDate, string strexchange, string strSegment)
        {
            //strstlmnt = "BW2019006";
            //Code = "mg040";
            //strDate = "20190329";
            LibraryModel mylib = new LibraryModel(true);
            UtilityModel myutil = new UtilityModel();
            List<FOBillprintModel> ulist = new List<FOBillprintModel>();


            //string strTblName = "#TmpBl" + myutil.gstrUserCd();
            string Tempdates11 = "#Tempdates11";
            string billcharges = "#billcharges";
            string fobill = "#fobill";
            string sd1 = strDate;
            string strBillstDt;
            string strBillenDt;
            //string strexchange = "N";
            //string strSegment = "F";
            string strCondition = "";
            string strExchangeWhere = "";
            string strClient = Code;
            Boolean blnBrokerBill = false;
            Boolean blnWhere = false;
            //Boolean blnUseDll = false;
            Boolean blnRecMTM = false;
            Double dblReverse = 0.0;
            Boolean blnInterOP = false;
            string strMode = "";

            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {
                curCon.Open();
                try
                {
                    mylib.ExecSQL("drop table " + Tempdates11, curCon);
                    mylib.ExecSQL("drop table " + billcharges, curCon);
                    mylib.ExecSQL("drop table " + fobill, curCon);
                }
                catch (Exception)
                {

                }
                finally
                {
                    //------------------------------Start create Tempdates11 table------------------------------------

                    strSQL = " CREATE TABLE #Tempdates11 ([bd_dt] [char] (8) NOT NULL )";
                    mylib.ExecSQL(strSQL, curCon);

                    // strBillstDt = myutil.dtos(sd1);
                    //  strBillenDt = myutil.dtos(sd1);
                    strBillstDt = sd1;
                    strBillenDt = sd1;

                    strSQL = "select count(*) from Fholiday_master where hm_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                    strSQL = Convert.ToString(Convert.ToString(strSQL + " and hm_exchange = '") + strexchange + "' and hm_segment = '") + strSegment + "'";
                    strSQL = Convert.ToString(strSQL + " and hm_dt = '") + strBillstDt + "'";
                    DataTable dtbill = mylib.OpenDataTable(strSQL, curCon);

                    if (dtbill.Rows.Count >= 0)
                    {
                        strSQL = "insert into #Tempdates11 values('" + strBillstDt + "')";
                        mylib.ExecSQL(strSQL, curCon);
                    }


                    //------------------------------End create Tempdates11 table------------------------------------

                    //------------------------------Start create billcharges table------------------------------------

                    strSQL = "CREATE TABLE [dbo].[#billcharges] (";
                    strSQL = strSQL + "[bc_dt] [char] (8) NOT NULL,";
                    strSQL = strSQL + "[bc_clientcd] [char] (8) NOT NULL,";
                    strSQL = strSQL + "[bc_desc] [char] (40) NOT NULL,";
                    strSQL = strSQL + "[bc_amount] [money] NOT NULL,";
                    strSQL = strSQL + "[bc_billno] [numeric] NOT NULL,";
                    strSQL = strSQL + "[bc_Exchange] [char] (1) ";
                    strSQL = strSQL + ")";
                    mylib.ExecSQL(strSQL, curCon);

                    //------------------------------End create billcharges table------------------------------------

                    //------------------------------Start create fobill table------------------------------------
                    strSQL = "CREATE TABLE [dbo].[#fobill] (";
                    strSQL = strSQL + "[tx_controlflag] [numeric] NOT NULL ,";
                    strSQL = strSQL + "[tx_dt] [char] (8) NOT NULL ,";
                    strSQL = strSQL + "[tx_clientcd] [char] (8) NOT NULL ,";
                    strSQL = strSQL + "[tx_mainbrcd] [char] (8) NOT NULL ,";
                    strSQL = strSQL + "[tx_seriesid] [numeric]  NOT NULL ,";
                    strSQL = strSQL + "[tx_desc] char(45) NOT NULL,";
                    strSQL = strSQL + "[tx_bqty] [numeric]  NOT NULL ,";
                    strSQL = strSQL + "[tx_sqty] [numeric]  NOT NULL ,";
                    strSQL = strSQL + "[tx_rate] [money]  NOT NULL ,";
                    strSQL = strSQL + "[tx_mainbrrate] [money]  NOT NULL ,";
                    strSQL = strSQL + "[tx_marketrate] [money]  NOT NULL ,";
                    strSQL = strSQL + "[tx_servicetax] [money]  NOT NULL ,";
                    strSQL = strSQL + "[tx_closerate] [money]  NOT NULL ,";
                    strSQL = strSQL + "[tx_sortlist] [numeric] NOT NULL,";
                    strSQL = strSQL + "[tx_prodtype] [char] (2) NOT NULL,";
                    strSQL = strSQL + "[tx_value] [money] NOT NULL, ";
                    strSQL = strSQL + "[tx_brokerage] [money]   ,";
                    strSQL = strSQL + "[tx_tradeid] [char] (7) ,";
                    strSQL = strSQL + "[tx_subtradeid] [char] (7) ,";
                    strSQL = strSQL + "[tx_orderid] [char] (20) ,";
                    strSQL = strSQL + "[tx_time] [char] (8) ,";
                    strSQL = strSQL + "[tx_ordertime] [char] (8), ";
                    strSQL = strSQL + "[tx_Exchange] [char] (1) ";
                    strSQL = strSQL + ")";
                    mylib.ExecSQL(strSQL, curCon);

                }

                //------------------------------End create fobill table------------------------------------

                //------------------------------First Insert Start------------------------------------
                strExchangeWhere = " and td_Exchange = '" + strexchange + "'";

                if (!string.IsNullOrEmpty(strClient.Trim()) & !string.IsNullOrEmpty(strClient.Trim()))
                {
                    blnWhere = true;
                    strCondition = strCondition + " and cm_cd >= '" + strClient.Trim() + "' and cm_cd <='" + strClient.Trim() + "'";
                }
                else if (!string.IsNullOrEmpty(strClient.Trim()) & string.IsNullOrEmpty(strClient.Trim()))
                    strCondition = strCondition + " and cm_cd = '" + strClient.Trim() + "'";
                else if (string.IsNullOrEmpty(strClient.Trim()) & !string.IsNullOrEmpty(strClient.Trim()))
                    strCondition = strCondition + " and cm_cd = '" + strClient.Trim() + "'";

                strSQL = "insert into #fobill (tx_controlflag,tx_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,tx_desc,tx_bqty,tx_sqty,tx_rate,tx_mainbrrate,";
                strSQL = strSQL + "tx_marketrate,tx_servicetax,tx_closerate,tx_sortlist,tx_prodtype,tx_value,tx_Exchange) ";
                strSQL = strSQL + (" select 1 td_controlflag,'") + sd1 + "',td_clientcd,td_mainbrcd,";
                strSQL = strSQL + " td_seriesid,'',case sign(sum(td_bqty - td_sqty)) when 1 then abs(sum(td_bqty - td_sqty)) else 0 end  td_bqty,";
                strSQL = strSQL + " case sign(sum(td_bqty - td_sqty)) when 1 then 0 else abs(sum(td_bqty - td_sqty)) end td_sqty,";
                strSQL = strSQL + " 0.0000 td_rate,0.0000 td_mainbrrate,0.0000 td_mainbrrate,";
                strSQL = strSQL + " 0.0000 td_servicetax,0.0000 td_closeprice,";
                strSQL = strSQL + " case sm_prodtype when 'IF' then 1 when 'CF' then 1 when 'RF' then 2 when 'EF' then 2 when 'IO' then 5 else 6 end td_sortlist,";
                strSQL = strSQL + " sm_prodtype,0,td_exchange";
                strSQL = strSQL + " From Trades with(index(idx_trades_dt_clientcd)) , Series_master,Client_master ";
                strSQL = strSQL + " Where td_clientcd = cm_cd and td_exchange = sm_exchange and td_segment = sm_segment ";
                strSQL = strSQL + " ";
                strSQL = strSQL + "and td_seriesid = sm_seriesid";
                strSQL = strSQL + " and sm_expirydt >= '" + sd1 + "' and td_dt < '" + sd1 + "'";
                strSQL = strSQL + " and td_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' ";
                strSQL = strSQL + strExchangeWhere + "and td_segment = '" + strSegment + "' and sm_prodtype in('IF','EF','CF','RF')";
                if (string.IsNullOrEmpty(strClient.Trim()))
                    strSQL = strSQL + strCondition;
                else if (blnBrokerBill)
                    strSQL = strSQL + " and td_mainbrcd = '" + strClient.Trim() + "'";
                else
                    strSQL = Convert.ToString(strSQL) + strCondition;
                strSQL = strSQL + " group by td_clientcd,td_mainbrcd,td_seriesid,sm_prodtype,td_exchange";
                strSQL = strSQL + " having sum(td_bqty - td_sqty) <> 0";

                mylib.ExecSQL(strSQL, curCon);

                //------------------------------First Insert End------------------------------------

                //------------------------------Second Insert Start------------------------------------



                strSQL = "insert into #fobill (tx_controlflag,tx_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,tx_desc,tx_bqty,tx_sqty,";
                strSQL = strSQL + " tx_rate,tx_mainbrrate,tx_marketrate,tx_servicetax,tx_closerate,tx_sortlist,tx_prodtype,";
                strSQL = strSQL + " tx_value,tx_Exchange)";
                strSQL = strSQL + " select 2 td_controlflag,td_dt,td_clientcd,td_mainbrcd,";
                strSQL = strSQL + " td_seriesid,'',td_bqty,td_sqty,";
                strSQL = strSQL + " td_rate,td_mainbrrate,td_mainbrrate,";
                strSQL = strSQL + " td_servicetax,0.0000 td_closeprice,";
                strSQL = strSQL + " case sm_prodtype when 'IF' then 1 when 'CF' then 1 when 'RF' then 2 when 'EF' then 2 when 'IO' then 5 else 6 end td_sortlist,";
                strSQL = strSQL + " sm_prodtype,0,td_exchange";
                strSQL = strSQL + " From Trades with(index(idx_trades_dt_clientcd)) , Series_master,Client_master ";
                strSQL = strSQL + " Where td_clientcd = cm_cd and td_exchange = sm_exchange and td_segment = sm_segment " + " and td_seriesid = sm_seriesid";
                strSQL = strSQL + " and sm_expirydt >= '" + sd1 + "'";
                strSQL = strSQL + " and td_dt between '" + sd1 + "' and '" + sd1 + "'";
                strSQL = strSQL + " and td_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' " + strExchangeWhere + " and td_segment = '" + strSegment + "'";
                if (string.IsNullOrEmpty(strClient.Trim()))
                    strSQL = Convert.ToString(strSQL) + strCondition;
                else if (blnBrokerBill)
                    strSQL = strSQL + " and td_mainbrcd = '" + strClient.Trim() + "'";
                else
                    strSQL = Convert.ToString(strSQL) + strCondition;
                mylib.ExecSQL(strSQL, curCon);

                //------------------------------Second Insert End------------------------------------


                //------------------------------Third Insert Start------------------------------------

                strSQL = "insert into #fobill (tx_controlflag,tx_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,tx_desc,tx_bqty,tx_sqty,";
                strSQL = strSQL + " tx_rate,tx_mainbrrate,tx_marketrate,tx_servicetax,tx_closerate,tx_sortlist,tx_prodtype,";
                strSQL = strSQL + " tx_value,tx_Exchange)";  // above three lines added by rajesh till first bracket
                strSQL = strSQL + " select 9 tx_controlflag,bd_dt,tx_clientcd,tx_mainbrcd, tx_seriesid,'', ";
                strSQL = strSQL + " case sign(sum(tx_bqty - tx_sqty)) when 1 then abs(sum(tx_bqty - tx_sqty)) else 0 end  tx_bqty, ";
                strSQL = strSQL + " case sign(sum(tx_bqty - tx_sqty)) when 1 then 0 else abs(sum(tx_bqty - tx_sqty)) end tx_sqty, ";
                strSQL = strSQL + " 0.0000 tx_rate,0.0000 tx_mainbrrate,0.0000 tx_mainbrrate, 0.0000 tx_servicetax,0.0000 tx_closeprice, ";
                strSQL = strSQL + " case sm_prodtype when 'IF' then 1 when 'CF' then 1 when 'RF' then 2 when 'EF' then 2 when 'IO' then 5 else 6 end tx_sortlist,sm_prodtype,0,tx_Exchange ";
                strSQL = strSQL + " From #fobill  , #Tempdates11 , Series_master,Client_master ";
                strSQL = strSQL + " Where tx_clientcd = cm_cd " + strExchangeWhere.Replace("td_", "sm_") + " and sm_segment = '" + strSegment + "' And tx_seriesid = sm_seriesid ";
                strSQL = strSQL + " and sm_expirydt >= bd_dt and  tx_dt < bd_dt ";
                strSQL = strSQL + " and sm_prodtype in('IF','EF','CF','RF') ";
                strSQL = strSQL + " and tx_controlflag not in ( '9','3') ";
                strSQL = strSQL + " group by bd_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,sm_prodtype,tx_Exchange ";
                strSQL = strSQL + " Having Sum(tx_bqty - tx_sqty) <> 0 ";



                if (!blnRecMTM)
                {
                    strSQL = strSQL + " Union All ";
                    strSQL = strSQL + " select 3 tx_controlflag,bd_dt,tx_clientcd,tx_mainbrcd, tx_seriesid,'', ";
                    strSQL = strSQL + " case sign(sum(tx_bqty - tx_sqty)) when 1 then 0 else abs(sum(tx_bqty - tx_sqty)) end tx_bqty, ";
                    strSQL = strSQL + " case sign(sum(tx_bqty - tx_sqty)) when 1 then abs(sum(tx_bqty - tx_sqty)) else 0 end  tx_sqty, ";
                    strSQL = strSQL + " 0.0000 tx_rate,0.0000 tx_mainbrrate,0.0000 tx_mainbrrate, 0.0000 tx_servicetax,0.0000 tx_closeprice, ";
                    strSQL = strSQL + " case sm_prodtype when 'IF' then 1 when 'CF' then 2 when 'RF' then 2 when 'EF' then 2 when 'IO' then 5 else 6 end tx_sortlist, sm_prodtype,0,tx_Exchange ";
                    strSQL = strSQL + " From #fobill  , #Tempdates11 , Series_master,Client_master ";
                    strSQL = strSQL + " Where tx_clientcd = cm_cd " + strExchangeWhere.Replace("td_", "sm_") + " and sm_segment = '" + strSegment + "' And tx_seriesid = sm_seriesid ";
                    strSQL = strSQL + " and sm_expirydt >= bd_dt and  tx_dt <= bd_dt ";
                    strSQL = strSQL + " and sm_prodtype in('IF','EF','CF','RF') ";
                    strSQL = strSQL + " and tx_controlflag not in ( '9','3') ";
                    strSQL = strSQL + " group by bd_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,sm_prodtype,tx_Exchange ";
                    strSQL = strSQL + " Having Sum(tx_bqty - tx_sqty) <> 0 ";
                }

                mylib.ExecSQL(strSQL, curCon);

                //------------------------------Third Insert End------------------------------------





                //------------------------------Forth Update Start------------------------------------
                strSQL = " Update #fobill set tx_controlflag = '1' where tx_controlflag = '9' ";
                mylib.ExecSQL(strSQL, curCon);


                strSQL = "insert into #fobill (tx_controlflag,tx_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,tx_desc,tx_bqty,tx_sqty,";
                strSQL = strSQL + " tx_rate,tx_mainbrrate,tx_marketrate,tx_servicetax,tx_closerate,tx_sortlist,tx_prodtype,";
                strSQL = strSQL + " tx_value,tx_orderid,tx_time,tx_ordertime,tx_Exchange)"; // added by rajesh till first bracket
                strSQL = strSQL + " select case ex_eaflag when 'E' then 5 else 6 end td_controlflag,ex_dt,ex_clientcd,ex_mainbrcd,";
                //if (strFOCNTBILLformat == "1")
                //    strsql = strsql + " ex_seriesid,'',ex_eqty,ex_aqty,";
                //else
                // by gopan on 2004/05/31 as Contract printing/Bill printing of Inventure/Emkay is diff
                strSQL = strSQL + " ex_seriesid,'',ex_aqty,ex_eqty,";
                // strsql = strsql & " ex_seriesid,'',ex_eqty,ex_aqty,"
                strSQL = strSQL + " ex_diffbrokrate,ex_mainbrdiffrate,ex_mainbrdiffrate,";
                strSQL = strSQL + " ex_servicetax,ex_settlerate,";
                strSQL = strSQL + " case sm_prodtype when 'IF' then 1 when 'CF' then 1 when 'RF' then 2 when 'EF' then 2 when 'IO' then 5 else 6 end + 3 td_sortlist,";
                strSQL = strSQL + " sm_prodtype,0,";
                strSQL = strSQL + " '' as td_orderid,'' as td_time, '' as td_ordertime,ex_exchange ";
                strSQL = strSQL + " From Exercise, Series_master,Client_master";
                strSQL = strSQL + " Where ex_clientcd = cm_cd and ex_exchange = sm_exchange and ex_segment = sm_segment And ex_seriesid = sm_seriesid"; // 'session("LoginAccess")
                strSQL = strSQL + " and sm_expirydt >= '" + sd1 + "'";
                strSQL = strSQL + " and ex_dt between '" + sd1 + "' and '" + sd1 + "'";
                strSQL = strSQL + " and ex_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' " + strExchangeWhere.Replace("td_", "ex_") + " and ex_segment = '" + strSegment + "'";
                if (string.IsNullOrEmpty(strClient.Trim()))
                {
                    dblReverse = -1;
                    strSQL = Convert.ToString(strSQL) + strCondition;
                }

                else if (blnBrokerBill)
                {
                    dblReverse = 1;
                    strSQL = strSQL + " and td_mainbrcd = '" + strClient.Trim() + "'";
                }
                else
                    dblReverse = -1;
                strSQL = Convert.ToString(strSQL) + strCondition;

                mylib.ExecSQL(strSQL, curCon);
                //------------------------------Forth Update End------------------------------------


                //------------------------------Fifth Insert Start------------------------------------

                if (blnBrokerBill)
                {
                    strSQL = "update #fobill set tx_value = -1";
                    mylib.ExecSQL(strSQL, curCon);

                    strSQL = "insert into #fobill select tx_controlflag,tx_dt,tx_mainbrcd,tx_mainbrcd,";
                    strSQL = strSQL + " tx_seriesid,'',tx_sqty,tx_bqty,case tx_controlflag when 1 then tx_rate else tx_mainbrrate end,tx_mainbrrate,";
                    strSQL = strSQL + " tx_marketrate,0 tx_servicetax,tx_closerate,tx_sortlist,";
                    strSQL = strSQL + " tx_prodtype, 0,tx_Exchange from #fobill";
                    mylib.ExecSQL(strSQL, curCon);

                    strSQL = "delete from #fobill where tx_value = -1";
                    mylib.ExecSQL(strSQL, curCon);
                }
                else
                {
                    // Service tax here
                    strSQL = "insert into #billcharges select tx_dt,tx_clientcd,'SERVICE TAX',round(sum(tx_servicetax),2),0,tx_Exchange from #fobill,#Tempdates11,Client_master";
                    strSQL = strSQL + " where tx_clientcd = cm_cd and tx_dt = bd_dt";
                    strSQL = strSQL + strCondition;
                    strSQL = strSQL + " group by tx_dt,tx_clientcd,tx_Exchange having sum(tx_servicetax) > 0";
                    mylib.ExecSQL(strSQL, curCon);
                }


                strSQL = "update #fobill set tx_closerate = ms_lastprice from #fobill,Market_summary";
                strSQL = strSQL + " where ms_seriesid = tx_seriesid and tx_controlflag in('1','2')";
                strSQL = strSQL + " and ms_exchange = tx_Exchange and ms_segment = '" + strSegment + "'";
                strSQL = strSQL + " and ms_dt = tx_dt";
                mylib.ExecSQL(strSQL, curCon);

                strSQL = "update #fobill set tx_rate = ms_prcloseprice from #fobill,Market_summary";
                strSQL = strSQL + " where ms_seriesid = tx_seriesid and tx_controlflag = 1";
                strSQL = strSQL + " and ms_exchange = tx_Exchange and ms_segment = '" + strSegment + "'";
                strSQL = strSQL + " and ms_dt = tx_dt";
                mylib.ExecSQL(strSQL, curCon);

                if (blnRecMTM == false)
                {
                    strSQL = "update #fobill set tx_rate = ms_lastprice from #fobill,Market_summary";
                    strSQL = strSQL + " where ms_seriesid = tx_seriesid and tx_controlflag = 3";
                    strSQL = strSQL + " and ms_exchange = tx_Exchange and ms_segment = '" + strSegment + "'";
                    strSQL = strSQL + " and ms_dt = tx_dt";
                    mylib.ExecSQL(strSQL, curCon);
                }


                strSQL = "insert into #billcharges select fc_dt,fc_clientcd,fc_desc,round(sum(fc_amount),2),0,fc_Exchange from Fspecialcharges,#Tempdates11,Client_master";
                strSQL = strSQL + " where fc_clientcd = cm_cd and fc_dt = bd_dt";
                strSQL = strSQL + strCondition;
                if (strCondition == "")
                    strSQL = strSQL + " and fc_clientcd not in(select distinct tx_mainbrcd from #fobill)";
                strSQL = strSQL + " and fc_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                strSQL = strSQL + strExchangeWhere.Replace("td_", "fc_") + " and fc_segment = '" + strSegment + "'";
                strSQL = strSQL + " group by fc_dt,fc_clientcd,fc_desc,fc_Exchange having round(sum(fc_amount),2) <> 0";
                mylib.ExecSQL(strSQL, curCon);

                strSQL = "insert into #billcharges select fc_dt,fc_clientcd,'SERVICE TAX',round(sum(fc_servicetax),2),0,fc_Exchange from Fspecialcharges,#Tempdates11,Client_master";
                strSQL = strSQL + " where fc_clientcd = cm_cd and fc_dt = bd_dt";
                strSQL = strSQL + strCondition;
                if (strCondition == "")
                    strSQL = strSQL + " and fc_clientcd not in(select distinct tx_mainbrcd from #fobill)";
                strSQL = strSQL + " and fc_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                strSQL = strSQL + strExchangeWhere.Replace("td_", "fc_") + " and fc_segment = '" + strSegment + "'";
                strSQL = strSQL + " group by fc_dt,fc_clientcd,fc_desc,fc_Exchange having round(sum(fc_servicetax),2) <> 0";
                mylib.ExecSQL(strSQL, curCon);



                if (blnRecMTM == false)
                {
                    strSQL = "update #fobill set tx_value = round(((case tx_controlflag when 5  then (tx_bqty + tx_sqty)*" + dblReverse + " when 6 then (tx_bqty + tx_sqty)*" + dblReverse + " else (tx_bqty - tx_sqty) end) *tx_rate)*sm_multiplier,4)";
                    strSQL = strSQL + " From series_master ";
                    strSQL = strSQL + " Where sm_exchange = tx_Exchange and sm_segment = '" + strSegment + "' and tx_seriesid = sm_seriesid ";
                    mylib.ExecSQL(strSQL, curCon);
                }
                else
                {
                    strSQL = "update #fobill set tx_value = round((((tx_bqty - tx_sqty)*tx_rate) - ((tx_bqty - tx_sqty)*tx_closerate))*sm_multiplier,4)";
                    strSQL = strSQL + " From series_master ";
                    strSQL = strSQL + " where sm_exchange = tx_Exchange and sm_segment = '" + strSegment + "' and tx_seriesid = sm_seriesid ";
                    strSQL = strSQL + " and tx_prodtype in('IF','EF','CF','RF')";
                    // strsql = strsql & " where tx_prodtype in('IF','EF')"
                    mylib.ExecSQL(strSQL, curCon);

                    strSQL = "update #fobill set tx_value = round(((case tx_controlflag when 5  then (tx_bqty + tx_sqty)*" + dblReverse + " when 6 then (tx_bqty + tx_sqty)*" + dblReverse + " else (tx_bqty - tx_sqty) end) *tx_rate)*sm_multiplier,4)";
                    strSQL = strSQL + " From series_master ";
                    strSQL = strSQL + " where sm_exchange = tx_Exchange and sm_segment = '" + strSegment + "' and tx_seriesid = sm_seriesid ";
                    strSQL = strSQL + " and tx_prodtype not in('IF','EF','CF','RF')";
                    // strsql = strsql & " where tx_prodtype not in('IF','EF')"

                    mylib.ExecSQL(strSQL, curCon);
                }



                //------------------------------Fifth Insert End------------------------------------

                //------------------------------Six Insert Start------------------------------------

                strSQL = "insert into #fobill(tx_controlflag,tx_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,tx_desc,tx_bqty,tx_sqty,tx_rate,tx_mainbrrate,";
                strSQL = strSQL + " tx_marketrate,tx_servicetax,tx_closerate,tx_sortlist,tx_prodtype,tx_value,tx_Exchange)";
                strSQL = strSQL + " select 10 ,bc_dt,bc_clientcd,bc_clientcd,";
                strSQL = strSQL + " 1,upper(bc_desc),0 td_bqty,0 td_sqty,";
                strSQL = strSQL + " 0,0 td_mainbrrate,0 td_mainbrrate,";
                strSQL = strSQL + " 0 td_servicetax,0.0000 td_closeprice,";
                strSQL = strSQL + " 10 td_sortlist,";
                strSQL = strSQL + " 'XX',round(sum(bc_amount),2),bc_Exchange";
                strSQL = strSQL + " From #billcharges group by bc_dt,bc_clientcd,bc_desc,bc_Exchange";

                mylib.ExecSQL(strSQL, curCon);
                // '''Changed
                strSQL = "insert into #fobill(tx_controlflag,tx_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,tx_desc,tx_bqty,tx_sqty,tx_rate,tx_mainbrrate,";
                strSQL = strSQL + " tx_marketrate,tx_servicetax,tx_closerate,tx_sortlist,tx_prodtype,tx_value,tx_Exchange)";
                strSQL = strSQL + " select 90 ,fb_billdt,fb_clientcd,fb_clientcd,";
                strSQL = strSQL + " 1,'[PREV. DAY MRGN.]',0 td_bqty,0 td_sqty,";
                strSQL = strSQL + " 0,0 td_mainbrrate,0 td_mainbrrate,";
                strSQL = strSQL + " 0 td_servicetax,0.0000 td_closeprice,";
                strSQL = strSQL + " 90 td_sortlist,";
                strSQL = strSQL + " 'XX',round(Case when fb_postmrgyn = 'Y' then fb_margin1 else 0 end + CAse When fb_postExpmrgyn = 'Y' then fb_Expmargin1 else 0 end ,2),fb_exchange";
                strSQL = strSQL + " From #Tempdates11,Fbills,Client_master";
                strSQL = strSQL + " where fb_clientcd = cm_cd and fb_billdt = bd_dt";
                strSQL = strSQL + " and fb_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                strSQL = strSQL + " and fb_exchange = '" + strexchange + "' and fb_segment = '" + strSegment + "'";
                strSQL = strSQL + " and round(Case when fb_postmrgyn = 'Y' then fb_margin1 else 0 end + CAse When fb_postExpmrgyn = 'Y' then fb_Expmargin1 else 0 end ,2) <> 0";
                strSQL = strSQL + strCondition;
                // '''till here
                mylib.ExecSQL(strSQL, curCon);
                // '''Changed
                strSQL = "insert into #fobill (tx_controlflag,tx_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,tx_desc,tx_bqty,tx_sqty,tx_rate,tx_mainbrrate,"; // changed
                strSQL = strSQL + " tx_marketrate,tx_servicetax,tx_closerate,tx_sortlist,tx_prodtype,tx_value,tx_Exchange)";
                strSQL = strSQL + " select 91 ,fb_billdt,fb_clientcd,fb_clientcd,";
                strSQL = strSQL + " 1,'[CURR. DAY MRGN.]',0 td_bqty,0 td_sqty,";
                strSQL = strSQL + " 0,0 td_mainbrrate,0 td_mainbrrate,";
                strSQL = strSQL + " 0 td_servicetax,0.0000 td_closeprice,";
                strSQL = strSQL + " 91 td_sortlist,";
                strSQL = strSQL + " 'XX',round(Case When fb_postmrgyn = 'Y' then fb_margin2 else 0 end + Case When fb_postExpmrgyn = 'Y' then fb_Expmargin2 else 0 end,2),fb_exchange";
                strSQL = strSQL + " From #Tempdates11,Fbills,Client_master";
                strSQL = strSQL + " where fb_clientcd = cm_cd and fb_billdt = bd_dt";
                strSQL = strSQL + " and fb_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                strSQL = strSQL + " and fb_exchange = '" + strexchange + "' and fb_segment = '" + strSegment + "'";
                strSQL = strSQL + " and round(Case When fb_postmrgyn = 'Y' then fb_margin2 else 0 end + Case When fb_postExpmrgyn = 'Y' then fb_Expmargin2 else 0 end,2) <> 0";
                strSQL = strSQL + strCondition;
                // '''Till here
                mylib.ExecSQL(strSQL, curCon);

                strSQL = "alter table #fobill add tx_billno numeric default(0) NOT NULL";

                mylib.ExecSQL(strSQL, curCon);

                strSQL = "update #fobill set tx_billno = fb_billno from #fobill,Fbills where fb_clientcd = tx_clientcd ";
                strSQL = strSQL + " and fb_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                strSQL = strSQL + (blnInterOP ? "" : "and fb_exchange = '" + strexchange + "'");
                strSQL = strSQL + " and fb_segment = '" + strSegment + "'";
                strSQL = strSQL + " and fb_billdt = tx_dt ";

                mylib.ExecSQL(strSQL, curCon);


                //------------------------------Six Insert End------------------------------------




                //--------------------------------Start Select Data from temptable---------------------------






                if (sd1 != "" & sd1 != "")
                {
                    strDate = " between '" + myutil.DbToDate(sd1) + "' ";
                    strDate = strDate + " and '" + myutil.DbToDate(sd1) + "'";
                }
                strSQL = "select tx_sortlist,tx_dt,tx_billno,tx_controlflag,tx_clientcd,";
                strSQL = strSQL + " tx_seriesid,tx_desc,";
                strSQL = strSQL + " tx_bqty,tx_sqty,tx_rate,tx_closerate,tx_value,tx_brokerage,";
                strSQL = strSQL + " sm_sname,sm_desc,sm_productcd,sm_symbol,sm_expirydt,sm_strikeprice,";
                strSQL = strSQL + " sm_callput,sm_optionstyle,cm_name,cm_add1,cm_add2,cm_add3,cm_tele1,";
                strSQL = strSQL + " cm_tele2,cm_email, cm_sebino, cm_panno, cm_add4, cm_pincode, sm_prodtype,cm_familycd,cm_brboffcode , cm_subbroker ";
                strSQL = strSQL + " from #fobill,Series_master,Client_master";
                strSQL = strSQL + " where tx_clientcd = cm_cd and tx_seriesid = sm_seriesid ";
                //strSQL = strSQL + "and exists " + myutil.LoginAccess("tx_clientcd");
                strSQL = strSQL + " and sm_exchange = tx_Exchange and sm_segment = '" + strSegment + "'";
                strSQL = strSQL + " and tx_controlflag < 10 ";
                if (blnWhere == false)
                {
                    if (strMode != "E")
                        // If chkBranchClients.Checked Then
                        // strsql = strsql & " and  (cm_billflag = 'A')"
                        // Else
                        // If cmbFormat.SelectedItem.Value = "B" Then
                        strSQL = strSQL + " and  (cm_billflag = 'Y' or cm_billflag = 'B' or cm_billflag = 'A')";
                }

                strSQL = strSQL + " union all";
                strSQL += " select tx_sortlist,tx_dt,tx_billno,tx_controlflag,tx_clientcd,";
                strSQL += " tx_seriesid,tx_desc,";
                strSQL += " tx_bqty,tx_sqty,tx_rate,tx_closerate,tx_value,tx_brokerage,";
                strSQL += " '' sm_sname,'' sm_desc,'' sm_productcd,'' sm_symbol,'' sm_expirydt,";
                strSQL += " 0 sm_strikeprice,";
                strSQL += " 'X' sm_callput,'X' sm_optionstyle,";
                strSQL += " cm_name,cm_add1,cm_add2,cm_add3,cm_tele1,cm_tele2,cm_email, cm_sebino, cm_panno,cm_add4, cm_pincode,'EF' as sm_prodtype,cm_familycd,cm_brboffcode , cm_subbroker ";
                strSQL += " from #fobill,Client_master";
                strSQL += " where tx_clientcd = cm_cd ";
                //strSQL += " and exists " + myutil.LoginAccess("tx_clientcd");
                strSQL += " and tx_controlflag >= 10";
                if (blnWhere == false)
                    // If chkBranchClients.Checked Then
                    // strsql = strsql & " and  (cm_billflag = 'A')"
                    // Else
                    // If cmbFormat.SelectedItem.Value = "B" Then
                    strSQL = strSQL + " and  (cm_billflag = 'Y' or cm_billflag = 'B' or cm_billflag = 'A')";
                if (strMode == "E")
                    strSQL = strSQL + " and cm_email <> ''";
                strSQL = strSQL + " order by tx_clientcd,tx_dt,tx_sortlist,sm_symbol,tx_seriesid,tx_controlflag,tx_desc";
                DataTable dtFOBill = mylib.OpenDataTable(strSQL, curCon);



                //--------------------------------End Select Data from temptable---------------------------
                string strSQL1 = "Select cm_cd, cm_name, cm_add1, cm_add2, cm_add3, cm_panno, cm_add4, cm_pincode From Client_Master ";
                strSQL1 += " Where cm_cd = '" + Code + "'";
                DataTable dtclient = mylib.OpenDataTable(strSQL1, curCon);
                ClientMasterBillModel cmbill = new ClientMasterBillModel
                {
                    Code = Code,
                    Name = dtclient.Rows[0]["cm_name"].ToString().Trim(),
                    Add1 = dtclient.Rows[0]["cm_add1"].ToString().Trim(),
                    Add2 = dtclient.Rows[0]["cm_add2"].ToString().Trim(),
                    Add3 = dtclient.Rows[0]["cm_add3"].ToString().Trim(),
                    City = dtclient.Rows[0]["cm_add4"].ToString().Trim(),
                    PAN = dtclient.Rows[0]["cm_panno"].ToString().Trim(),
                    Pincode = dtclient.Rows[0]["cm_pincode"].ToString().Trim(),
                    //Settlement = strstlmnt.Trim(),
                    BillFrom = myutil.DbToDate(sd1),
                    BillTo = myutil.DbToDate(sd1),
                    //BillFrom =sd1,
                    //BillTo = sd1,

                };


                ulist = dtFOBill.AsEnumerable()
                .Select(row => new FOBillprintModel
                {
                    GetClientDetail = cmbill,
                    Date = myutil.DbToDate(row.Field<string>("tx_dt")),
                    Credit = row.Field<decimal>("tx_value"),
                    SellRate = row.Field<decimal>("tx_rate"),
                    SellQty = row.Field<decimal>("tx_sqty"),
                    ContractDescriptor = row.Field<string>("sm_sname"),
                    ClosingPr = row.Field<decimal>("tx_closerate"),
                    BuyQty = row.Field<decimal>("tx_bqty"),
                    BuyRate = row.Field<decimal>("tx_rate"),
                    Debit = row.Field<decimal>("tx_value"),
                    tax_desc = row.Field<string>("tx_desc"),
                    billno = row.Field<decimal>("tx_billno")

                }).ToList();

            }
            return ulist;
        }
        public IEnumerable<FOBillprintModel> GetFOBillPrint_OLD(string Code, string strOrderBy, string strDate, string strexchange, string strSegment)
        {
            //strstlmnt = "BW2019006";
            //Code = "mg040";
            //strDate = "20190329";
            LibraryModel mylib = new LibraryModel(true);
            UtilityModel myutil = new UtilityModel();
            List<FOBillprintModel> ulist = new List<FOBillprintModel>();


            //string strTblName = "#TmpBl" + myutil.gstrUserCd();
            string Tempdates11 = "#Tempdates11";
            string billcharges = "#billcharges";
            string fobill = "#fobill";
            string sd1 = strDate;
            string strBillstDt;
            string strBillenDt;
            //string strexchange = "N";
            //string strSegment = "F";
            string strCondition = "";
            string strExchangeWhere = "";
            string strClient = Code;
            Boolean blnBrokerBill = false;
            Boolean blnWhere = false;
            //Boolean blnUseDll = false;
            Boolean blnRecMTM = false;
            Double dblReverse = 0.0;
            Boolean blnInterOP = false;
            string[] arrexchange;

            string strMode = "";

            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {
                curCon.Open();



                //strDate = myutil.dtos(strDate);
                string StrMsg;
                StrMsg = mylib.fnCheckInterOperability(strDate, strSegment, curCon);
                if (StrMsg.ToUpper().Trim() == "TRUE")
                {
                    blnInterOP = true;
                }
                if (blnInterOP == true)
                {
                    strExchangeWhere = "";
                    short j = 1;
                    arrexchange = Strings.Split(mylib.fnGetInterOpExchange(strSegment), ",");

                }
                else
                {
                    strExchangeWhere = " and td_Exchange = '" + strexchange + "'";
                    //arrexchange[] = null;
                    //arrexchange[0]= Strings.Trim(strexchange);

                }

                try
                {
                    //mylib.ExecSQL("drop table " + Tempdates11, curCon);
                    //mylib.ExecSQL("drop table " + billcharges, curCon);
                    //mylib.ExecSQL("drop table " + fobill, curCon);
                }
                catch (Exception)
                {

                }
                finally
                {
                    string strCreate = string.Empty;
                    string strsql = string.Empty;
                    try
                    {
                        strsql = "Drop table #tmpfobill";
                        mylib.ExecSQL(strsql, curCon);
                        strCreate = "CREATE TABLE  #tmpfobill ( ";
                        strCreate = strCreate + "[tx_controlflag] numeric(18,3) NOT NULL ,";
                        strCreate = strCreate + "[tx_dt] [char] (8) NOT NULL ,";
                        strCreate = strCreate + "[tx_clientcd] [char] (8) NOT NULL ,";
                        strCreate = strCreate + "[tx_mainbrcd] [char] (8) NOT NULL ,";
                        strCreate = strCreate + "[tx_seriesid] [numeric]  NOT NULL ,";
                        strCreate = strCreate + "[tx_desc] char(45) NOT NULL,";
                        strCreate = strCreate + "[tx_bqty] numeric (18,3)  NOT NULL ,";
                        strCreate = strCreate + "[tx_sqty] numeric(18,3)   NOT NULL ,";
                        strCreate = strCreate + "[tx_rate] [money]  NOT NULL ,";
                        strCreate = strCreate + "[tx_mainbrrate] [money]  NOT NULL ,";
                        strCreate = strCreate + "[tx_marketrate] [money]  NOT NULL ,";
                        strCreate = strCreate + "[tx_servicetax] [money]  NOT NULL ,";
                        strCreate = strCreate + "[tx_closerate] [money]  NOT NULL ,";
                        strCreate = strCreate + "[tx_sortlist] [numeric] NOT NULL,";
                        strCreate = strCreate + "[tx_prodtype] [char] (2) NOT NULL,";
                        strCreate = strCreate + "[tx_value] [money] NOT NULL, ";
                        strCreate = strCreate + "[tx_exchange] [char] (1) NOT NULL ";
                        strCreate = strCreate + " )";
                        mylib.ExecSQL(strCreate, curCon);

                    }
                    catch (Exception ex)
                    {

                    }

                    try
                    {
                        strsql = " Drop Table #tmpbillcharges ";
                        mylib.ExecSQL(strsql, curCon);
                        strCreate = "CREATE TABLE [#tmpbillcharges] ([bc_dt] [char] (8) NOT NULL,[bc_clientcd] [char] (8) NOT NULL,[bc_desc] [char] (40) NOT NULL,[bc_amount] [money] NOT NULL,[bc_billno] [numeric] NOT NULL,[bc_exchange] [char] (1) NOT NULL) ";
                        mylib.ExecSQL(strCreate, curCon);
                    }

                    catch (Exception ex)
                    {

                    }

                    try
                    {
                        strsql = " Drop Table #tmpmosesdates";
                        mylib.ExecSQL(strsql, curCon);
                        strCreate = "CREATE TABLE [#tmpmosesdates] ([bd_dt] [char] (8) NOT NULL )";
                        mylib.ExecSQL(strCreate, curCon);
                    }

                    catch (Exception ex)
                    {

                    }


                    string strinsert = string.Empty;
                    strinsert = "insert into #tmpmosesdates values('" + strDate + "') ";
                    mylib.ExecSQL(strinsert, curCon);

                    string StrExchWhere = "";
                    string strIndexName = string.Empty;


                    strIndexName = "idx_trades_dt_clientcd";
                    strsql = "Select Name from sysindexes where Name= 'idx_trades_clientcd'";

                    DataSet ObjIndexds = mylib.OpenDataSet(strsql, curCon);
                    if (ObjIndexds.Tables[0].Rows.Count > 0)
                    {
                        strIndexName = "idx_trades_clientcd";
                    }

                    //if (strexchange.Contains("IOP"))
                    //{
                    //    StrExchWhere = "";
                    //    strexchange = Strings.Right(strexchange, 1);
                    //}
                    //else
                    //{
                    //    StrExchWhere = "and td_exchange = '" + strexchange + "'";
                    //}

                    strinsert = " insert into  #tmpfobill  select 1 td_controlflag,'" + strDate + "',td_clientcd, ";
                    strinsert = strinsert + " td_mainbrcd, td_seriesid,'',case sign(sum(td_bqty - td_sqty)) when 1 then abs(sum(td_bqty - td_sqty)) else 0 end  td_bqty, case sign(sum(td_bqty - td_sqty)) when 1 then 0 else abs(sum(td_bqty - td_sqty)) end td_sqty, 0.0000 td_rate,0.0000 td_mainbrrate,0.0000 td_mainbrrate, 0.0000 td_servicetax,0.0000 td_closeprice, case sm_prodtype when 'IF' then 1 when 'CF' then 1 when 'EF' then 2 when 'IO' then 5 else 6 end td_sortlist, sm_prodtype,0 ,td_exchange ";
                    strinsert = strinsert + " From Trades with(nolock,index(" + strIndexName + ")) , Series_master with(nolock),Client_master with(nolock)";
                    strinsert = strinsert + " Where td_clientcd = cm_cd and td_exchange = sm_exchange and td_Segment = sm_Segment And td_seriesid = sm_seriesid and sm_expirydt >= '" + strDate + "' and  td_dt < '" + strDate + "' " + StrExchWhere + " and td_Segment = '" + strSegment + "' and sm_prodtype in('IF','EF','CF')  and ltrim(rtrim(td_groupid)) <> 'B'  and td_clientcd = '" + Code + "' group by td_clientcd,td_mainbrcd,td_seriesid,sm_prodtype,td_exchange having sum(td_bqty - td_sqty) <> 0 ";
                    mylib.ExecSQL(strinsert, curCon);

                    strinsert = " insert into #tmpfobill select 2 td_controlflag,td_dt,td_clientcd,td_mainbrcd, td_seriesid,'',td_bqty,td_sqty, td_rate, td_mainbrrate, td_mainbrrate, td_servicetax,0.0000 td_closeprice, case sm_prodtype when 'IF' then 1 when 'CF' then 1 when 'EF' then 2 when 'IO' then 5 else 6 end td_sortlist, sm_prodtype,0,td_exchange ";
                    strinsert = strinsert + " From Trades with(nolock,index(" + strIndexName + ")) , Series_master with(nolock),Client_master with(nolock)";
                    strinsert = strinsert + " Where td_clientcd = cm_cd and td_exchange = sm_exchange and td_Segment = sm_Segment and td_seriesid = sm_seriesid and sm_expirydt >= '" + strDate + "' and  td_dt between '" + strDate + "' and '" + strDate + "' " + StrExchWhere + " and td_Segment = '" + strSegment + "' and cm_cd = '" + Code + "' Order By td_tradeid , td_subtradeid ";
                    mylib.ExecSQL(strinsert, curCon);

                    strinsert = " insert into #tmpfobill select 2 td_controlflag,td_dt,td_clientcd,td_mainbrcd, td_seriesid,'',td_sqty,td_bqty, td_MarketRate, td_mainbrrate, td_mainbrrate, 0,0.0000 td_closeprice, case sm_prodtype when 'IF' then 1 when 'CF' then 1 when 'EF' then 2 when 'IO' then 5 else 6 end td_sortlist, sm_prodtype,0,td_exchange ";
                    strinsert = strinsert + " From Trades with(nolock,index(" + strIndexName + ")) , Series_master,Client_master ";
                    strinsert = strinsert + " Where td_clientcd = cm_cd and td_exchange = sm_exchange and td_Segment = sm_Segment and td_seriesid = sm_seriesid and sm_expirydt >= '" + strDate + "' and  td_dt between '" + strDate + "' and '" + strDate + "' " + StrExchWhere + " and td_Segment = '" + strSegment + "' and ltrim(rtrim(td_groupid)) = 'B'  and td_clientcd = '" + Code + "' Order By td_tradeid , td_subtradeid ";
                    mylib.ExecSQL(strinsert, curCon);

                    strinsert = " insert into #tmpfobill  select 99 tx_controlflag,bd_dt,tx_clientcd,tx_mainbrcd, tx_seriesid,'',  case sign(sum(tx_bqty - tx_sqty)) when 1 then abs(sum(tx_bqty - tx_sqty)) else 0 end  tx_bqty,  case sign(sum(tx_bqty - tx_sqty)) when 1 then 0 else abs(sum(tx_bqty - tx_sqty)) end tx_sqty,  0.0000 tx_rate,0.0000 tx_mainbrrate,0.0000 tx_mainbrrate, 0.0000 tx_servicetax,0.0000 tx_closeprice,  case sm_prodtype when 'IF' then 1 when 'CF' then 1 when 'EF' then 2 when 'IO' then 5 else 6 end tx_sortlist, sm_prodtype,0 ,sm_exchange";
                    strinsert = strinsert + " From #tmpfobill  , #tmpmosesdates , Series_master with (nolock),Client_master with (nolock)";
                    strinsert = strinsert + " Where tx_clientcd = cm_cd and sm_exchange = '" + strexchange + "' and sm_Segment = '" + strSegment + "' And tx_seriesid = sm_seriesid  and sm_expirydt >= bd_dt and  tx_dt < bd_dt  and sm_prodtype in('IF','EF','CF')  and tx_controlflag not in ( '99','3')  group by bd_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,sm_prodtype,sm_exchange  Having Sum(tx_bqty - tx_sqty) <> 0 ";
                    strinsert = strinsert + " Union All ";
                    strinsert = strinsert + " select 3 tx_controlflag,bd_dt,tx_clientcd,tx_mainbrcd, tx_seriesid,'', ";
                    strinsert = strinsert + " case sign(sum(tx_bqty - tx_sqty)) when 1 then 0 else abs(sum(tx_bqty - tx_sqty)) end tx_bqty, ";
                    strinsert = strinsert + " case sign(sum(tx_bqty - tx_sqty)) when 1 then abs(sum(tx_bqty - tx_sqty)) else 0 end  tx_sqty, ";
                    strinsert = strinsert + " 0.0000 tx_rate,0.0000 tx_mainbrrate,0.0000 tx_mainbrrate, 0.0000 tx_servicetax,0.0000 tx_closeprice, ";
                    strinsert = strinsert + " case sm_prodtype when 'IF' then 1 when 'CF' then 1 when 'EF' then 2 when 'IO' then 5 else 6 end tx_sortlist, sm_prodtype,0,sm_exchange ";
                    strinsert = strinsert + " From #tmpfobill  , #tmpmosesdates , Series_master with (nolock),Client_master with (nolock) ";
                    strinsert = strinsert + " Where tx_clientcd = cm_cd and sm_exchange = '" + strexchange + "' and sm_Segment = '" + strSegment + "' And tx_seriesid = sm_seriesid ";
                    strinsert = strinsert + " and sm_expirydt >= bd_dt and  tx_dt <= bd_dt ";
                    strinsert = strinsert + " and sm_prodtype in('IF','EF','CF') ";
                    strinsert = strinsert + " and tx_controlflag not in ( '99','3') ";
                    strinsert = strinsert + " group by bd_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,sm_prodtype,sm_exchange ";
                    strinsert = strinsert + " Having Sum(tx_bqty - tx_sqty) <> 0 ";
                    mylib.ExecSQL(strinsert, curCon);

                    strinsert = "Update #tmpfobill set tx_controlflag = '1' where tx_controlflag = '99' ";
                    mylib.ExecSQL(strinsert, curCon);

                    strinsert = "insert into #tmpfobill select case ex_eaflag when 'E' then 5 else 6 end td_controlflag,ex_dt,ex_clientcd,ex_mainbrcd, ex_seriesid,'',ex_eqty,ex_aqty, ex_diffbrokrate,ex_mainbrdiffrate,ex_mainbrdiffrate, ex_servicetax,ex_settlerate, case sm_prodtype when 'IF' then 1 when 'CF' then 1 when 'EF' then 2 when 'IO' then 5 else 6 end + 3 td_sortlist, sm_prodtype,0 ,ex_exchange";
                    strinsert = strinsert + " From Exercise with (nolock), Series_master with (nolock) ,Client_master with (nolock) ";
                    strinsert = strinsert + "Where ex_clientcd = cm_cd and ex_exchange = sm_exchange and ex_Segment = sm_Segment And ex_seriesid = sm_seriesid and sm_expirydt >= '" + strDate + "' and ex_dt between '" + strDate + "' and '" + strDate + "' " + StrExchWhere.Replace("td_", "ex_") + " and ex_Segment = '" + strSegment + "' and cm_cd = '" + Code + "' ";
                    mylib.ExecSQL(strinsert, curCon);

                    strinsert = "insert into #tmpbillcharges select tx_dt,tx_clientcd,'SERVICE TAX',round(sum(tx_servicetax),2),0,tx_exchange ";
                    strinsert = strinsert + " from #tmpfobill,#tmpmosesdates,Client_master with (nolock) ";
                    strinsert = strinsert + " where tx_clientcd = cm_cd and tx_dt = bd_dt and cm_cd = '" + Code + "' group by tx_dt,tx_clientcd,tx_exchange having sum(tx_servicetax) > 0 ";
                    mylib.ExecSQL(strinsert, curCon);

                    strinsert = "update #tmpfobill set tx_closerate = ms_lastprice ";
                    strinsert = strinsert + " from #tmpfobill, Market_summary with (nolock) ";
                    strinsert = strinsert + " where ms_seriesid = tx_seriesid and tx_controlflag in ('1','2') and ms_exchange=tx_exchange and ms_Segment = '" + strSegment + "' and ms_dt = tx_dt ";
                    mylib.ExecSQL(strinsert, curCon);

                    strinsert = "update #tmpfobill set tx_rate = ms_prcloseprice ";
                    strinsert = strinsert + " from #tmpfobill,Market_summary with (nolock) ";
                    strinsert = strinsert + " where ms_seriesid = tx_seriesid and tx_controlflag = 1 and ms_exchange = tx_Exchange  and ms_Segment = '" + strSegment + "' and ms_dt = tx_dt ";
                    mylib.ExecSQL(strinsert, curCon);

                    strinsert = "update #tmpfobill set tx_rate = ms_lastprice from #tmpfobill,Market_summary with (nolock) ";
                    strinsert = strinsert + " where ms_seriesid = tx_seriesid and tx_controlflag = 3";
                    strinsert = strinsert + " and ms_exchange = tx_Exchange  and ms_Segment = '" + strSegment + "'";
                    strinsert = strinsert + " and ms_dt = tx_dt";
                    mylib.ExecSQL(strinsert, curCon);

                    strinsert = "insert into #tmpbillcharges select fc_dt,fc_clientcd,fc_desc,round(sum(fc_amount),2),0,fc_exchange ";
                    strinsert = strinsert + " from Fspecialcharges with (nolock) ,#tmpmosesdates,Client_master with (nolock) ";
                    strinsert = strinsert + " where fc_clientcd = cm_cd and fc_dt = bd_dt and cm_cd = '" + Code + "' " + StrExchWhere.Replace("td_", "fc_") + " and fc_Segment = '" + strSegment + "' group by fc_dt,fc_clientcd,fc_desc,fc_exchange having round(sum(fc_amount),2) <> 0 ";
                    mylib.ExecSQL(strinsert, curCon);

                    strinsert = "insert into #tmpbillcharges select fc_dt,fc_clientcd,'SERVICE TAX',round(sum(fc_servicetax),2),0,fc_exchange ";
                    strinsert = strinsert + " from Fspecialcharges with (nolock) ,#tmpmosesdates,Client_master with (nolock) ";
                    strinsert = strinsert + " where fc_clientcd = cm_cd and fc_dt = bd_dt and cm_cd = '" + Code + "' " + StrExchWhere.Replace("td_", "fc_") + " and fc_Segment = '" + strSegment + "' group by fc_dt,fc_clientcd,fc_desc,fc_exchange having round(sum(fc_servicetax),2) <> 0 ";
                    mylib.ExecSQL(strinsert, curCon);

                    strinsert = "update #tmpfobill set tx_value = round(((case tx_controlflag when 5  then (tx_bqty + tx_sqty)*-1 when 6 then (tx_bqty + tx_sqty)*-1 else (tx_bqty - tx_sqty) end) *tx_rate)*sm_multiplier,4)";
                    strinsert = strinsert + " From series_master with (nolock) ";
                    strinsert = strinsert + " Where sm_Segment = '" + strSegment + "' and sm_exchange = tx_Exchange and tx_seriesid = sm_seriesid ";
                    mylib.ExecSQL(strinsert, curCon);

                    strinsert = "insert into #tmpfobill select 10 ,bc_dt,bc_clientcd,bc_clientcd, 1,upper(bc_desc),0 td_bqty,0 td_sqty, 0,0 td_mainbrrate,0 td_mainbrrate, 0 td_servicetax,0.0000 td_closeprice, 10 td_sortlist, 'XX',round(sum(bc_amount),2),bc_exchange From #tmpbillcharges group by bc_dt,bc_clientcd,bc_desc,bc_exchange ";
                    mylib.ExecSQL(strinsert, curCon);

                    strinsert = "insert into #tmpfobill select 90 ,fb_billdt,fb_clientcd,fb_clientcd, 1,'[PREV. DAY MRGN.]',0 td_bqty,0 td_sqty, 0,0 td_mainbrrate,0 td_mainbrrate, 0 td_servicetax,0.0000 td_closeprice, 90 td_sortlist, 'XX',round(Case when fb_postmrgyn = 'Y' then fb_margin1 else 0 end + CAse When fb_postExpmrgyn = 'Y' then fb_Expmargin1 else 0 end ,2),fb_exchange ";
                    strinsert = strinsert + " From #tmpmosesdates,Fbills with (nolock) ,Client_master with (nolock) ";
                    strinsert = strinsert + " where fb_clientcd = cm_cd and fb_billdt = bd_dt and fb_exchange = '" + strexchange + "' and fb_Segment = '" + strSegment + "' and round(Case when fb_postmrgyn = 'Y' then fb_margin1 else 0 end + CAse When fb_postExpmrgyn = 'Y' then fb_Expmargin1 else 0 end ,2) <> 0  and cm_cd = '" + Code + "' ";
                    mylib.ExecSQL(strinsert, curCon);

                    strinsert = "insert into #tmpfobill select 91 ,fb_billdt,fb_clientcd,fb_clientcd, 1,'[CURR. DAY MRGN.]',0 td_bqty,0 td_sqty, 0,0 td_mainbrrate,0 td_mainbrrate, 0 td_servicetax,0.0000 td_closeprice, 91 td_sortlist, 'XX',round(Case When fb_postmrgyn = 'Y' then fb_margin2 else 0 end + Case When fb_postExpmrgyn = 'Y' then fb_Expmargin2 else 0 end,2),fb_exchange ";
                    strinsert = strinsert + " From #tmpmosesdates,Fbills with (nolock) ,Client_master with (nolock) ";
                    strinsert = strinsert + " where fb_clientcd = cm_cd and fb_billdt = bd_dt and fb_exchange = '" + strexchange + "' and fb_Segment = '" + strSegment + "' and round(Case When fb_postmrgyn = 'Y' then fb_margin2 else 0 end + Case When fb_postExpmrgyn = 'Y' then fb_Expmargin2 else 0 end,2) <> 0  and cm_cd = '" + Code + "' ";
                    mylib.ExecSQL(strinsert, curCon);

                    strinsert = "alter table #tmpfobill add tx_billno numeric default(0) NOT NULL ";
                    mylib.ExecSQL(strinsert, curCon);

                    strinsert = "update #tmpfobill set tx_billno = fb_billno from #tmpfobill,Fbills with (nolock) where fb_clientcd = tx_clientcd  and fb_exchange = tx_exchange and fb_Segment = '" + strSegment + "' and fb_billdt = tx_dt  ";
                    mylib.ExecSQL(strinsert, curCon);

                    strinsert = "select tx_sortlist,tx_dt as dt,tx_billno,case tx_controlflag when '1' then 'b/f' when '3' then 'c/f' else convert(char,convert(datetime,tx_dt),103) end tx_dt,tx_clientcd, tx_seriesid,sm_sname as tx_desc, cast((tx_bqty)as decimal(15,0))as tx_bqty,cast((tx_sqty)as decimal(15,0))as tx_sqty,cast((tx_rate)as decimal(15,4))as tx_rate,cast((tx_closerate)as decimal(15,4))as tx_closerate,cast((tx_value)as decimal(15,2))as drcr,cast((((tx_bqty-tx_sqty) * tx_rate)) as decimal(15,2)) value,sm_sname,sm_desc,sm_productcd,sm_symbol, ";
                    strinsert = strinsert + " sm_expirydt,sm_strikeprice,sm_callput,sm_optionstyle,cm_name, ";
                    strinsert = strinsert + " cm_add1,cm_add2,cm_add3,cm_tele1,cm_tele2,cm_email,cm_sebino, cm_panno, cm_add4, cm_pincode,sm_prodtype,cm_groupcd,cm_familycd,cm_brboffcode,cm_subbroker,sm_multiplier, ";
                    strinsert = strinsert + " cm_introducer ,replicate(' ',8-len(ltrim(rtrim(tx_clientcd)))) + ltrim(rtrim(tx_clientcd)) ,case tx_controlflag when '1' then 0 when '3' then 2 else 1 end ord, '' as NetValue ";
                    strinsert = strinsert + " from #tmpfobill,Series_master with (nolock) ,Client_master with (nolock) ";
                    strinsert = strinsert + " where tx_clientcd = cm_cd and tx_seriesid = sm_seriesid and tx_exchange = sm_exchange and sm_Segment = '" + strSegment + "' and tx_controlflag < 10 ";
                    strinsert = strinsert + " union all ";
                    strinsert = strinsert + " select tx_sortlist,tx_dt as dt,tx_billno,case tx_controlflag when '1' then 'b/f' when '3' then 'c/f' else convert(char,convert(datetime,tx_dt),103) end tx_dt,tx_clientcd, tx_seriesid,tx_desc, cast((tx_bqty)as decimal(15,0))as tx_bqty,cast((tx_sqty)as decimal(15,0))as tx_sqty,cast((tx_rate)as decimal(15,4))as tx_rate,cast((tx_closerate)as decimal(15,4))as tx_closerate,cast((tx_value)as decimal(15,2)) as drcr,cast((((tx_bqty-tx_sqty) * tx_rate))as decimal(15,2)) value, tx_desc as sm_sname,'' sm_desc,'' sm_productcd,'' sm_symbol,'' sm_expirydt, 0 sm_strikeprice, 'X' sm_callput,'X' sm_optionstyle, cm_name,cm_add1,cm_add2,cm_add3,cm_tele1,cm_tele2,cm_email, cm_sebino, cm_panno,cm_add4, ";
                    strinsert = strinsert + " cm_pincode,'EF' as sm_prodtype,cm_groupcd,cm_familycd,cm_brboffcode, ";
                    strinsert = strinsert + " cm_subbroker,0 sm_multiplier,cm_introducer ,replicate('',8-len(ltrim(rtrim(tx_clientcd)))) + ltrim(rtrim(tx_clientcd)),case tx_controlflag when '1' then 0 when '3' then 2 else 1 end ord, '' as NetValue  ";
                    strinsert = strinsert + " from #tmpfobill,Client_master with (nolock) ";
                    strinsert = strinsert + " where tx_clientcd = cm_cd and tx_controlflag >= 10 ";
                    strinsert = strinsert + " order by  replicate(' ',8-len(ltrim(rtrim(tx_clientcd)))) + ltrim(rtrim(tx_clientcd))  ,dt ,tx_sortlist,sm_symbol,tx_seriesid,tx_desc  , ord ";

                    DataTable dtFOBill = mylib.OpenDataTable(strinsert, curCon);

                    //--------------------------------End Select Data from temptable---------------------------
                    string strSQL1 = "Select cm_cd, cm_name, cm_add1, cm_add2, cm_add3, cm_panno, cm_add4, cm_pincode From Client_Master ";
                    strSQL1 += " Where cm_cd = '" + Code + "'";
                    DataTable dtclient = mylib.OpenDataTable(strSQL1, curCon);
                    ClientMasterBillModel cmbill = new ClientMasterBillModel
                    {
                        Code = Code,
                        Name = dtclient.Rows[0]["cm_name"].ToString().Trim(),
                        Add1 = dtclient.Rows[0]["cm_add1"].ToString().Trim(),
                        Add2 = dtclient.Rows[0]["cm_add2"].ToString().Trim(),
                        Add3 = dtclient.Rows[0]["cm_add3"].ToString().Trim(),
                        City = dtclient.Rows[0]["cm_add4"].ToString().Trim(),
                        PAN = dtclient.Rows[0]["cm_panno"].ToString().Trim(),
                        Pincode = dtclient.Rows[0]["cm_pincode"].ToString().Trim(),
                        //Settlement = strstlmnt.Trim(),
                        BillFrom = myutil.DbToDate(sd1),
                        BillTo = myutil.DbToDate(sd1)
                    };

                    try
                    {
                        ulist = dtFOBill.AsEnumerable()
                    .Select(row => new FOBillprintModel
                    {
                        GetClientDetail = cmbill,
                        Date = row.Field<string>("tx_dt"),
                        Credit = row.Field<decimal>("drcr"),
                        SellRate = row.Field<decimal>("tx_rate"),
                        SellQty = row.Field<decimal>("tx_sqty"),

                        ContractDescriptor = row.Field<string>("sm_sname"),
                        ClosingPr = row.Field<decimal>("tx_closerate"),

                        BuyQty = row.Field<decimal>("tx_bqty"),

                        BuyRate = row.Field<decimal>("tx_rate"),

                        Debit = row.Field<decimal>("drcr"),

                        tax_desc = row.Field<string>("tx_desc"),

                        billno = row.Field<decimal>("tx_billno"),
                        sm_desc = row.Field<string>("sm_desc")


                    }).ToList();
                    }

                    catch (Exception)
                    {
                        throw;
                    }
                    finally
                    {

                    }
                }
                return ulist;
            }
        }
        public IEnumerable<FOBillprintModel> GetFOBillPrint(string Code, string strOrderBy, string strDate, string strexchange, string strSegment)
        {
            string strsql = "";
            double dblReverse;
            string strFOCNTBILLformat = "";
            LibraryModel mylib = new LibraryModel(true);
            UtilityModel myutil = new UtilityModel();
            List<FOBillprintModel> ulist = new List<FOBillprintModel>();
            string strCondition = "";
            Boolean blnBrokerBill = false;
            Boolean blnRecMTM = false;
            Boolean blnInterOP = false;
            string strExchangeWhere = "";
            string[] arrexchange;
            Boolean blnWhere = false;
            string strMode = "";
            DataTable dt = new DataTable();
            if (!string.IsNullOrEmpty(Strings.Trim(Code)) & !string.IsNullOrEmpty(Strings.Trim(Code)))
            {
                blnWhere = true;
                strCondition = strCondition + " and cm_cd >= '" + Strings.Trim(Code) + "' and cm_cd <='" + Strings.Trim(Code) + "'";
            }
            else if (!string.IsNullOrEmpty(Strings.Trim(Code)) & string.IsNullOrEmpty(Strings.Trim(Code)))
            {
                strCondition = strCondition + " and cm_cd = '" + Strings.Trim(Code) + "'";
            }
            else if (string.IsNullOrEmpty(Strings.Trim(Code)) & !string.IsNullOrEmpty(Strings.Trim(Code)))
            {
                strCondition = strCondition + " and cm_cd = '" + Strings.Trim(Code) + "'";
            }
            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {
                curCon.Open();

                string StrMsg;
                StrMsg = mylib.fnCheckInterOperability(strDate, strSegment, curCon);
                if (StrMsg.ToUpper().Trim() == "TRUE")
                {
                    blnInterOP = true;
                }
                if (blnInterOP == true)
                {
                    strExchangeWhere = "";
                    short j = 1;
                    arrexchange = Strings.Split(mylib.fnGetInterOpExchange(strSegment), ",");

                }
                else
                {
                    strExchangeWhere = " and td_Exchange = '" + strexchange + "'";
                    //arrexchange[] = null;
                    //arrexchange[0]= Strings.Trim(strexchange);

                }

                strFOCNTBILLformat = (mylib.fnGetSysParam("FOCNTBILL"));
                if (strFOCNTBILLformat == "")
                {
                    strFOCNTBILLformat = "1";
                }
                try
                {


                }
                catch (Exception)
                {

                }
                finally
                {

                    try
                    {

                        strsql = "Drop table #Tempdates11";
                        mylib.ExecSQL(strsql, curCon);

                        strsql = " CREATE TABLE #Tempdates11 ([bd_dt] [char] (8) NOT NULL )";
                        mylib.ExecSQL(strsql, curCon);
                        //----------------------------------------------------

                        strsql = "select count(*) from Fholiday_master where hm_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                        strsql = strsql + " and hm_exchange = '" + strexchange + "' and hm_segment = '" + strSegment + "'";
                        strsql = strsql + " and hm_dt = '" + strDate + "'";
                        dt = mylib.OpenDataTable(strsql, curCon);
                        if (dt.Rows.Count > 0)
                        {
                            strsql = "insert into #Tempdates11 values('" + strDate + "')";

                            mylib.ExecSQL(strsql, curCon);
                        }
                        //----------------------------------------------------



                        strsql = "drop table #billcharges";
                        mylib.ExecSQL(strsql, curCon);

                        strsql = "CREATE TABLE [dbo].[#billcharges] (";
                        strsql = strsql + "[bc_dt] [char] (8) NOT NULL,";
                        strsql = strsql + "[bc_clientcd] [char] (8) NOT NULL,";
                        strsql = strsql + "[bc_desc] [char] (40) NOT NULL,";
                        strsql = strsql + "[bc_amount] [money] NOT NULL,";
                        strsql = strsql + "[bc_billno] [numeric] NOT NULL,";
                        strsql = strsql + "[bc_Exchange] [char] (1) ";
                        strsql = strsql + ")";
                        mylib.ExecSQL(strsql, curCon);
                        //----------------------------------------------------


                        strsql = "drop table #fobill";
                        mylib.ExecSQL(strsql, curCon);


                        strsql = "CREATE TABLE [dbo].[#fobill] (";
                        strsql = strsql + "[tx_controlflag] [numeric] NOT NULL ,";
                        strsql = strsql + "[tx_dt] [char] (8) NOT NULL ,";
                        strsql = strsql + "[tx_clientcd] [char] (8) NOT NULL ,";
                        strsql = strsql + "[tx_mainbrcd] [char] (8) NOT NULL ,";
                        strsql = strsql + "[tx_seriesid] [numeric]  NOT NULL ,";
                        strsql = strsql + "[tx_desc] char(45) NOT NULL,";
                        strsql = strsql + "[tx_bqty] [numeric]  NOT NULL ,";
                        strsql = strsql + "[tx_sqty] [numeric]  NOT NULL ,";
                        strsql = strsql + "[tx_rate] [money]  NOT NULL ,";
                        strsql = strsql + "[tx_mainbrrate] [money]  NOT NULL ,";
                        strsql = strsql + "[tx_marketrate] [money]  NOT NULL ,";
                        strsql = strsql + "[tx_servicetax] [money]  NOT NULL ,";
                        strsql = strsql + "[tx_closerate] [money]  NOT NULL ,";
                        strsql = strsql + "[tx_sortlist] [numeric] NOT NULL,";
                        strsql = strsql + "[tx_prodtype] [char] (2) NOT NULL,";
                        strsql = strsql + "[tx_value] [money] NOT NULL, ";
                        strsql = strsql + "[tx_brokerage] [money]   ,";
                        strsql = strsql + "[tx_tradeid] [char] (7) ,";
                        strsql = strsql + "[tx_subtradeid] [char] (7) ,";
                        strsql = strsql + "[tx_orderid] [char] (20) ,";
                        strsql = strsql + "[tx_time] [char] (8) ,";
                        strsql = strsql + "[tx_ordertime] [char] (8), ";
                        strsql = strsql + "[tx_Exchange] [char] (1) ";
                        strsql = strsql + ")";


                        mylib.ExecSQL(strsql, curCon);
                        //----------------------------------------------------



                    }
                    catch (Exception ex)
                    { }
                }



                //----------------------------------------------------

                strsql = "insert into #fobill (tx_controlflag,tx_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,tx_desc,tx_bqty,tx_sqty,tx_rate,tx_mainbrrate,";
                strsql = strsql + "tx_marketrate,tx_servicetax,tx_closerate,tx_sortlist,tx_prodtype,tx_value,tx_Exchange) ";
                strsql = strsql + " select 1 td_controlflag,'" + strDate + "',td_clientcd,td_mainbrcd,";
                strsql = strsql + " td_seriesid,'',case sign(sum(td_bqty - td_sqty)) when 1 then abs(sum(td_bqty - td_sqty)) else 0 end  td_bqty,";
                strsql = strsql + " case sign(sum(td_bqty - td_sqty)) when 1 then 0 else abs(sum(td_bqty - td_sqty)) end td_sqty,";
                strsql = strsql + " 0.0000 td_rate,0.0000 td_mainbrrate,0.0000 td_mainbrrate,";
                strsql = strsql + " 0.0000 td_servicetax,0.0000 td_closeprice,";
                strsql = strsql + " case sm_prodtype when 'IF' then 1 when 'CF' then 1 when 'RF' then 2 when 'EF' then 2 when 'IO' then 5 else 6 end td_sortlist,";
                strsql = strsql + " sm_prodtype,0,td_exchange";
                strsql = strsql + " From Trades with(index(idx_trades_dt_clientcd)) , Series_master,Client_master ";
                strsql = strsql + " Where td_clientcd = cm_cd and td_exchange = sm_exchange and td_segment = sm_segment  " + HttpContext.Current.Session["LoginAccessOld"] + " And td_seriesid = sm_seriesid ";
                strsql = strsql + " and sm_expirydt >= '" + strDate + "' and td_dt < '" + strDate + "'";
                strsql = strsql + " and td_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' ";
                strsql = strsql + strExchangeWhere + " and td_segment = '" + strSegment + "' and sm_prodtype in('IF','EF','CF','RF')";

                if (string.IsNullOrEmpty(Strings.Trim(Code)))
                {
                    strsql = strsql + Code;
                }
                else if (blnBrokerBill)
                {
                    strsql = strsql + " and td_mainbrcd = '" + Strings.Trim(Code) + "'";
                }
                else
                {
                    strsql = strsql + strCondition;
                }

                strsql = strsql + " group by td_clientcd,td_mainbrcd,td_seriesid,sm_prodtype,td_exchange";
                strsql = strsql + " having sum(td_bqty - td_sqty) <> 0";
                mylib.ExecSQL(strsql, curCon);




                strsql = "insert into #fobill (tx_controlflag,tx_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,tx_desc,tx_bqty,tx_sqty,";
                strsql = strsql + " tx_rate,tx_mainbrrate,tx_marketrate,tx_servicetax,tx_closerate,tx_sortlist,tx_prodtype,";
                strsql = strsql + " tx_value,tx_Exchange)";
                strsql = strsql + " select 2 td_controlflag,td_dt,td_clientcd,td_mainbrcd,";
                strsql = strsql + " td_seriesid,'',td_bqty,td_sqty,";
                strsql = strsql + " td_rate,td_mainbrrate,td_mainbrrate,";
                strsql = strsql + " td_servicetax,0.0000 td_closeprice,";
                strsql = strsql + " case sm_prodtype when 'IF' then 1 when 'CF' then 1 when 'RF' then 2 when 'EF' then 2 when 'IO' then 5 else 6 end td_sortlist,";
                strsql = strsql + " sm_prodtype,0,td_exchange";
                strsql = strsql + " From Trades with(index(idx_trades_dt_clientcd)) , Series_master,Client_master ";
                strsql = strsql + " Where td_clientcd = cm_cd and td_exchange = sm_exchange and td_segment = sm_segment " + HttpContext.Current.Session["LoginAccessOld"] + " and td_seriesid = sm_seriesid"; // 'session("loginaccess")
                strsql = strsql + " and sm_expirydt >= '" + strDate + "'";
                strsql = strsql + " and td_dt between '" + strDate + "' and '" + strDate + "'";
                strsql = strsql + " and td_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' " + strExchangeWhere + " and td_segment = '" + strSegment + "'";

                if (string.IsNullOrEmpty(Strings.Trim(Code)))
                {
                    strsql = strsql + strCondition;
                }
                else if (blnBrokerBill)
                {
                    strsql = strsql + " and td_mainbrcd = '" + Strings.Trim(Code) + "'";
                }
                else
                {
                    strsql = strsql + strCondition;
                }

                mylib.ExecSQL(strsql, curCon);



                strsql = "insert into #fobill (tx_controlflag,tx_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,tx_desc,tx_bqty,tx_sqty,";
                strsql = strsql + " tx_rate,tx_mainbrrate,tx_marketrate,tx_servicetax,tx_closerate,tx_sortlist,tx_prodtype,";
                strsql = strsql + " tx_value,tx_Exchange)";  // above three lines added by rajesh till first bracket
                strsql = strsql + " select 9 tx_controlflag,bd_dt,tx_clientcd,tx_mainbrcd, tx_seriesid,'', ";
                strsql = strsql + " case sign(sum(tx_bqty - tx_sqty)) when 1 then abs(sum(tx_bqty - tx_sqty)) else 0 end  tx_bqty, ";
                strsql = strsql + " case sign(sum(tx_bqty - tx_sqty)) when 1 then 0 else abs(sum(tx_bqty - tx_sqty)) end tx_sqty, ";
                strsql = strsql + " 0.0000 tx_rate,0.0000 tx_mainbrrate,0.0000 tx_mainbrrate, 0.0000 tx_servicetax,0.0000 tx_closeprice, ";
                strsql = strsql + " case sm_prodtype when 'IF' then 1 when 'CF' then 1 when 'RF' then 2 when 'EF' then 2 when 'IO' then 5 else 6 end tx_sortlist,sm_prodtype,0,tx_Exchange ";
                strsql = strsql + " From #fobill  , #Tempdates11 , Series_master,Client_master ";
                strsql = strsql + " Where tx_clientcd = cm_cd " + strExchangeWhere.Replace("td_", "sm_") + " and sm_segment = '" + strSegment + "' And tx_seriesid = sm_seriesid ";
                strsql = strsql + " and sm_expirydt >= bd_dt and  tx_dt < bd_dt ";
                strsql = strsql + " and sm_prodtype in('IF','EF','CF','RF') ";
                strsql = strsql + " and tx_controlflag not in ( '9','3') ";
                strsql = strsql + " group by bd_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,sm_prodtype,tx_Exchange ";
                strsql = strsql + " Having Sum(tx_bqty - tx_sqty) <> 0 ";

                if (!blnRecMTM)   // Record Wise MTM
                {
                    strsql = strsql + " Union All ";
                    strsql = strsql + " select 3 tx_controlflag,bd_dt,tx_clientcd,tx_mainbrcd, tx_seriesid,'', ";
                    strsql = strsql + " case sign(sum(tx_bqty - tx_sqty)) when 1 then 0 else abs(sum(tx_bqty - tx_sqty)) end tx_bqty, ";
                    strsql = strsql + " case sign(sum(tx_bqty - tx_sqty)) when 1 then abs(sum(tx_bqty - tx_sqty)) else 0 end  tx_sqty, ";
                    strsql = strsql + " 0.0000 tx_rate,0.0000 tx_mainbrrate,0.0000 tx_mainbrrate, 0.0000 tx_servicetax,0.0000 tx_closeprice, ";
                    strsql = strsql + " case sm_prodtype when 'IF' then 1 when 'CF' then 2 when 'RF' then 2 when 'EF' then 2 when 'IO' then 5 else 6 end tx_sortlist, sm_prodtype,0,tx_Exchange ";
                    strsql = strsql + " From #fobill  , #Tempdates11 , Series_master,Client_master ";
                    strsql = strsql + " Where tx_clientcd = cm_cd " + strExchangeWhere.Replace("td_", "sm_") + " and sm_segment = '" + strSegment + "' And tx_seriesid = sm_seriesid ";
                    strsql = strsql + " and sm_expirydt >= bd_dt and  tx_dt <= bd_dt ";
                    strsql = strsql + " and sm_prodtype in('IF','EF','CF','RF') ";
                    strsql = strsql + " and tx_controlflag not in ( '9','3') ";
                    strsql = strsql + " group by bd_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,sm_prodtype,tx_Exchange ";
                    strsql = strsql + " Having Sum(tx_bqty - tx_sqty) <> 0 ";
                }

                mylib.ExecSQL(strsql, curCon);

                strsql = " Update #fobill set tx_controlflag = '1' where tx_controlflag = '9' ";
                mylib.ExecSQL(strsql, curCon);
                //----------------------------------------------------
                strsql = "insert into #fobill (tx_controlflag,tx_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,tx_desc,tx_bqty,tx_sqty,";
                strsql = strsql + " tx_rate,tx_mainbrrate,tx_marketrate,tx_servicetax,tx_closerate,tx_sortlist,tx_prodtype,";
                strsql = strsql + " tx_value,tx_orderid,tx_time,tx_ordertime,tx_Exchange)"; // added by rajesh till first bracket
                strsql = strsql + " select case ex_eaflag when 'E' then 5 else 6 end td_controlflag,ex_dt,ex_clientcd,ex_mainbrcd,";
                if (strFOCNTBILLformat == "1")
                {
                    strsql = strsql + " ex_seriesid,'',ex_eqty,ex_aqty,";
                }
                else
                {
                    strsql = strsql + " ex_seriesid,'',ex_aqty,ex_eqty,";
                }

                strsql = strsql + " ex_diffbrokrate,ex_mainbrdiffrate,ex_mainbrdiffrate,";
                strsql = strsql + " ex_servicetax,ex_settlerate,";
                strsql = strsql + " case sm_prodtype when 'IF' then 1 when 'CF' then 1 when 'RF' then 2 when 'EF' then 2 when 'IO' then 5 else 6 end + 3 td_sortlist,";
                strsql = strsql + " sm_prodtype,0,";
                strsql = strsql + " '' as td_orderid,'' as td_time, '' as td_ordertime,ex_exchange ";
                strsql = strsql + " From Exercise, Series_master,Client_master";
                strsql = strsql + " Where ex_clientcd = cm_cd and ex_exchange = sm_exchange and ex_segment = sm_segment " + HttpContext.Current.Session["LoginAccessOld"] + " And ex_seriesid = sm_seriesid"; // 'session("LoginAccess")
                strsql = strsql + " and sm_expirydt >= '" + strDate + "'";
                strsql = strsql + " and ex_dt between '" + strDate + "' and '" + strDate + "'";
                strsql = strsql + " and ex_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' " + strExchangeWhere.Replace("td_", "ex_") + " and ex_segment = '" + strSegment + "'";

                if (string.IsNullOrEmpty(Strings.Trim(Code)))
                {
                    dblReverse = -1;
                    strsql = strsql + strCondition;
                }
                else if (blnBrokerBill)
                {
                    dblReverse = 1;
                    strsql = strsql + " and ex_mainbrcd = '" + Strings.Trim(Code) + "'";
                }
                else
                {
                    dblReverse = -1;
                    strsql = strsql + strCondition;
                }
                mylib.ExecSQL(strsql, curCon);

                if (blnBrokerBill)
                {
                    strsql = "update #fobill set tx_value = -1";

                    mylib.ExecSQL(strsql, curCon);


                    strsql = "insert into #fobill select tx_controlflag,tx_dt,tx_mainbrcd,tx_mainbrcd,";
                    strsql = strsql + " tx_seriesid,'',tx_sqty,tx_bqty,case tx_controlflag when 1 then tx_rate else tx_mainbrrate end,tx_mainbrrate,";
                    strsql = strsql + " tx_marketrate,0 tx_servicetax,tx_closerate,tx_sortlist,";
                    strsql = strsql + " tx_prodtype, 0,tx_Exchange from #fobill";

                    mylib.ExecSQL(strsql, curCon);
                    strsql = "delete from #fobill where tx_value = -1";
                    mylib.ExecSQL(strsql, curCon);
                }
                else
                //'Service tax here
                {
                    strsql = "insert into #billcharges select tx_dt,tx_clientcd,'SERVICE TAX',round(sum(tx_servicetax),2),0,tx_Exchange from #fobill,#Tempdates11,Client_master";
                    strsql = strsql + " where tx_clientcd = cm_cd and tx_dt = bd_dt";
                    strsql = strsql + strCondition;
                    strsql = strsql + " group by tx_dt,tx_clientcd,tx_Exchange having sum(tx_servicetax) > 0";
                    mylib.ExecSQL(strsql, curCon);
                }
                //'Update Previous close and today's close prices

                strsql = "update #fobill set tx_closerate = ms_lastprice from #fobill,Market_summary";
                strsql = strsql + " where ms_seriesid = tx_seriesid and tx_controlflag in('1','2')";
                strsql = strsql + " and ms_exchange = tx_Exchange and ms_segment = '" + strSegment + "'";
                strsql = strsql + " and ms_dt = tx_dt";
                mylib.ExecSQL(strsql, curCon);

                strsql = "update #fobill set tx_rate = ms_prcloseprice from #fobill,Market_summary";
                strsql = strsql + " where ms_seriesid = tx_seriesid and tx_controlflag = 1";
                strsql = strsql + " and ms_exchange = tx_Exchange and ms_segment = '" + strSegment + "'";
                strsql = strsql + " and ms_dt = tx_dt";
                mylib.ExecSQL(strsql, curCon);


                if (blnRecMTM == false)  // Record Wise MTM
                {
                    strsql = "update #fobill set tx_rate = ms_lastprice from #fobill,Market_summary";
                    strsql = strsql + " where ms_seriesid = tx_seriesid and tx_controlflag = 3";
                    strsql = strsql + " and ms_exchange = tx_Exchange and ms_segment = '" + strSegment + "'";
                    strsql = strsql + " and ms_dt = tx_dt";
                    mylib.ExecSQL(strsql, curCon);
                } // 'End of updation of close prices


                //'Charges here
                //'-----------from specialcharges start

                strsql = "insert into #billcharges select fc_dt,fc_clientcd,fc_desc,round(sum(fc_amount),2),0,fc_Exchange from Fspecialcharges,#Tempdates11,Client_master";
                strsql = strsql + " where fc_clientcd = cm_cd and fc_dt = bd_dt";
                strsql = strsql + strCondition;
                if (strCondition == "")
                {
                    strsql = strsql + " and fc_clientcd not in(select distinct tx_mainbrcd from #fobill)";
                }

                strsql = strsql + " and fc_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                strsql = strsql + strExchangeWhere.Replace("td_", "fc_") + " and fc_segment = '" + strSegment + "'";
                strsql = strsql + " group by fc_dt,fc_clientcd,fc_desc,fc_Exchange having round(sum(fc_amount),2) <> 0";
                mylib.ExecSQL(strsql, curCon);

                strsql = "insert into #billcharges select fc_dt,fc_clientcd,'SERVICE TAX',round(sum(fc_servicetax),2),0,fc_Exchange from Fspecialcharges,#Tempdates11,Client_master";
                strsql = strsql + " where fc_clientcd = cm_cd and fc_dt = bd_dt";
                strsql = strsql + strCondition;
                if (strCondition == "")
                {
                    strsql = strsql + " and fc_clientcd not in(select distinct tx_mainbrcd from #fobill)";
                }

                strsql = strsql + " and fc_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                strsql = strsql + strExchangeWhere.Replace("td_", "fc_") + " and fc_segment = '" + strSegment + "'";
                strsql = strsql + " group by fc_dt,fc_clientcd,fc_desc,fc_Exchange having round(sum(fc_servicetax),2) <> 0";
                mylib.ExecSQL(strsql, curCon);

                //    '-----------from specialcharges end
                //'---------------Update values for MTM and Premium

                if (blnRecMTM == false)  // Record Wise MTM
                {
                    strsql = "update #fobill set tx_value = round(((case tx_controlflag when 5  then (tx_bqty + tx_sqty)*" + dblReverse + " when 6 then (tx_bqty + tx_sqty)*" + dblReverse + " else (tx_bqty - tx_sqty) end) *tx_rate)*sm_multiplier,4)";
                    strsql = strsql + " From series_master ";
                    strsql = strsql + " Where sm_exchange = tx_Exchange and sm_segment = '" + strSegment + "' and tx_seriesid = sm_seriesid "; // 
                    mylib.ExecSQL(strsql, curCon);
                }
                else
                {
                    strsql = "update #fobill set tx_value = round((((tx_bqty - tx_sqty)*tx_rate) - ((tx_bqty - tx_sqty)*tx_closerate))*sm_multiplier,4)";
                    strsql = strsql + " From series_master ";
                    strsql = strsql + " where sm_exchange = tx_Exchange and sm_segment = '" + strSegment + "' and tx_seriesid = sm_seriesid ";
                    strsql = strsql + " and tx_prodtype in('IF','EF','CF','RF')";
                    mylib.ExecSQL(strsql, curCon);
                    // strsql = strsql & " where tx_prodtype in('IF','EF')"

                    strsql = "update #fobill set tx_value = round(((case tx_controlflag when 5  then (tx_bqty + tx_sqty)*" + dblReverse + " when 6 then (tx_bqty + tx_sqty)*" + dblReverse + " else (tx_bqty - tx_sqty) end) *tx_rate)*sm_multiplier,4)";
                    strsql = strsql + " From series_master ";
                    strsql = strsql + " where sm_exchange = tx_Exchange and sm_segment = '" + strSegment + "' and tx_seriesid = sm_seriesid ";
                    strsql = strsql + " and tx_prodtype not in('IF','EF','CF','RF')";
                    // strsql = strsql & " where tx_prodtype not in('IF','EF')"
                    mylib.ExecSQL(strsql, curCon);


                }
                //'---------------Update values for MTM and Premium end


                strsql = "insert into #fobill(tx_controlflag,tx_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,tx_desc,tx_bqty,tx_sqty,tx_rate,tx_mainbrrate,";
                strsql = strsql + " tx_marketrate,tx_servicetax,tx_closerate,tx_sortlist,tx_prodtype,tx_value,tx_Exchange)";
                strsql = strsql + " select 10 ,bc_dt,bc_clientcd,bc_clientcd,";
                strsql = strsql + " 1,upper(bc_desc),0 td_bqty,0 td_sqty,";
                strsql = strsql + " 0,0 td_mainbrrate,0 td_mainbrrate,";
                strsql = strsql + " 0 td_servicetax,0.0000 td_closeprice,";
                strsql = strsql + " 10 td_sortlist,";
                strsql = strsql + " 'XX',round(sum(bc_amount),2),bc_Exchange";
                strsql = strsql + " From #billcharges group by bc_dt,bc_clientcd,bc_desc,bc_Exchange";
                mylib.ExecSQL(strsql, curCon);

                //  ''''Changed


                strsql = "insert into #fobill(tx_controlflag,tx_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,tx_desc,tx_bqty,tx_sqty,tx_rate,tx_mainbrrate,";
                strsql = strsql + " tx_marketrate,tx_servicetax,tx_closerate,tx_sortlist,tx_prodtype,tx_value,tx_Exchange)";
                strsql = strsql + " select 90 ,fb_billdt,fb_clientcd,fb_clientcd,";
                strsql = strsql + " 1,'[PREV. DAY MRGN.]',0 td_bqty,0 td_sqty,";
                strsql = strsql + " 0,0 td_mainbrrate,0 td_mainbrrate,";
                strsql = strsql + " 0 td_servicetax,0.0000 td_closeprice,";
                strsql = strsql + " 90 td_sortlist,";
                strsql = strsql + " 'XX',round(Case when fb_postmrgyn = 'Y' then fb_margin1 else 0 end + CAse When fb_postExpmrgyn = 'Y' then fb_Expmargin1 else 0 end ,2),fb_exchange";
                strsql = strsql + " From #Tempdates11,Fbills,Client_master";
                strsql = strsql + " where fb_clientcd = cm_cd and fb_billdt = bd_dt";
                strsql = strsql + " and fb_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                strsql = strsql + " and fb_exchange = '" + strexchange + "' and fb_segment = '" + strSegment + "'";
                strsql = strsql + " and round(Case when fb_postmrgyn = 'Y' then fb_margin1 else 0 end + CAse When fb_postExpmrgyn = 'Y' then fb_Expmargin1 else 0 end ,2) <> 0";
                strsql = strsql + strCondition;
                mylib.ExecSQL(strsql, curCon);
                //  ''''till here

                //...changed

                strsql = "insert into #fobill (tx_controlflag,tx_dt,tx_clientcd,tx_mainbrcd,tx_seriesid,tx_desc,tx_bqty,tx_sqty,tx_rate,tx_mainbrrate,"; // changed
                strsql = strsql + " tx_marketrate,tx_servicetax,tx_closerate,tx_sortlist,tx_prodtype,tx_value,tx_Exchange)";
                strsql = strsql + " select 91 ,fb_billdt,fb_clientcd,fb_clientcd,";
                strsql = strsql + " 1,'[CURR. DAY MRGN.]',0 td_bqty,0 td_sqty,";
                strsql = strsql + " 0,0 td_mainbrrate,0 td_mainbrrate,";
                strsql = strsql + " 0 td_servicetax,0.0000 td_closeprice,";
                strsql = strsql + " 91 td_sortlist,";
                strsql = strsql + " 'XX',round(Case When fb_postmrgyn = 'Y' then fb_margin2 else 0 end + Case When fb_postExpmrgyn = 'Y' then fb_Expmargin2 else 0 end,2),fb_exchange";
                strsql = strsql + " From #Tempdates11,Fbills,Client_master";
                strsql = strsql + " where fb_clientcd = cm_cd and fb_billdt = bd_dt";
                strsql = strsql + " and fb_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                strsql = strsql + " and fb_exchange = '" + strexchange + "' and fb_segment = '" + strSegment + "'";
                strsql = strsql + " and round(Case When fb_postmrgyn = 'Y' then fb_margin2 else 0 end + Case When fb_postExpmrgyn = 'Y' then fb_Expmargin2 else 0 end,2) <> 0";
                strsql = strsql + strCondition;
                mylib.ExecSQL(strsql, curCon);
                //  ''''till here

                strsql = "alter table #fobill add tx_billno numeric default(0) NOT NULL";
                mylib.ExecSQL(strsql, curCon);


                strsql = "update #fobill set tx_billno = fb_billno from #fobill,Fbills where fb_clientcd = tx_clientcd ";
                strsql = strsql + " and fb_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                strsql = strsql + (blnInterOP ? "" : " and fb_exchange = '" + strexchange + "' ");
                strsql = strsql + " and fb_segment = '" + strSegment + "'";
                strsql = strsql + " and fb_billdt = tx_dt ";
                mylib.ExecSQL(strsql, curCon);

                if (strDate != "" & strDate != null)
                {
                    strDate = " between '" + strDate + "' ";
                    strDate = strDate + " and '" + strDate + "'";
                }


                strsql = "select tx_sortlist,tx_dt,tx_billno,tx_controlflag,tx_clientcd,";
                strsql = strsql + " tx_seriesid,tx_desc,";
                strsql = strsql + " tx_bqty,tx_sqty,tx_rate,tx_closerate,tx_value,tx_brokerage,";
                strsql = strsql + " sm_sname,sm_desc,sm_productcd,sm_symbol,sm_expirydt,sm_strikeprice,";
                strsql = strsql + " sm_callput,sm_optionstyle,cm_name,cm_add1,cm_add2,cm_add3,cm_tele1,";
                strsql = strsql + " cm_tele2,cm_email, cm_sebino, cm_panno, cm_add4, cm_pincode, sm_prodtype,cm_familycd,cm_brboffcode , cm_subbroker ";
                strsql = strsql + " from #fobill,Series_master,Client_master";
                strsql = strsql + " where tx_clientcd = cm_cd and tx_seriesid = sm_seriesid " + HttpContext.Current.Session["LoginAccessOld"] + "";
                strsql = strsql + " and sm_exchange = tx_Exchange and sm_segment = '" + strSegment + "'";
                strsql = strsql + " and tx_controlflag < 10";

                if (blnWhere == false)
                {
                    if (strMode != "E")
                    {
                        // If chkBranchClients.Checked Then
                        // strsql = strsql & " and  (cm_billflag = 'A')"
                        // Else
                        // If cmbFormat.SelectedItem.Value = "B" Then
                        strsql = strsql + " and  (cm_billflag = 'Y' or cm_billflag = 'B' or cm_billflag = 'A')";
                        // Else
                        // strsql = strsql & " and  (cm_billflag = 'P' or cm_billflag = 'Y' or cm_billflag = 'A' )"
                        // End If
                    }
                    // End If
                }

                strsql = strsql + " union all";
                strsql = strsql + " select tx_sortlist,tx_dt,tx_billno,tx_controlflag,tx_clientcd,";
                strsql = strsql + " tx_seriesid,tx_desc,";
                strsql = strsql + " tx_bqty,tx_sqty,tx_rate,tx_closerate,tx_value,tx_brokerage,";
                strsql = strsql + " '' sm_sname,'' sm_desc,'' sm_productcd,'' sm_symbol,'' sm_expirydt,";
                strsql = strsql + " 0 sm_strikeprice,";
                strsql = strsql + " 'X' sm_callput,'X' sm_optionstyle,";
                strsql = strsql + " cm_name,cm_add1,cm_add2,cm_add3,cm_tele1,cm_tele2,cm_email, cm_sebino, cm_panno,cm_add4, cm_pincode,'EF' as sm_prodtype,cm_familycd,cm_brboffcode , cm_subbroker ";
                strsql = strsql + " from #fobill,Client_master";
                strsql = strsql + " where tx_clientcd = cm_cd " + HttpContext.Current.Session["LoginAccessOld"] + "";
                strsql = strsql + " and tx_controlflag >= 10";


                if (blnWhere == false)
                {
                    // If chkBranchClients.Checked Then
                    // strsql = strsql & " and  (cm_billflag = 'A')"
                    // Else
                    // If cmbFormat.SelectedItem.Value = "B" Then
                    strsql = strsql + " and  (cm_billflag = 'Y' or cm_billflag = 'B' or cm_billflag = 'A')";
                    // Else
                    // strsql = strsql & " and  (cm_billflag = 'P' or cm_billflag = 'Y' or cm_billflag = 'A')"
                    // End If
                    // End If
                }

                if (strMode == "E")
                {
                    strsql = strsql + " and cm_email <> ''";
                }

                strsql = strsql + " order by tx_clientcd,tx_dt,tx_sortlist,sm_symbol,tx_seriesid,tx_controlflag,tx_desc";

                //dt = mylib.OpenDataTable(strsql, curCon);

                DataTable dtFOBill = mylib.OpenDataTable(strsql, curCon);



                string strSQL1 = "Select cm_cd, cm_name, cm_add1, cm_add2, cm_add3, cm_panno, cm_add4, cm_pincode From Client_Master ";
                strSQL1 += " Where cm_cd = '" + Code + "'";
                DataTable dtclient = mylib.OpenDataTable(strSQL1, curCon);
                ClientMasterBillModel cmbill = new ClientMasterBillModel
                {
                    Code = Code,
                    Name = dtclient.Rows[0]["cm_name"].ToString().Trim(),
                    Add1 = dtclient.Rows[0]["cm_add1"].ToString().Trim(),
                    Add2 = dtclient.Rows[0]["cm_add2"].ToString().Trim(),
                    Add3 = dtclient.Rows[0]["cm_add3"].ToString().Trim(),
                    City = dtclient.Rows[0]["cm_add4"].ToString().Trim(),
                    PAN = dtclient.Rows[0]["cm_panno"].ToString().Trim(),
                    Pincode = dtclient.Rows[0]["cm_pincode"].ToString().Trim(),
                    //Settlement = strstlmnt.Trim(),
                    BillFrom = myutil.DbToDate(strDate),
                    BillTo = myutil.DbToDate(strDate)
                };

                try
                {
                    ulist = dtFOBill.AsEnumerable()
                .Select(row => new FOBillprintModel
                {
                    GetClientDetail = cmbill,
                    Date = row.Field<string>("tx_dt"),
                    Credit = row.Field<decimal>("tx_value"),
                    SellRate = row.Field<decimal>("tx_rate"),
                    SellQty = row.Field<decimal>("tx_sqty"),

                    ContractDescriptor = row.Field<string>("sm_sname"),
                    ClosingPr = row.Field<decimal>("tx_closerate"),

                    BuyQty = row.Field<decimal>("tx_bqty"),

                    BuyRate = row.Field<decimal>("tx_rate"),

                    Debit = row.Field<decimal>("tx_value"),

                    tax_desc = row.Field<string>("tx_desc"),

                    billno = row.Field<decimal>("tx_billno"),
                    sm_desc = row.Field<string>("sm_desc"),
                    tx_controlflag = row.Field<decimal>("tx_controlflag")

                }).ToList();
                }

                catch (Exception)
                {
                    throw;
                }
                finally
                {

                }
            }


            return ulist;
        }

        public DataTable GetMfBillPrint(string Code, string strOrderBy, string strDate, string strexchange, string strSegment)
        {


            LibraryModel mylib = new LibraryModel(true);
            UtilityModel myutil = new UtilityModel();
            List<FOBillprintModel> ulist = new List<FOBillprintModel>();
            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {
                curCon.Open();

                string strsql = "";
                strsql = strsql + "select Mcn_srno,MFS_BSchemeName,mtd_isin,Mtd_clientcd, cm_name, cm_email, cm_type, cm_gainloss, cm_jobloss,";
                strsql = strsql + " cm_billflag,  tqty,Mtd_rate,tvalue,MTd_Billdt,rectype, cm_groupcd,  cm_familycd,cm_add1, cm_add2, cm_add3,";
                strsql = strsql + " td_OrderTime, cm_add4, cm_pincode,cm_subbroker,cm_brboffcode,mtd_marketrate,brokerage,mtd_SrNo,Mtd_dt,MTD_Stlmnt ";
                strsql = strsql + " from vwMFBillRecord ,MFContract ";
                strsql = strsql + " where Mcn_companycode=mtd_companycode and Mcn_clientcd=Mtd_clientcd and Mcn_dt=Mtd_dt and MTd_Exchange ='" + Strings.Left(strexchange, 1) + "' ";
                strsql = strsql + " and   Mtd_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'  and MTd_Billdt='" + strDate + "'  and  mtd_clientcd = '" + Code + "'  ";
                strsql = strsql + " order by  Mtd_clientcd,rectype,MFS_BSchemeName  ";
                DataTable dtMFBill = mylib.OpenDataTable(strsql, curCon);
                if (dtMFBill.Rows.Count > 0)
                {
                    dtMFBill.Columns.Add("servicetax", typeof(System.Double));
                    dtMFBill.Columns.Add("charges", typeof(System.Double));

                    double dblservicetax = 0;
                    double dblcharges = 0;
                    for (int i = 0; i < dtMFBill.Rows.Count; i++)
                    {
                        DataTable dtcharges = mylib.OpenDataTable("select isnull(MTd_STT,0)MTd_STT,isnull(MTd_ServiceTax,0)MTd_ServiceTax from MFTrades Where Mtd_SrNo =" + Strings.Trim(dtMFBill.Rows[i]["mtd_srno"].ToString()), curCon);
                        if (dtcharges.Rows.Count > 0)
                        {
                            dblservicetax = Convert.ToDouble(dtcharges.Rows[0]["MTd_ServiceTax"]);
                            dblcharges = Convert.ToDouble(dtcharges.Rows[0]["MTd_STT"]);
                        }

                        dtcharges = null;
                        strsql = "select isnull(sum(MSh_Amount),0)MSh_Amount , isnull(sum(MSh_servicetax),0) MSh_servicetax from MFSpecialCharges Where mSh_RefNo = " + Strings.Trim(dtMFBill.Rows[i]["mtd_srno"].ToString());
                        dtcharges = mylib.OpenDataTable(strsql, curCon);
                        if (dtcharges.Rows.Count > 0)
                        {
                            dblservicetax = dblservicetax + Convert.ToDouble(dtcharges.Rows[0]["MSh_servicetax"]);
                            dblcharges = dblcharges + Convert.ToDouble(dtcharges.Rows[0]["MSh_Amount"]);
                        }
                        dtMFBill.Rows[i]["servicetax"] = dblservicetax;
                        dtMFBill.Rows[i]["charges"] = dblcharges;
                        dtMFBill.Rows[i]["MTd_Billdt"] = myutil.stod(dtMFBill.Rows[i]["MTd_Billdt"].ToString()).ToString("dd/MM/yyyy");
                        //dtMFBill.Rows.Add("servicetax", dblservicetax);
                        //dtMFBill.Rows.Add("charges", dblcharges);

                    }
                }

                return dtMFBill;

            }
        }
        public IEnumerable<ClientPositionModel> GetClientPositionReport(string Code = "", string ExchSegTplus = "", string ExchSegComm = "", string FDate = "", string TDate = "", string Report = "", string GroupBy = "", string Security = "", string SearchBy = "")

        {

            bool blnLoad = false;

            LibraryModel mylib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();

            if (FDate == "")
            {
                blnLoad = true;
                FDate = TDate;
                TDate = FDate;
            }
            else
            {
                //FDate = myutil.dtos(FDate);
                //TDate = myutil.dtos(TDate);
            }


            string strWhere = "";
            strSQL = "";
            strWhere += " and td_dt>='" + FDate + "' and td_dt<='" + TDate + "' ";
            if (Code != "")
            {
                switch (SearchBy)
                {
                    case "CL":
                        strWhere += " and cm_cd = '" + Code.Trim() + "'";
                        break;
                    case "GR":
                        strWhere += " and cm_groupcd = '" + Code.Trim() + "'";
                        break;
                    case "FM":
                        strWhere += " and cm_familycd = '" + Code.Trim() + "'";
                        break;
                    case "SB":
                        strWhere += " and cm_subbroker = '" + Code.Trim() + "'";
                        break;
                    case "BR":
                        strWhere += " and cm_brboffcode = '" + Code.Trim() + "'";
                        break;
                    case "SS":
                        strWhere += " and ss_cd = '" + Code.Trim() + "'";
                        break;
                    case "RR":
                        strWhere += " and cm_dpactno = '" + Code.Trim() + "'";
                        break;
                    case "XX":
                        strWhere += " and sm_symbol =  '" + Code.Trim() + "'";
                        break;
                }
            }

            if (GroupBy != "Commodity")
            {
                //strSQL += "select * from(";
                switch (Report)
                {
                    case "CC":
                        strSQL += "select  td_clientcd + ' ['  + Rtrim(cm_name) + ']' as [GroupByValue],";
                        break;
                    case "CN":
                        strSQL += "select  Rtrim(cm_name) + ' ['  + td_clientcd + ']' as [GroupByValue],";
                        break;
                    case "SW":
                        strSQL += " select Rtrim(ss_name) + ' ['  + td_scripcd + ']'  as [GroupByValue] ,";
                        break;
                    case "GW":
                        strSQL += "select  Rtrim(gr_desc) + ' ['  + cm_groupcd + ']' as [GroupByValue],";
                        break;
                    case "FW":
                        strSQL += "select  Rtrim(fm_desc) + ' ['  + cm_familycd + ']' as [GroupByValue],";
                        break;
                    case "BW":
                        strSQL += "select  Rtrim(bm_branchname) + ' ['  + cm_brboffcode + ']' as [GroupByValue],";
                        break;
                    case "DW":
                        strSQL += "select  convert(char,convert(datetime,td_dt,103),103) as [GroupByValue],";
                        break;
                }

                strSQL += " Rtrim(cm_name) + '['  + td_clientcd + ']' as [Code],rtrim(ss_name) + '['+rtrim(td_scripcd)+']' as ScriptCode,td_stlmnt,td_clientcd,cm_name,convert(char,convert(datetime,td_dt,103),103) as td_dt,";
                strSQL += " td_scripcd,ss_name,isnull(sr_nodelyn,'N') sr_nodelyn,";
                strSQL += " Convert(decimal(15,0), sum(td_bqty)) 'tbqty', Convert(decimal(15,0), sum(td_sqty)) 'tsqty',";
                strSQL += " cast(sum(td_bqty * td_rate) as decimal(15,2)) 'tbvalue',";
                strSQL += " cast(sum(td_sqty * td_rate) as decimal(15,2)) 'tsvalue',";
                strSQL += " Convert(decimal(15,0), sum(td_bqty - td_sqty)) 'netqty',";
                strSQL += " cast(sum((td_sqty - td_bqty) * td_rate) as decimal(15,2)) 'netvalue','0' as Salesavg,'0' as buyavg,'0' as avgrate,";
                strSQL += " sum(case sr_nodelyn when 'Y' then (td_bqty - td_sqty) else 0 end) 'cfqty',";
                strSQL += " sum(case sr_nodelyn when 'Y' then (td_sqty - td_bqty) * case se_exchange when 'B' then isnull(sr_makingrate,0.0000) else td_rate end else 0 end) 'cfvalue',";
                strSQL += " sum(case sr_nodelyn when 'Y' then 0 else (td_bqty - td_sqty) end) 'delqty',";
                strSQL += " sum(case sr_nodelyn when 'Y' then 0 else (td_sqty - td_bqty)*(td_rate) end) 'delvalue' , left(td_stlmnt,1) + 'C' ExchSeg, convert(char,td_dt,112) td_dt2 ,1 'sm_multiplier'";
                strSQL += " from Trx a left outer join Std_rates on sr_stlmnt = td_stlmnt and sr_scripcd = td_scripcd ,Client_master,Securities,Settlements,CompanyExchangesegments,Group_master,Family_master, Branch_master";
                strSQL += " where CES_CompanyCd = '" + HttpContext.Current.Session["CompanyCode"] + "' and td_companycode+left(td_stlmnt,1)+'C'=ces_cd ";
                strSQL += " and td_clientcd = cm_cd and cm_groupcd=gr_cd and cm_familycd=fm_cd and cm_brboffcode=bm_branchcd " + strWhere + HttpContext.Current.Session["LoginAccessOld"];
                // strSQL += " and exists " + myutil.LoginAccessOld("td_clientcd");
                if (!blnLoad)
                {
                    strSQL += " and left(td_stlmnt,1)+'c' in " + ExchSegTplus;
                }
                if (Security != "" && GroupBy == "Security")
                    strSQL += " and ss_cd ='" + (Security.Trim()) + "'";

                strSQL += " and cm_cd = td_clientcd and td_scripcd = ss_cd  and td_stlmnt = se_stlmnt ";
                strSQL += " group by td_stlmnt, td_clientcd, cm_name, td_scripcd, ss_name, sr_nodelyn, sr_makingrate,td_dt, ";
                strSQL += " gr_desc, cm_groupcd, fm_desc, cm_familycd, bm_branchname, cm_brboffcode  ";
                strSQL += " union all ";

                switch (Report)
                {
                    case "CC":
                        strSQL += "select  td_clientcd + ' ['  + Rtrim(cm_name) + ']' as [GroupByValue],";
                        break;
                    case "CN":
                        strSQL += "select  Rtrim(cm_name) + ' ['  + td_clientcd + ']' as [GroupByValue],";
                        break;
                    case "SW":
                        strSQL += " select Rtrim(sm_desc) + ' ['  + Rtrim(Ltrim(convert(char,td_seriesid))) + ']'  as [GroupByValue] ,";
                        break;
                    case "GW":
                        strSQL += "select  Rtrim(gr_desc) + ' ['  + cm_groupcd + ']' as [GroupByValue],";
                        break;
                    case "FW":
                        strSQL += "select  Rtrim(fm_desc) + ' ['  + cm_familycd + ']' as [GroupByValue],";
                        break;
                    case "BW":
                        strSQL += "select  Rtrim(bm_branchname) + ' ['  + cm_brboffcode + ']' as [GroupByValue],";
                        break;
                    case "DW":
                        strSQL += "select  convert(char,convert(datetime,td_dt,103),103) as [GroupByValue],";
                        break;
                }

                strSQL += " Rtrim(cm_name) + '['  + td_clientcd + ']' as [Code],rtrim(sm_desc) + '['+ Rtrim(Ltrim(convert(char,td_seriesid)))+']' as ScriptCode,";
                strSQL += " Rtrim(CES_Exchange)+'/'+CES_Segment td_stlmnt,td_clientcd,cm_name,convert(char,convert(datetime,td_dt,103),103) as td_dt, Rtrim(Ltrim(convert(char,td_seriesid))) td_seriesid,sm_desc,'N'sr_nodelyn, ";
                strSQL += " Convert(decimal(15,0), sum(td_bqty)) 'tbqty', Convert(decimal(15,0), sum(td_sqty)) 'tsqty', cast(sum(td_bqty * td_rate*sm_multiplier) as decimal(15,2)) 'tbvalue', cast(sum(td_sqty * td_rate *sm_multiplier) as decimal(15,2)) 'tsvalue',";
                strSQL += " Convert(decimal(15,0), sum(td_bqty - td_sqty)) 'netqty', cast(sum((td_sqty - td_bqty) * td_rate*sm_multiplier) as decimal(15,2)) 'netvalue','0' as Salesavg,'0' as buyavg,'0' as avgrate, ";
                strSQL += " 0 'cfqty', 0 'cfvalue', 0 'delqty', 0 'delvalue', td_exchange+td_Segment, convert(char,td_dt,112) td_dt2 ,sm_multiplier";
                strSQL += " from Trades a,Client_master,series_master,CompanyExchangesegments,Group_master,Family_master, Branch_master";
                strSQL += " where CES_CompanyCd = '" + HttpContext.Current.Session["CompanyCode"] + "' and td_clientcd = cm_cd and cm_groupcd=gr_cd and cm_familycd=fm_cd and cm_brboffcode=bm_branchcd ";
                if (!blnLoad)
                {
                    strSQL += " and td_exchange+td_segment in " + ExchSegTplus;
                }
                // strSQL += strWhere + " and exists " + myutil.LoginAccess("td_clientcd");
                strSQL += strWhere + HttpContext.Current.Session["LoginAccessOld"];
                if (Security.Trim() != "" && GroupBy == "Security")
                    strSQL += " and sm_symbol = (select ss_NSYMBOL from securities Where ss_cd ='" + Security.Trim() + "')";


                strSQL += " and cm_cd = td_clientcd and td_exchange = sm_exchange and td_segment = sm_segment and td_seriesid = sm_seriesid and td_companycode+td_exchange+td_Segment=CES_Cd group by";
                strSQL += " Rtrim(CES_Exchange)+'/'+CES_Segment, td_clientcd, cm_name, td_seriesid, sm_desc, td_dt,td_exchange+td_Segment,  ";
                strSQL += " gr_desc, cm_groupcd, fm_desc, cm_familycd, bm_branchname, cm_brboffcode ,sm_multiplier ";
            }
            string sql = "";
            string[] Commex = new string[3];
            string StrCommexConn = "";
            sql = "Select OP_Server,OP_DataBase,OP_Owner,OP_User from Other_Products Where OP_Product = 'Commex' and op_Status = 'A'";
            DataTable dtCommex = mylib.OpenDataTable(sql);
            if (dtCommex.Rows.Count > 0)
            {
                DataRow drCommex = dtCommex.Rows[0];
                Commex = new string[3];
                Commex[0] = drCommex["OP_Server"].ToString().Trim();
                Commex[1] = drCommex["OP_DataBase"].ToString().Trim();
                Commex[2] = drCommex["OP_Owner"].ToString().Trim();
                StrCommexConn = "[" + Commex[0] + "]" + "." + Commex[1];
            }
            if (Commex[1] != "" && Commex[0] != "" && ExchSegComm != "" & !(GroupBy == "Security" && Security != ""))
            {
                if (strSQL != "")
                { strSQL += " union all "; }
                else
                {
                    strSQL += "select * from(";
                }

                switch (Report)
                {
                    case "CC":
                        strSQL += "select  td_clientcd + ' ['  + Rtrim(cm_name) + ']' as [GroupByValue],";
                        break;
                    case "CN":
                        strSQL += "select  Rtrim(cm_name) + ' ['  + td_clientcd + ']' as [GroupByValue],";
                        break;
                    case "SW":
                        strSQL += "select Rtrim(sm_desc) + ' ['  + Rtrim(Ltrim(convert(char,td_seriesid))) + ']'  as [GroupByValue] ,";
                        break;
                    case "GW":
                        strSQL += "select  Rtrim(gr_desc) + ' ['  + cm_groupcd + ']' as [GroupByValue],";
                        break;
                    case "FW":
                        strSQL += "select  Rtrim(fm_desc) + ' ['  + cm_familycd + ']' as [GroupByValue],";
                        break;
                    case "BW":
                        strSQL += "select  Rtrim(bm_branchname) + ' ['  + cm_brboffcode + ']' as [GroupByValue],";
                        break;
                    case "DW":
                        strSQL += "select  convert(char,convert(datetime,td_dt,103),103) as [GroupByValue],";
                        break;
                }

                strSQL += " Rtrim(cm_name) + '['  + td_clientcd + ']' as [Code],rtrim(sm_desc) + '['+Rtrim(Ltrim(convert(char,td_seriesid)))+']' as ScriptCode,";
                strSQL += " Rtrim(CES_Exchange)+'/'+'Comm' td_stlmnt,td_clientcd,cm_name,convert(char,convert(datetime,td_dt,103),103) as td_dt,Rtrim(Ltrim(convert(char,td_seriesid))) td_scripcd,sm_desc ss_name,'N'sr_nodelyn, ";
                strSQL += " Convert(decimal(15,0), sum(td_bqty)) 'tbqty', Convert(decimal(15,0), sum(td_sqty)) 'tsqty', cast(sum(td_bqty * td_rate*sm_multiplier) as decimal(15,2)) 'tbvalue', cast(sum(td_sqty * td_rate *sm_multiplier) as decimal(15,2)) 'tsvalue',";
                strSQL += " Convert(decimal(15,0), sum(td_bqty - td_sqty)) 'netqty', cast(sum((td_sqty - td_bqty) * td_rate*sm_multiplier) as decimal(15,2)) 'netvalue','0' as Salesavg,'0' as buyavg,'0' as avgrate, ";
                strSQL += " 0 'cfqty', 0 'cfvalue', 0 'delqty', 0 'delvalue', td_exchange+'X' ExchSeg, convert(char,td_dt,112) td_dt2 ,sm_multiplier";
                strSQL += " from " + StrCommexConn + ".dbo.Trades a," + StrCommexConn + ".dbo.Client_master," + StrCommexConn + ".dbo.series_master," + StrCommexConn + ".dbo.CompanyExchangesegments," + StrCommexConn + ".dbo.Group_master," + StrCommexConn + ".dbo.Family_master, " + StrCommexConn + ".dbo.Branch_master";
                strSQL += " where td_clientcd = cm_cd and cm_groupcd=gr_cd and cm_familycd=fm_cd and cm_brboffcode=bm_branchcd ";
                if (!blnLoad)
                {
                    strSQL += " and td_exchange in " + ExchSegComm.Replace("X", "") + "";
                }
                if (Code != "" && GroupBy == "Commodity")
                    strSQL += " and sm_symbol = '" + Code + "'";

                // strSQL += " " + strWhere + " and exists " + myutil.LoginAccess("td_clientcd");
                strSQL += " " + strWhere + HttpContext.Current.Session["LoginAccessOld"];
                strSQL += "and cm_cd = td_clientcd and td_exchange = sm_exchange and td_seriesid = sm_seriesid and td_companycode+td_exchange+'F'=CES_Cd group by";
                strSQL += " Rtrim(CES_Exchange)+'/'+'Comm', td_clientcd, cm_name, td_seriesid, sm_desc, td_dt,td_exchange+'X',  ";
                strSQL += " gr_desc, cm_groupcd, fm_desc, cm_familycd, bm_branchname, cm_brboffcode,sm_multiplier  ";
            }

            if ("CC,CN,SW".Contains(Report))
                strSQL += " Order by GroupByValue,  convert(char,td_dt,112) ";
            else if ("BW,GW,FW".Contains(Report))
                strSQL += " Order by GroupByValue,Code,ScriptCode, convert(char,td_dt,112) ";
            else if ("DW".Contains(Report))
                //  strSQL += ")a Order by convert(datetime,GroupByValue,103),Code,ScriptCode  ";
                strSQL += " Order by GroupByValue,Code,ScriptCode  ";


            DataTable dtCLPosition = mylib.OpenDataTable(strSQL);

            if (dtCLPosition.Rows.Count > 0)
            {
                var loopTo = dtCLPosition.Rows.Count - 1;
                for (int i = 0; i <= loopTo; i++)
                {
                    if (Convert.ToInt64(dtCLPosition.Rows[i]["tsqty"]) != 0)
                    {
                        dtCLPosition.Rows[i]["salesavg"] = Convert.ToDecimal((Convert.ToDecimal(dtCLPosition.Rows[i]["tsvalue"])) / (Convert.ToDecimal(dtCLPosition.Rows[i]["tsqty"])) / (Convert.ToDecimal(dtCLPosition.Rows[i]["sm_multiplier"]))).ToString("0.00"); // Sales Average Rate
                    }

                    if (Convert.ToInt64(dtCLPosition.Rows[i]["tbqty"]) != 0)
                    {
                        dtCLPosition.Rows[i]["buyavg"] = Convert.ToDecimal((Convert.ToDecimal(dtCLPosition.Rows[i]["tbvalue"])) / (Convert.ToDecimal(dtCLPosition.Rows[i]["tbqty"])) / (Convert.ToDecimal(dtCLPosition.Rows[i]["sm_multiplier"]))).ToString("0.00"); // Buy Average Rate
                    }

                    if (Convert.ToInt64(dtCLPosition.Rows[i]["netqty"]) != 0)
                    {
                        dtCLPosition.Rows[i]["avgrate"] = Convert.ToDecimal((Convert.ToDecimal(dtCLPosition.Rows[i]["netvalue"]) / (Convert.ToDecimal(dtCLPosition.Rows[i]["netqty"])) / (Convert.ToDecimal(dtCLPosition.Rows[i]["sm_multiplier"])))).ToString("0.00"); // Net Average Rate
                    }
                }
            }
            List<ClientPositionModel> dpview = new List<ClientPositionModel>();
            dpview = dtCLPosition.AsEnumerable()
            .Select(row => new ClientPositionModel
            {
                GroupName = row.Field<string>("GroupByValue"),
                Client = row.Field<string>("td_clientcd"),
                CLName = row.Field<string>("cm_name"),
                Scrip = row.Field<string>("td_scripcd"),
                ScripNm = row.Field<string>("ss_name"),
                Date = row.Field<string>("td_dt"),
                StlmntExch = row.Field<string>("td_stlmnt"),
                BuyQty = row.Field<decimal>("tbqty"),
                BuyAmt = row.Field<decimal>("tbvalue"),
                BuyAvg = row.Field<string>("buyAvg"),
                SalesQty = row.Field<decimal>("tsqty"),
                SalesAmt = row.Field<decimal>("tsvalue"),
                SalesAvg = row.Field<string>("salesAvg"),
                NetQty = row.Field<decimal>("netqty"),
                NetAmt = row.Field<decimal>("netvalue"),
                NetAvg = row.Field<string>("avgRate"),
                ExchSeg = row.Field<string>("ExchSeg"),


            }).ToList();

            return dpview;
        }

        public DataTable GetTradeList(string code, string strExchSeg, string strStlMnt, string strScrCd, string strDate, string ClientName, string strScrname)
        {

            string strSql = "";
            LibraryModel myLib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            UtilityDBModel mydbutil = new UtilityDBModel();
            SqlConnection SQLConnComex = mydbutil.commexTemp_conn("Commex");
            DataTable dt = new DataTable();


            if (Strings.Right(strExchSeg.Trim(), 1) == "C")
            {
                //ViewState["strStlmnt"] = "Settlement: " + strStlMnt;
                strSql = "select td_time,td_tradeid,td_orderid,td_sqty,td_bqty,td_marketrate,td_brokerage,td_rate, td_dt,(td_sqty-td_bqty)*td_rate 'Value' ";
                strSql = strSql + "from trx With(index(idx_trx_stlmnt_clientcd)) ";
                strSql = strSql + "where td_stlmnt='" + strStlMnt + "' and td_clientcd='" + code + " ' and td_scripcd='" + strScrCd + "' and td_dt='" + myutil.dtos(strDate) + "'  order by td_time";
            }
            else if (Strings.Right(strExchSeg.Trim(), 1) == "X")
            {

                //ViewState["strDate"] = "Date: " + strDate;
                strSql = "select td_time,td_tradeid,td_orderid,td_sqty,td_bqty,td_marketrate,td_brokerage,td_rate,td_dt,(td_sqty-td_bqty)*td_rate*sm_multiplier 'Value'";
                strSql = strSql + " from [" + SQLConnComex.DataSource + "]." + SQLConnComex.Database + ".dbo.Trades,[" + SQLConnComex.DataSource + "]." + SQLConnComex.Database + ".dbo.series_master ";
                strSql = strSql + " where sm_exchange = td_Exchange and td_seriesid = sm_seriesid  and td_exchange + 'X'= '" + strExchSeg + "' and td_clientcd='" + code + " ' and td_seriesid='" + strScrCd + "' and td_dt='" + myutil.dtos(strDate) + "' order by td_time";
            }
            else
            {
                // ViewState["strDate"] = "Date: " + strDate;
                strSql = "select td_time,td_tradeid,td_orderid,td_sqty,td_bqty,td_marketrate,td_brokerage,td_rate,td_dt,(td_sqty-td_bqty)*td_rate*sm_multiplier 'Value'";
                strSql = strSql + " from Trades With(index(idx_trades_dt_clientcd)),series_master ";
                strSql = strSql + " where sm_exchange = td_Exchange and td_segment = sm_segment and td_seriesid = sm_seriesid and td_exchange+td_segment = '" + strExchSeg + "' and td_clientcd='" + code + " ' and td_seriesid='" + strScrCd + "' and td_dt='" + myutil.dtos(strDate) + "' order by td_time";
            }
            dt = myLib.OpenDataTable(strSql);

            return dt;

        }

        public double mfnRoundoffCashbill(string strClient, string strRefDt, double dblBillamount, string strExchange)
        {
            string strsql;
            LibraryModel mylib = new LibraryModel();
            UtilityDBModel mydbutil = new UtilityDBModel();
            string strGroup = "";
            string strFamily = "";
            dblBillamount = Math.Round(dblBillamount, 4);

            strsql = "select cm_groupcd,cm_familycd from Client_master where cm_cd = '" + strClient + "'";
            DataTable dt = mylib.OpenDataTable(strsql);

            if (dt.Rows.Count <= 0)
            {
                return mfnCeil(dblBillamount, 4, 2);
            }
            else
            {
                strGroup = dt.Rows[0]["cm_groupcd"].ToString().Trim();
                strFamily = dt.Rows[0]["cm_familycd"].ToString().Trim();
            }

            if (dblBillamount == 0 || strClient.Trim() == "")
            {
                return mfnCeil(dblBillamount, 4, 2);
            }

            strsql = "select cg_ledgercd,(case cd_ratep when 0 then 1 else cd_ratep end) cd_ratep from Client_charges,Charges_master";
            strsql += " where cg_companycode = cd_companycode and cg_exchange = cd_exchange and cd_cd = cg_cd and cd_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
            strsql += " and cd_exchange = '" + strExchange + "' and cg_cd = '00'";
            strsql += " and (cd_clientcd + cd_groupcd + cd_familycd + cd_fromdt)";
            strsql += " = (select max(cd_clientcd + cd_groupcd + cd_familycd + cd_fromdt)";
            strsql += " from Client_charges where cd_cd = '00' and cd_companycode = cg_companycode";
            strsql += " and cd_exchange = cg_exchange and (cd_clientcd ='" + strClient + "'";
            strsql += " or cd_groupcd = '" + strGroup + "' or cd_familycd = '" + strFamily + "'";
            strsql += " or (cd_clientcd + cd_groupcd + cd_familycd) ='')";
            strsql += " and cd_fromdt <= '" + (strRefDt) + "')";
            dt = mylib.OpenDataTable(strsql);

            if (dt.Rows.Count <= 0)
            {
                return mfnCeil(dblBillamount, 4, 2);
            }
            else
            {
                if (dt.Rows[0]["cd_ratep"] != DBNull.Value)
                {
                    if (Conversion.Val(dt.Rows[0]["cd_ratep"]) == 1)
                    {
                        dblBillamount = mfnCeil(dblBillamount, 4, 0);
                    }
                    else
                    {
                        dblBillamount = mfnCeil(dblBillamount / (double)dt.Rows[0]["cd_ratep"], 4, 0) * (double)dt.Rows[0]["cd_ratep"];
                    }
                }
            }

            return dblBillamount;
        }

        public double mfnCeil(double dblAmount, int eType, int NoOfDigits = 0)
        {
            int intLastdigit;
            long dblTemp;
            double dblMod, dblActual;

            dblTemp = mfnTruncate(dblAmount, 0);
            if (dblTemp != dblAmount)
            {
                switch (eType)
                {
                    case 1:
                        {
                            dblAmount = dblTemp + 1;
                            break;
                        }

                    case 2:
                        {
                            dblAmount = dblTemp;
                            break;
                        }

                    case 3:
                        {
                            dblMod = dblAmount - dblTemp;
                            if (dblMod < 0.5)
                            {
                                dblAmount = dblTemp;
                            }
                            else
                            {
                                dblAmount = dblTemp + 1;
                            }
                            break;
                        }

                    case 0:
                        {
                            dblAmount = Math.Round(dblAmount, 2);
                            break;
                        }

                    case 4:
                        {
                            dblActual = dblAmount * Conversion.Val("1" + Strings.StrDup(NoOfDigits, "0"));
                            if (Strings.InStr(1, Convert.ToString(dblActual), ".") > 0)
                            {
                                intLastdigit = Convert.ToInt32(Strings.Mid(Convert.ToString(dblActual), Strings.InStr(1, Convert.ToString(dblActual), ".") + 1, 1));
                            }
                            else
                            {
                                intLastdigit = 0;
                            }
                            if (intLastdigit >= 5)
                            {
                                dblActual = mfnTruncate(dblActual, 0);
                                dblActual = Math.Sign(dblActual) * (Math.Abs(dblActual) + 1);
                                dblActual = dblActual / Conversion.Val("1" + Strings.StrDup(NoOfDigits, "0"));
                            }
                            else
                            {
                                dblActual = mfnTruncate(dblActual, 0);
                                dblActual = dblActual / Conversion.Val("1" + Strings.StrDup(NoOfDigits, "0"));
                            }
                            dblAmount = dblActual;
                            break;
                        }
                }
            }
            return dblAmount;
        }

        public long mfnTruncate(double dblamt, int intDigit)
        {
            long dblCutoff, lngTempDiff;
            double dblDiff;
            dblDiff = 0;
            dblCutoff = Convert.ToInt64(Conversion.Val("1" + Strings.StrDup(intDigit, "0")));
            dblDiff = dblamt * dblCutoff;
            if (Strings.InStr(1, Convert.ToString(dblDiff), ".") > 0)
            {
                lngTempDiff = Convert.ToInt64(Strings.Left(dblDiff.ToString(), Strings.InStr(1, Convert.ToString(dblDiff), ".") - 1));
                lngTempDiff = lngTempDiff / dblCutoff;
            }
            else
            {
                lngTempDiff = Convert.ToInt64(dblDiff) / dblCutoff;
            }
            return lngTempDiff;
        }


        //public IEnumerable<ClientPositionModel> GetClientPositionReport(string Code = "", string ExchSegTplus = "", string ExchSegComm = "", string FDate = "", string TDate = "", string Report = "", string GroupBy = "", string Security = "", string SearchBy = "")
        //{

        //    bool blnLoad = false;

        //    LibraryModel mylib = new LibraryModel();
        //    UtilityModel myutil = new UtilityModel();

        //    if (FDate == "")
        //    {
        //        blnLoad = true;
        //        FDate = TDate;
        //        TDate = FDate;
        //    }
        //    else
        //    {
        //        FDate = myutil.dtos(FDate);
        //        TDate = myutil.dtos(TDate);
        //    }


        //    string strWhere = "";
        //    strSQL = "";
        //    strWhere += " and td_dt>='" + FDate + "' and td_dt<='" + TDate + "' ";
        //    if (Code != "")
        //    {
        //        switch (SearchBy)
        //        {
        //            case "CL":
        //                strWhere += " and cm_cd = '" + Code.Trim() + "'";
        //                break;
        //            case "GR":
        //                strWhere += " and cm_groupcd = '" + Code.Trim() + "'";
        //                break;
        //            case "FM":
        //                strWhere += " and cm_familycd = '" + Code.Trim() + "'";
        //                break;
        //            case "SB":
        //                strWhere += " and cm_subbroker = '" + Code.Trim() + "'";
        //                break;
        //            case "BR":
        //                strWhere += " and cm_brboffcode = '" + Code.Trim() + "'";
        //                break;
        //            case "SS":
        //                strWhere += " and ss_cd = '" + Code.Trim() + "'";
        //                break;
        //            case "RR":
        //                strWhere += " and cm_dpactno = '" + Code.Trim() + "'";
        //                break;
        //            case "XX":
        //                strWhere += " and sm_symbol =  '" + Code.Trim() + "'";
        //                break;
        //        }
        //    }

        //    if (GroupBy != "Commodity")
        //    {
        //        switch (Report)
        //        {
        //            case "CC":
        //                strSQL += "select  td_clientcd + ' ['  + Rtrim(cm_name) + ']' as [GroupByValue],";
        //                break;
        //            case "CN":
        //                strSQL += "select  Rtrim(cm_name) + ' ['  + td_clientcd + ']' as [GroupByValue],";
        //                break;
        //            case "SW":
        //                strSQL += " select Rtrim(ss_name) + ' ['  + td_scripcd + ']'  as [GroupByValue] ,";
        //                break;
        //            case "GW":
        //                strSQL += "select  Rtrim(gr_desc) + ' ['  + cm_groupcd + ']' as [GroupByValue],";
        //                break;
        //            case "FW":
        //                strSQL += "select  Rtrim(fm_desc) + ' ['  + cm_familycd + ']' as [GroupByValue],";
        //                break;
        //            case "BW":
        //                strSQL += "select  Rtrim(bm_branchname) + ' ['  + cm_brboffcode + ']' as [GroupByValue],";
        //                break;
        //            case "DW":
        //                strSQL += "select  convert(char,convert(datetime,td_dt,103),103) as [GroupByValue],";
        //                break;
        //        }

        //        strSQL += " Rtrim(cm_name) + '['  + td_clientcd + ']' as [Code],rtrim(ss_name) + '['+rtrim(td_scripcd)+']' as ScriptCode,td_stlmnt,td_clientcd,cm_name,convert(char,convert(datetime,td_dt,103),103) as td_dt,";
        //        strSQL += " td_scripcd,ss_name,isnull(sr_nodelyn,'N') sr_nodelyn,";
        //        strSQL += " Convert(decimal(15,0), sum(td_bqty)) 'tbqty', Convert(decimal(15,0), sum(td_sqty)) 'tsqty',";
        //        strSQL += " cast(sum(td_bqty * td_rate) as decimal(15,2)) 'tbvalue',";
        //        strSQL += " cast(sum(td_sqty * td_rate) as decimal(15,2)) 'tsvalue',";
        //        strSQL += " Convert(decimal(15,0), sum(td_bqty - td_sqty)) 'netqty',";
        //        strSQL += " cast(sum((td_sqty - td_bqty) * td_rate) as decimal(15,2)) 'netvalue','0' as Salesavg,'0' as buyavg,'0' as avgrate,";
        //        strSQL += " sum(case sr_nodelyn when 'Y' then (td_bqty - td_sqty) else 0 end) 'cfqty',";
        //        strSQL += " sum(case sr_nodelyn when 'Y' then (td_sqty - td_bqty) * case se_exchange when 'B' then isnull(sr_makingrate,0.0000) else td_rate end else 0 end) 'cfvalue',";
        //        strSQL += " sum(case sr_nodelyn when 'Y' then 0 else (td_bqty - td_sqty) end) 'delqty',";
        //        strSQL += " sum(case sr_nodelyn when 'Y' then 0 else (td_sqty - td_bqty)*(td_rate) end) 'delvalue' , left(td_stlmnt,1) + 'C' ExchSeg, convert(char,td_dt,112) td_dt2 ,1 'sm_multiplier'";
        //        strSQL += " from Trx a left outer join Std_rates on sr_stlmnt = td_stlmnt and sr_scripcd = td_scripcd ,Client_master,Securities,Settlements,CompanyExchangesegments,Group_master,Family_master, Branch_master";
        //        strSQL += " where CES_CompanyCd = '" + HttpContext.Current.Session["CompanyCode"] + "' and td_companycode+left(td_stlmnt,1)+'C'=ces_cd ";
        //        strSQL += " and td_clientcd = cm_cd and cm_groupcd=gr_cd and cm_familycd=fm_cd and cm_brboffcode=bm_branchcd " + strWhere;
        //        strSQL += " and exists " + myutil.LoginAccess("td_clientcd");
        //        if (!blnLoad)
        //        {
        //            strSQL += " and left(td_stlmnt,1)+'c' in " + ExchSegTplus;
        //        }
        //        if (Security != "" && GroupBy == "Security")
        //            strSQL += " and ss_cd ='" + (Security.Trim()) + "'";

        //        strSQL += " and cm_cd = td_clientcd and td_scripcd = ss_cd  and td_stlmnt = se_stlmnt ";
        //        strSQL += " group by td_stlmnt, td_clientcd, cm_name, td_scripcd, ss_name, sr_nodelyn, sr_makingrate,td_dt, ";
        //        strSQL += " gr_desc, cm_groupcd, fm_desc, cm_familycd, bm_branchname, cm_brboffcode  ";
        //        strSQL += " union all ";

        //        switch (Report)
        //        {
        //            case "CC":
        //                strSQL += "select  td_clientcd + ' ['  + Rtrim(cm_name) + ']' as [GroupByValue],";
        //                break;
        //            case "CN":
        //                strSQL += "select  Rtrim(cm_name) + ' ['  + td_clientcd + ']' as [GroupByValue],";
        //                break;
        //            case "SW":
        //                strSQL += " select Rtrim(sm_desc) + ' ['  + Rtrim(Ltrim(convert(char,td_seriesid))) + ']'  as [GroupByValue] ,";
        //                break;
        //            case "GW":
        //                strSQL += "select  Rtrim(gr_desc) + ' ['  + cm_groupcd + ']' as [GroupByValue],";
        //                break;
        //            case "FW":
        //                strSQL += "select  Rtrim(fm_desc) + ' ['  + cm_familycd + ']' as [GroupByValue],";
        //                break;
        //            case "BW":
        //                strSQL += "select  Rtrim(bm_branchname) + ' ['  + cm_brboffcode + ']' as [GroupByValue],";
        //                break;
        //            case "DW":
        //                strSQL += "select  convert(char,convert(datetime,td_dt,103),103) as [GroupByValue],";
        //                break;
        //        }

        //        strSQL += " Rtrim(cm_name) + '['  + td_clientcd + ']' as [Code],rtrim(sm_desc) + '['+ Rtrim(Ltrim(convert(char,td_seriesid)))+']' as ScriptCode,";
        //        strSQL += " Rtrim(CES_Exchange)+'/'+CES_Segment td_stlmnt,td_clientcd,cm_name,convert(char,convert(datetime,td_dt,103),103) as td_dt, Rtrim(Ltrim(convert(char,td_seriesid))) td_seriesid,sm_desc,'N'sr_nodelyn, ";
        //        strSQL += " Convert(decimal(15,0), sum(td_bqty)) 'tbqty', Convert(decimal(15,0), sum(td_sqty)) 'tsqty', cast(sum(td_bqty * td_rate*sm_multiplier) as decimal(15,2)) 'tbvalue', cast(sum(td_sqty * td_rate *sm_multiplier) as decimal(15,2)) 'tsvalue',";
        //        strSQL += " Convert(decimal(15,0), sum(td_bqty - td_sqty)) 'netqty', cast(sum((td_sqty - td_bqty) * td_rate*sm_multiplier) as decimal(15,2)) 'netvalue','0' as Salesavg,'0' as buyavg,'0' as avgrate, ";
        //        strSQL += " 0 'cfqty', 0 'cfvalue', 0 'delqty', 0 'delvalue', td_exchange+td_Segment, convert(char,td_dt,112) td_dt2 ,sm_multiplier";
        //        strSQL += " from Trades a,Client_master,series_master,CompanyExchangesegments,Group_master,Family_master, Branch_master";
        //        strSQL += " where CES_CompanyCd = '" + HttpContext.Current.Session["CompanyCode"] + "' and td_clientcd = cm_cd and cm_groupcd=gr_cd and cm_familycd=fm_cd and cm_brboffcode=bm_branchcd ";
        //        if (!blnLoad)
        //        {
        //            strSQL += " and td_exchange+td_segment in " + ExchSegTplus;
        //        }
        //        strSQL += strWhere + " and exists " + myutil.LoginAccess("td_clientcd");
        //        if (Security.Trim() != "" && GroupBy == "Security")
        //            strSQL += " and sm_symbol = (select ss_NSYMBOL from securities Where ss_cd ='" + Security.Trim() + "')";


        //        strSQL += " and cm_cd = td_clientcd and td_exchange = sm_exchange and td_segment = sm_segment and td_seriesid = sm_seriesid and td_companycode+td_exchange+td_Segment=CES_Cd group by";
        //        strSQL += " Rtrim(CES_Exchange)+'/'+CES_Segment, td_clientcd, cm_name, td_seriesid, sm_desc, td_dt,td_exchange+td_Segment,  ";
        //        strSQL += " gr_desc, cm_groupcd, fm_desc, cm_familycd, bm_branchname, cm_brboffcode ,sm_multiplier ";
        //    }
        //    string sql = "";
        //    string[] Commex = new string[3];
        //    string StrCommexConn = "";
        //    sql = "Select OP_Server,OP_DataBase,OP_Owner,OP_User from Other_Products Where OP_Product = 'Commex' and op_Status = 'A'";
        //    DataTable dtCommex = mylib.OpenDataTable(sql);
        //    if (dtCommex.Rows.Count > 0)
        //    {
        //        DataRow drCommex = dtCommex.Rows[0];
        //        Commex = new string[3];
        //        Commex[0] = drCommex["OP_Server"].ToString().Trim();
        //        Commex[1] = drCommex["OP_DataBase"].ToString().Trim();
        //        Commex[2] = drCommex["OP_Owner"].ToString().Trim();
        //        StrCommexConn = "[" + Commex[0] + "]" + "." + Commex[1];
        //    }
        //    if (Commex[1] != "" && Commex[0] != "" && ExchSegComm != "" && (GroupBy == "Security" & Code != ""))
        //    {
        //        if (strSQL != "")
        //            strSQL += " union all ";

        //        switch (Report)
        //        {
        //            case "CC":
        //                strSQL += "select  td_clientcd + ' ['  + Rtrim(cm_name) + ']' as [GroupByValue],";
        //                break;
        //            case "CN":
        //                strSQL += "select  Rtrim(cm_name) + ' ['  + td_clientcd + ']' as [GroupByValue],";
        //                break;
        //            case "SW":
        //                strSQL += " select Rtrim(ss_name) + ' ['  + td_scripcd + ']'  as [GroupByValue] ,";
        //                break;
        //            case "GW":
        //                strSQL += "select  Rtrim(gr_desc) + ' ['  + cm_groupcd + ']' as [GroupByValue],";
        //                break;
        //            case "FW":
        //                strSQL += "select  Rtrim(fm_desc) + ' ['  + cm_familycd + ']' as [GroupByValue],";
        //                break;
        //            case "BW":
        //                strSQL += "select  Rtrim(bm_branchname) + ' ['  + cm_brboffcode + ']' as [GroupByValue],";
        //                break;
        //            case "DW":
        //                strSQL += "select  convert(char,convert(datetime,td_dt,103),103) as [GroupByValue],";
        //                break;
        //        }

        //        strSQL += " Rtrim(cm_name) + '['  + td_clientcd + ']' as [Code],rtrim(sm_desc) + '['+Rtrim(Ltrim(convert(char,td_seriesid)))+']' as ScriptCode,";
        //        strSQL += " Rtrim(CES_Exchange)+'/'+'Comm' td_stlmnt,td_clientcd,cm_name,convert(char,convert(datetime,td_dt,103),103) as td_dt,Rtrim(Ltrim(convert(char,td_seriesid))) td_scripcd,sm_desc ss_name,'N'sr_nodelyn, ";
        //        strSQL += " Convert(decimal(15,0), sum(td_bqty)) 'tbqty', Convert(decimal(15,0), sum(td_sqty)) 'tsqty', cast(sum(td_bqty * td_rate*sm_multiplier) as decimal(15,2)) 'tbvalue', cast(sum(td_sqty * td_rate *sm_multiplier) as decimal(15,2)) 'tsvalue',";
        //        strSQL += " Convert(decimal(15,0), sum(td_bqty - td_sqty)) 'netqty', cast(sum((td_sqty - td_bqty) * td_rate*sm_multiplier) as decimal(15,2)) 'netvalue','0' as Salesavg,'0' as buyavg,'0' as avgrate, ";
        //        strSQL += " 0 'cfqty', 0 'cfvalue', 0 'delqty', 0 'delvalue', td_exchange+'X' ExchSeg, convert(char,td_dt,112) td_dt2 ,sm_multiplier";
        //        strSQL += " from " + StrCommexConn + ".dbo.Trades a," + StrCommexConn + ".dbo.Client_master," + StrCommexConn + ".dbo.series_master," + StrCommexConn + ".dbo.CompanyExchangesegments," + StrCommexConn + ".dbo.Group_master," + StrCommexConn + ".dbo.Family_master, " + StrCommexConn + ".dbo.Branch_master";
        //        strSQL += " where td_clientcd = cm_cd and cm_groupcd=gr_cd and cm_familycd=fm_cd and cm_brboffcode=bm_branchcd ";
        //        if (!blnLoad)
        //        {
        //            strSQL += " and td_exchange in ('" + ExchSegComm + "')";
        //        }
        //        if (Code != "" && GroupBy == "Commodity")
        //            strSQL += " and sm_symbol = '" + Code + "'";

        //        strSQL += " " + strWhere + " and exists " + myutil.LoginAccess("td_clientcd");
        //        strSQL += "and cm_cd = td_clientcd and td_exchange = sm_exchange and td_seriesid = sm_seriesid and td_companycode+td_exchange+'F'=CES_Cd group by";
        //        strSQL += " Rtrim(CES_Exchange)+'/'+'Comm', td_clientcd, cm_name, td_seriesid, sm_desc, td_dt,td_exchange+'X',  ";
        //        strSQL += " gr_desc, cm_groupcd, fm_desc, cm_familycd, bm_branchname, cm_brboffcode,sm_multiplier  ";
        //    }

        //    if ("CC,CN,SW".Contains(Report))
        //        strSQL += " Order by GroupByValue,  convert(char,td_dt,112) ";
        //    else if ("BW,GW,FW".Contains(Report))
        //        strSQL += " Order by GroupByValue,Code,ScriptCode, convert(char,td_dt,112) ";
        //    else if ("DW".Contains(Report))
        //        strSQL += " Order by GroupByValue,Code,ScriptCode ";

        //    DataTable dtCLPosition = mylib.OpenDataTable(strSQL);
        //    List<ClientPositionModel> dpview = new List<ClientPositionModel>();
        //    dpview = dtCLPosition.AsEnumerable()
        //    .Select(row => new ClientPositionModel
        //    {
        //        GroupName = row.Field<string>("GroupByValue"),
        //        Client = row.Field<string>("td_clientcd"),
        //        CLName = row.Field<string>("cm_name"),
        //        Scrip = row.Field<string>("td_scripcd"),
        //        ScripNm = row.Field<string>("ss_name"),
        //        Date = row.Field<string>("td_dt"),
        //        StlmntExch = row.Field<string>("td_stlmnt"),
        //        BuyQty = row.Field<decimal>("tbqty"),
        //        BuyAmt = row.Field<decimal>("tbvalue"),
        //        BuyAvg = row.Field<string>("buyAvg"),
        //        SalesQty = row.Field<decimal>("tsqty"),
        //        SalesAmt = row.Field<decimal>("tsvalue"),
        //        SalesAvg = row.Field<string>("salesAvg"),
        //        NetQty = row.Field<decimal>("netqty"),
        //        NetAmt = row.Field<decimal>("netvalue"),
        //        NetAvg = row.Field<string>("avgRate"),

        //    }).ToList();

        //    return dpview;
        //}
    }
    public class modContinuousDebit : ConnectionModel
    {
        public IEnumerable<ContinuousDebitModel> GetContinuousDebit(string Code, string Date, int Days, string Reporttype, string SearchBy, string excludeclient, string exceedamt)
        {
            LibraryModel mylib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            string strWhere = "";
            string strDate = "";
            strDate = myutil.dtos(Date);


            if (Code != "")
            {
                switch (SearchBy)
                {
                    case "CL":
                        strWhere += " and cm_cd = '" + Code.Trim() + "'";
                        break;
                    case "GR":
                        strWhere += " and cm_groupcd = '" + Code.Trim() + "'";
                        break;
                    case "FM":
                        strWhere += " and cm_familycd = '" + Code.Trim() + "'";
                        break;
                    case "SB":
                        strWhere += " and cm_subbroker = '" + Code.Trim() + "'";
                        break;
                    case "BR":
                        strWhere += " and cm_brboffcode = '" + Code.Trim() + "'";
                        break;
                        //case "SS":
                        //    strWhere += " and ss_cd = '" + Code.Trim() + "'";
                        //    break;
                        //case "RR":
                        //    strWhere += " and cm_dpactno = '" + Code.Trim() + "'";
                        //    break;
                        //case "XX":
                        //    strWhere += " and sm_symbol =  '" + Code.Trim() + "'";
                        //    break;
                }
            }
            strSQL = "";
            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {
                if (Reporttype == "CMBCLOSINGBALANCE")
                {
                    curCon.Open();

                    try
                    {
                        mylib.ExecSQL("Drop table #tmpOutAboveDays", curCon);
                    }
                    catch (Exception)
                    {
                    }
                    finally
                    {
                        strSQL = "Create Table #tmpOutAboveDays";
                        strSQL += " ( to_Clientcd Varchar(8),";
                        strSQL += "  to_Dt Varchar(8),";
                        strSQL += "  to_LedBal Money )";
                        mylib.ExecSQL(strSQL, curCon);
                    }
                    try
                    {
                        mylib.ExecSQL("Drop table #tmpcontinuousBal", curCon);
                    }
                    catch (Exception)
                    {
                    }
                    finally
                    {
                        strSQL = "Create Table #tmpcontinuousBal";
                        strSQL += " ( tc_Clientcd Varchar(8),";
                        strSQL += "  tc_LedBalT1 Money ,";
                        strSQL += "  tc_LedBalT2 Money ,";
                        strSQL += "  tc_LedcontBal Money )";
                        mylib.ExecSQL(strSQL, curCon);
                    }

                    strSQL = "insert into #tmpOutAboveDays";
                    strSQL += " select cm_cd , '" + strDate + "',";
                    strSQL += " isNull(( select sum(ld_amount) From Ledger ";
                    strSQL += " where ( ld_clientcd = cm_Cd ) and ld_dt < = '" + strDate + "' ),0) ";
                    strSQL += " From Client_master ";
                    strSQL += " Where  cm_type <> 'C' ";
                    strSQL += " and cm_schedule = '49843750'";
                    strSQL += HttpContext.Current.Session["LoginAccessOld"];
                    strSQL += strWhere;

                    mylib.ExecSQL(strSQL, curCon);

                    int SMS28DAYST = 0;
                    int SMS28DAYS = 0;
                    if (mylib.GetSysPARM("SMS28DAYST").Trim() != "")
                        SMS28DAYST = Convert.ToInt32(mylib.GetSysPARM("SMS28DAYST").Trim());
                    if (mylib.GetSysPARM("SMS28DAYS").Trim() != "")
                        SMS28DAYS = Convert.ToInt32(mylib.GetSysPARM("SMS28DAYS").Trim());

                    int intDaysback = (SMS28DAYST) == 0 ? (SMS28DAYS) == 0 ? 5 : SMS28DAYS : SMS28DAYST;
                    Days = intDaysback;

                    for (int i = 0; i < intDaysback; i++)
                    {
                        DateTime strDate1 = myutil.stod(strDate);
                        strDate = strDate1.AddDays(-1).ToString("yyyyMMdd");

                    Againdt:
                        strSQL = "select * from Tholiday_master where hm_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' ";
                        strSQL += " and hm_dt = '" + strDate + "'";
                        DataTable dt = mylib.OpenDataTable(strSQL);

                        if (dt.Rows.Count > 0)
                        {
                            strDate1 = myutil.stod(strDate);
                            strDate = strDate1.AddDays(-1).ToString("yyyyMMdd");

                            dt.Clear();
                            goto Againdt;
                        }
                        else
                        {
                            strSQL = "insert into #tmpOutAboveDays ";
                            strSQL += " select cm_cd , '" + strDate + "',";
                            strSQL += " isNull(( select sum(ld_amount) From Ledger ";
                            strSQL += " where ( ld_clientcd = cm_Cd ) and ld_dt < = '" + strDate + "' ),0) ";
                            strSQL += " From Client_master ";
                            strSQL += " Where cm_type <> 'C' ";
                            strSQL += " and cm_schedule = '49843750'";
                            strSQL += HttpContext.Current.Session["LoginAccessOld"];
                            strSQL += strWhere;

                            mylib.ExecSQL(strSQL, curCon);

                        }

                    }
                    strSQL = " Delete #tmpOutAboveDays ";
                    strSQL += "  Where to_Clientcd in (select to_Clientcd From #tmpOutAboveDays Where to_LedBal <= 0 ) ";
                    mylib.ExecSQL(strSQL, curCon);
                    //--------------------------------------------------------------------------------------------------------------------------------------------
                    if (excludeclient == "Y")
                    {

                        string strDate1 = myutil.dtos(Date);
                        //string strT1dt = mylib.mfnFormatdate(mylib.mfnDateAdd(eAddDate.eDay, -1, strDate), eNewDateformat.EDATABASE);
                        //string  strDate1 = "";
                        string strT1dt = myutil.AddDayDT(strDate1, -1).ToString("yyyyMMdd");

                        //string strT1dt = myutil.AddDayDT(strDate1, -1).ToString("yyyyMMdd");
                        try
                        {
                            mylib.ExecSQL("Drop table #tmpOutAboveDays2", curCon);
                        }
                        catch (Exception)
                        {
                        }
                        finally
                        {
                            strSQL = "Create Table #tmpOutAboveDays2";
                            strSQL += " ( to_Clientcd Varchar(8),";
                            strSQL += "  to_Dt Varchar(8),";
                            strSQL += "  to_LedBal Money )";
                            mylib.ExecSQL(strSQL, curCon);
                        }

                        strSQL = "insert into #tmpOutAboveDays2 ";
                        strSQL += " select cm_cd , '" + strT1dt + "',";
                        strSQL += " isNull(( select sum(ld_amount) From Ledger ";
                        strSQL += " where ( ld_clientcd = cm_Cd ) and ld_dt < = '" + strT1dt + "' ),0) ";
                        strSQL += " From Client_master ";
                        strSQL += " Where cm_type <> 'C'";
                        strSQL += "and cm_schedule = 49843750";
                        strSQL += HttpContext.Current.Session["LoginAccessOld"];
                        strSQL += strWhere;


                        mylib.ExecSQL(strSQL, curCon);


                        for (int i = 0; i < intDaysback; i++)
                        {
                            strT1dt = myutil.AddDayDT(strT1dt, -1).ToString("yyyyMMdd");
                        Againdt:
                            strSQL = "select * from Tholiday_master where hm_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' ";
                            strSQL += " and hm_dt = '" + strT1dt + "'";
                            DataTable dt = mylib.OpenDataTable(strSQL);

                            if (dt.Rows.Count > 0)
                            {
                                strT1dt = myutil.AddDayDT(strT1dt, -1).ToString("yyyyMMdd");
                                dt.Clear();
                                goto Againdt;
                            }
                            else
                            {
                                strSQL = "insert into #tmpOutAboveDays2 ";
                                strSQL += " select cm_cd , '" + strT1dt + "',";
                                strSQL += " isNull(( select sum(ld_amount) From Ledger ";
                                strSQL += " where ( ld_clientcd = cm_Cd ) and ld_dt < = '" + strT1dt + "' ),0) ";
                                strSQL += " From Client_master ";
                                strSQL += " Where cm_type <> 'C' ";
                                strSQL += " and cm_schedule = 49843750 ";
                                strSQL += HttpContext.Current.Session["LoginAccessOld"];
                                strSQL += strWhere;
                                mylib.ExecSQL(strSQL, curCon);

                            }
                        }
                        strSQL = " Delete #tmpOutAboveDays2 ";
                        strSQL += "  Where to_Clientcd in (select to_Clientcd From #tmpOutAboveDays2 Where to_LedBal <= 0 ) ";
                        mylib.ExecSQL(strSQL, curCon);
                    }
                    //---------------------------------------------------------------------------------------------------------------------------------------
                    strSQL = "insert into #tmpcontinuousBal ";
                    strSQL += " select ld_clientcd,";
                    strSQL += " cast(SUM(case When ld_dt <= '" + myutil.dtos(Date) + "' Then ld_amount else 0 End) as decimal(15,2)) BALT,cast(SUM(ld_amount) as decimal(15,2)) BALT2,0";
                    strSQL += " From Ledger, Client_master";
                    strSQL += " Where  ld_clientcd = cm_cd";
                    strSQL += " and cm_schedule = 49843750";
                    strSQL += " and ld_clientcd in (Select Distinct TO_CLientcd From #tmpOutAboveDays)";
                    strSQL += HttpContext.Current.Session["LoginAccessOld"];
                    if (excludeclient == "Y")
                        strSQL += " and ld_clientcd not in (Select Distinct TO_CLientcd From #tmpOutAboveDays2)";

                    strSQL += strWhere;
                    strSQL += " Group By ld_clientcd ,cm_name";
                    strSQL += " Having Sum(ld_amount) > " + Conversion.Val(exceedamt) + " order by  cm_name";
                    mylib.ExecSQL(strSQL, curCon);

                    strSQL = " Update #tmpcontinuousBal set tc_LedcontBal = a.to_ledbal";
                    strSQL += " From(select to_Clientcd,MIN(to_ledbal) to_ledbal From #tmpOutAboveDays group by to_Clientcd ) a ";
                    strSQL += " Where tc_Clientcd = a.to_Clientcd";
                    mylib.ExecSQL(strSQL, curCon);

                    strSQL = "select cm_name,tc_Clientcd,cast(tc_LedBalT1 as decimal(15,2)) tc_LedBalT1 , cast(tc_LedBalT2 as decimal(15,2))tc_LedBalT2,";
                    strSQL += " cast(tc_LedcontBal as decimal(15,2))tc_LedcontBal  from #tmpcontinuousBal, Client_master  where cm_cd=tc_Clientcd ";
                    //strSQL += " tc_LedcontBal '0'  from #tmpcontinuousBal, Client_master  where cm_cd=tc_Clientcd ";
                }

                else
                {
                    strSQL = " select cm_name, ld_clientcd tc_Clientcd , cast(B1-D1 as decimal(15,2)) tc_LedcontBal ,'0.0' tc_LedBalT1 ,'0.0' tc_LedBalT2 From ";
                    strSQL += " (Select  cm_name, ld_clientcd , Round(Sum(ld_amount), 2) B1, ";
                    strSQL += " Round(Sum(case When ld_debitFlag ='D' and ld_dt > convert(char, DATEADD(d, " + Days + ", '" + myutil.dtos(Date).Trim() + "' ),112) Then ld_amount else 0 End), 2) D1";
                    strSQL += "  From Ledger, Client_master  Where ld_dt <= '" + myutil.dtos(Date).Trim() + "'";
                    strSQL += HttpContext.Current.Session["LoginAccessOld"];
                    strSQL += " and cm_schedule = '49843750'";
                    strSQL += "  and ld_clientcd = cm_cd  and cm_mobile <> ''";
                    strSQL += strWhere;
                    strSQL += "  Group By cm_cd, cm_name, ld_clientcd  Having Round(Sum(ld_amount), 2)  > 0 ) a  Where Round(B1-D1, 2) > 1  order by cm_name";
                }

                DataTable dtContinuousDebit = mylib.OpenDataTable(strSQL, curCon);
                List<ContinuousDebitModel> dpview = new List<ContinuousDebitModel>();
                dpview = dtContinuousDebit.AsEnumerable()
                .Select(row => new ContinuousDebitModel
                {
                    Client = row.Field<string>("tc_Clientcd"),
                    CLName = row.Field<string>("cm_name"),
                    Tday = row.Field<decimal?>("tc_LedBalT1"),
                    UpToDate = row.Field<decimal?>("tc_LedBalT2"),
                    CDebit = row.Field<decimal?>("tc_LedcontBal"),

                }).ToList();
                return dpview;
            }
        }


    }
    public class modReports : ConnectionModel
    {

        public DataTable GetOutStandingPosition(string strDPID, string strClient, string FDate, string cmbSelect, string Select, string Margin, string PL)
        {
            string strCondition = "";
            string strSort;
            string strbranch;
            string str = "a.";
            LibraryModel mylib = new LibraryModel(true);
            UtilityModel myutil = new UtilityModel();
            UtilityDBModel mydbutil = new UtilityDBModel();
            SqlConnection SQLConnComex = mydbutil.commexTemp_conn("Commex");

            FDate = myutil.dtos(FDate);

            string ExCommex = "";
            string Exchng = "";
            string[] strArray = strDPID.Split(',');
            bool first = true;
            foreach (string obj in strArray)
            {
                if (obj.Length >= 2 && obj != "FX")
                {
                    if (first)
                    {
                        Exchng = obj;
                        first = false;
                    }
                    else
                    {
                        Exchng = obj + "," + Exchng;
                    }
                }

                //your insert query
            }
            bool Cofirst = true;
            foreach (string obj in strArray)
            {
                if (obj == "MX" ||obj == "FX" || obj.Length < 2)
                {
                    if (Cofirst)
                    {
                        ExCommex = obj;
                        Cofirst = false;
                    }
                    else
                    {
                        ExCommex = obj + "," + ExCommex;
                    }
                }

                //your insert query
            }
            if (Select.Trim() != "" && strClient.Trim() != "")
            {
                switch (Select)
                {
                    case "CL":
                        {
                            //strClient = " and cm_cd in ('acs9098', '26555')";
                            strClient = " and cm_cd = '" + strClient + "'";
                            break;
                        }

                    case "GR":
                        {
                            strClient = " and cm_groupcd = '" + strClient + "'";
                            break;
                        }

                    case "FM":
                        {
                            strClient = " and cm_familycd = '" + strClient + "'";
                            break;
                        }

                    case "SB":
                        {
                            strClient = " and cm_subbroker = '" + strClient + "'";
                            break;
                        }

                    case "BR":
                        {
                            strClient = " and cm_brboffcode = '" + strClient + "'";
                            break;
                        }
                }
            }


            strCondition = strCondition + " and b.cm_cd=a.cm_cd ";
            strCondition = strCondition + " and sm_symbol=pm_assetcd and sm_productcd=pm_cd and sm_prodtype=pm_type and bm_branchcd = B.cm_brboffcode ";
            strCondition = strCondition + " and sm_expirydt >= '" + FDate + "' and td_dt <= '" + FDate + "'";

            if (cmbSelect == "C")
                strSort = " order by b.cm_cd,ExchSeg,ord,sm_symbol,sm_expirydt,td_seriesid ";
            else if (cmbSelect == "S")
                strSort = " order by sm_desc,b.cm_cd,ExchSeg,ord,sm_symbol,sm_expirydt,td_seriesid ";
            else
                strSort = " order by B.cm_brboffcode,b.cm_cd,ExchSeg,ord,sm_symbol,sm_expirydt,td_seriesid ";
            //strbranch = myutil.LoginAccess("cm_cd").Replace("cm_", "b.cm_");
            strbranch = null;

            DataTable dtSum = null;
            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {
                curCon.Open();

                if (strDPID != "")
                {
                    if (cmbSelect == "C")
                        // New Logic
                        strSQL += "select rtrim(b.cm_name) + ' [' + rtrim(b.cm_cd) + ']' as Code,b.Cm_cd Cm_cd, B.cm_name cm_name, td_seriesid,sm_desc, ";
                    else if (cmbSelect == "S")
                        strSQL += "select sm_desc Code , sm_desc, b.cm_cd cm_cd ,b.cm_name cm_name ,td_seriesid, ";
                    else
                        strSQL += "Select b.cm_brboffcode + ' [' + rTrim(bm_branchname) + ']' code ,B.cm_cd cm_cd,b.cm_name cm_name,td_seriesid,sm_desc,b.cm_brboffcode, ";
                    strSQL += " sm_symbol,sm_sname,sm_prodtype,cast(pm_exposuremargin as decimal(15,0)) as pm_exposuremargin,sm_StrikePrice,sm_multiplier, ";
                    strSQL += " sum(buy) buy,sum(sale) sale, sum(buy-sale) net,Rtrim(CES_Exchange)+'/'+CES_Segment ExchSeg, ";
                    strSQL += " cast(round(case sum(buy - sale) when 0 then 0 else sum((buy -sale)*td_rate)/sum(buy-sale) end,4) as decimal(15,4)) avgrate,";
                    strSQL += " cast(round(case sum(buy) when 0 then 0 else abs(sum(buy*td_rate)/sum(buy))end,2) as decimal(15,4)) buyavgrate, ";
                    strSQL += " cast(round(case sum(sale) when 0 then 0 else abs(sum(sale*td_rate)/sum(sale)) end,2) as decimal(15,4)) saleavgrate,";
                    strSQL += " cast(isnull((select ms_lastprice from Market_summary where ms_exchange = td_exchange and ms_Segment = td_Segment and ms_seriesid = td_seriesid";
                    strSQL += " and ms_dt = (select max(ms_dt) from Market_summary where ms_exchange = td_exchange and ms_segment = td_segment and ms_seriesid = td_seriesid";
                    strSQL += " and  ms_dt <= '" + FDate + "')),0) as decimal(15,4)) closeprice,";
                    strSQL += " case right(sm_prodtype,1) when 'F' then 1 else 2 end  +  case sum(buy-sale) when 0 then 10000 else 1000 end 'ord',";
                    strSQL += " sum((buy-sale)*td_rate) 'actvalue','0' as Value,'0' as Margin,'0' as PLValue,sm_expirydt From vwFoutstandingposweb a,product_master,client_master b, Branch_master,CompanyExchangesegments   ";
                    strSQL += " where CES_CompanyCd = '" + HttpContext.Current.Session["CompanyCode"] + "' and pm_exchange= td_exchange and pm_segment= td_segment ";
                    strSQL += " and td_exchange+td_segment in ('" + Exchng.Replace(",", "','") + "')and td_companycode+td_exchange+td_segment=CES_Cd ";
                    strSQL += strbranch + strClient.ToString().Replace("and", "and b.");
                    strSQL += " " + strCondition;
                    strSQL += " and exists " + myutil.LoginAccess("td_clientcd");
                    strSQL += "  group by td_companycode,td_exchange,td_segment,td_clientcd,b.cm_cd,b.cm_brboffcode,b.cm_name,td_seriesid,sm_symbol,sm_sname,sm_desc,sm_expirydt,sm_prodtype,pm_assetcd,pm_exposuremargin,sm_StrikePrice,a.sm_multiplier, bm_branchname ,Rtrim(CES_Exchange)+'/'+CES_Segment  ";
                    strSQL += " Having Sum(buy - sale) <> 0 ";
                }


                if (SQLConnComex != null && ExCommex != "")
                {
                    if (strSQL != "")
                        strSQL += " union all ";
                    if (cmbSelect == "C")
                        strSQL += " select rtrim(b.cm_name) + ' [' + rtrim(b.cm_cd) + ']' as Code,b.Cm_cd Cm_cd, B.cm_name cm_name, td_seriesid,sm_desc, ";
                    else if (cmbSelect == "S")
                        strSQL += " select sm_desc Code , sm_desc, b.cm_cd cm_cd ,b.cm_name cm_name ,td_seriesid, ";
                    else

                        strSQL += " Select b.cm_brboffcode + ' [' + rTrim(bm_branchname) + ']' code ,B.cm_cd cm_cd,b.cm_name cm_name,td_seriesid,sm_desc,b.cm_brboffcode, ";
                    strSQL += " sm_symbol,sm_sname,sm_prodtype,cast(pm_exposuremargin as decimal(15,0)) as pm_exposuremargin,sm_StrikePrice,sm_multiplier, ";
                    strSQL += " sum(buy) buy,sum(sale) sale, sum(buy-sale) net,Rtrim(CES_Exchange)+'/'+'Comm' ExchSeg, ";
                    strSQL += " cast(round(case sum(buy - sale) when 0 then 0 else sum((buy -sale)*td_rate)/sum(buy-sale) end,4) as decimal(15,4)) avgrate,";
                    strSQL += " cast(round(case sum(buy) when 0 then 0 else abs(sum(buy*td_rate)/sum(buy))end,2) as decimal(15,2)) buyavgrate, ";
                    strSQL += " cast(round(case sum(sale) when 0 then 0 else abs(sum(sale*td_rate)/sum(sale)) end,2) as decimal(15,2)) saleavgrate,";
                    strSQL += " cast(isnull((select ms_lastprice from " + "[" + SQLConnComex.DataSource + "]" + "." + SQLConnComex.Database + ".dbo.Market_summary where ms_exchange = td_exchange  and ms_seriesid = td_seriesid";
                    strSQL += " and ms_dt = (select max(ms_dt) from " + "[" + SQLConnComex.DataSource + "]" + "." + SQLConnComex.Database + ".dbo. Market_summary where ms_exchange = td_exchange  and ms_seriesid = td_seriesid";
                    strSQL += " and  ms_dt <= '" + FDate + "')),0) as decimal(15,4)) closeprice,";
                    strSQL += " case right(sm_prodtype,1) when 'F' then 1 else 2 end  +  case sum(buy-sale) when 0 then 10000 else 1000 end 'ord',";
                    strSQL += " sum((buy-sale)*td_rate) 'actvalue','0' as Value,'0' as Margin,'0' as PLValue,sm_expirydt ";
                    strSQL += "From " + "[" + SQLConnComex.DataSource + "]" + "." + SQLConnComex.Database + ".dbo.vwFoutstandingpos a," + "[" + SQLConnComex.DataSource + "]" + "." + SQLConnComex.Database + ".dbo.product_master,";
                    strSQL += "" + "[" + SQLConnComex.DataSource + "]" + "." + SQLConnComex.Database + ".dbo.client_master b, " + "[" + SQLConnComex.DataSource + "]" + "." + SQLConnComex.Database + ".dbo.Branch_master, ";
                    strSQL += "" + "[" + SQLConnComex.DataSource + "]" + "." + SQLConnComex.Database + ".dbo.CompanyExchangesegments";
                    strSQL += " where pm_exchange= td_exchange ";
                    strSQL += " and td_exchange in ('" + ExCommex.Replace("X", "").Replace(",", "','") + "')and td_companycode+td_exchange+'F'=CES_Cd  ";
                    strSQL += strbranch + strClient.ToString().Replace("and", "and b.");
                    strSQL += " " + strCondition;
                    strSQL += "  ";
                    strSQL += " and exists " + myutil.LoginAccess("td_clientcd");
                    strSQL += " group by td_companycode,td_exchange,td_clientcd,b.cm_cd,b.cm_brboffcode,b.cm_name,td_seriesid,sm_symbol,";
                    strSQL += " sm_sname,sm_desc,sm_expirydt,sm_prodtype,pm_assetcd,pm_exposuremargin,sm_StrikePrice,a.sm_multiplier, bm_branchname,Rtrim(CES_Exchange)+'/'+'Comm'";
                    strSQL += " Having Sum(buy - sale) <> 0 ";
                }
                strSQL += strSort;

                //mylib.ExecSQL(strSQL, curCon);


                dtSum = mylib.OpenDataTable(strSQL, curCon);

                for (int J = 0; J < dtSum.Rows.Count; J++)
                {
                    // To calculate value
                    if (dtSum.Rows[J]["net"].ToString() == "0")
                        dtSum.Rows[J]["Value"] = Convert.ToDecimal(dtSum.Rows[J]["actvalue"]) * -1;
                    else
                        dtSum.Rows[J]["Value"] = (Convert.ToDecimal(dtSum.Rows[J]["Closeprice"]) + Convert.ToDecimal(dtSum.Rows[J]["sm_StrikePrice"])) * Convert.ToDecimal(dtSum.Rows[J]["net"]) * Convert.ToDecimal(dtSum.Rows[J]["sm_multiplier"]);

                    //if (Convert.ToDouble(dtSum.Rows[J]["Value"]) != 0.0)
                    //    dtSum.Rows[J]["Value"] = Mylib.FormatCurr(objDatasetReport.Tables(0).Rows(J).Item("Value"), 2);


                    // To calculate Margin

                    if (Margin == "1")
                    {
                        dtSum.Rows[J]["Margin"] = Math.Abs(Convert.ToDecimal(dtSum.Rows[J]["Value"]) * Convert.ToDecimal(dtSum.Rows[J]["pm_exposuremargin"]) / 100);
                    }
                    else
                    {
                        dtSum.Rows[J]["Margin"] = "NA";
                    }
                    // To Calculate P/L
                    if (PL == "1")
                    {
                        if (Convert.ToDouble(dtSum.Rows[J]["net"]) == 0.0)
                            dtSum.Rows[J]["PLValue"] = Convert.ToDecimal(dtSum.Rows[J]["actvalue"]) * -1;
                        else
                            // objDatasetReport.Tables(0).Rows(J).Item("PLValue") = (objDatasetReport.Tables(0).Rows(J).Item("net") * (objDatasetReport.Tables(0).Rows(J).Item("closeprice") - objDatasetReport.Tables(0).Rows(J).Item("avgrate")))
                            dtSum.Rows[J]["PLValue"] = ((Convert.ToDecimal(dtSum.Rows[J]["sm_multiplier"]) * Convert.ToDecimal(dtSum.Rows[J]["net"])) * (Math.Round(Convert.ToDecimal(dtSum.Rows[J]["closeprice"]) - Convert.ToDecimal(dtSum.Rows[J]["avgrate"]), 2)));

                        if (dtSum.Rows[J]["PLValue"].ToString() != "0")
                            dtSum.Rows[J]["PLValue"] = dtSum.Rows[J]["PLValue"];
                    }
                    else
                    {
                        dtSum.Rows[J]["PLValue"] = "NA";
                    }
                }
            }


            return dtSum;
        }
        public DataTable GetMTFRMSummaryReport(string strClient, string FDate, string Select)

        {

            string strTempRMSSummary = "#TmpRMSSummaryReport";
            string strTempRMSDetail = "#TmpRMSDetailReport";
            string strExchange = "";

            LibraryModel myLib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            UtilityDBModel mydbutil = new UtilityDBModel();
            Boolean blnisFundTransfer = false;
            Boolean blnIncludeUNDEL = false;
            string strT2Date = "";
            // SqlConnection SQLConnComex = mydbutil.commexTemp_conn("Commex");

            double dblHairCut = Convert.ToDouble(myLib.fnGetSysParam("MTFP_HAIRCUT"));

            Boolean blnBSE;
            Boolean blnNSE;
            blnBSE = myLib.fnFireQuery("Sysparameter", "sp_sysvalue", "sp_parmcd", "MTFP_LICBSE", false) == "Y";
            blnNSE = myLib.fnFireQuery("Sysparameter", "sp_sysvalue", "sp_parmcd", "MTFP_LICNSE", false) == "Y";
            string strDT = myutil.dtos(FDate);


            if (strClient.Trim() != "")
            {
                switch (Select)
                {
                    case "CL":
                        {
                            strClient = " and cm_cd = '" + strClient + "'";
                            break;
                        }

                    case "GR":
                        {
                            strClient = " and cm_groupcd = '" + strClient + "'";
                            break;
                        }

                    case "FM":
                        {
                            strClient = " and cm_familycd = '" + strClient + "'";
                            break;
                        }

                    case "SB":
                        {
                            strClient = " and cm_subbroker = '" + strClient + "'";
                            break;
                        }

                    case "BR":
                        {
                            strClient = " and cm_brboffcode = '" + strClient + "'";
                            break;
                        }
                    case "ALL":
                        {
                            strClient = " ";
                            break;
                        }
                }
            }

            string strWhere = strClient;

            DataTable dtSum = null;
            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {

                curCon.Open();
                string strsql;

                //----------------------create temp table---------------------------

                strsql = "Drop Table " + strTempRMSSummary;
                myLib.ExecSQL(strsql, curCon);

                strsql = "Create Table " + strTempRMSSummary + " (";
                strsql += " Tmp_Clientcd VarChar(8),";
                strsql += " Tmp_Limit Money,";
                strsql += " Tmp_TplusBal Money,";
                strsql += " Tmp_LoanBal Money,";
                strsql += " Tmp_FundedAmount Money,";
                strsql += " Tmp_FundedMrgReq Money,";
                strsql += " Tmp_CollateralFund Money,";
                strsql += " Tmp_CollateralValue Money,";
                strsql += " Tmp_ShortFallExcess Money,";
                strsql += " Tmp_TradeValue Money,";
                strsql += " Tmp_M2MLoss Money)";
                myLib.ExecSQL(strsql, curCon);

                strsql = "Drop Table " + strTempRMSDetail;
                myLib.ExecSQL(strsql, curCon);

                strsql = "Create Table " + strTempRMSDetail + " (";
                strsql += " Tmp_Type Char(1),";
                strsql += " Tmp_Exchange Char(1),";
                strsql += " Tmp_Clientcd VarChar(8),";
                strsql += " Tmp_Scripcd VarChar(6),";
                strsql += " Tmp_RegForFO VarChar(1),";
                strsql += " Tmp_Qty Numeric,";
                strsql += " Tmp_Rate Money,";
                strsql += " Tmp_MarketRate Money,";
                strsql += " Tmp_Value Money,";
                strsql += " Tmp_MrgHairCut Money,";
                strsql += " Tmp_NetValue Money)";
                myLib.ExecSQL(strsql, curCon);

                //-----------------------------------------------------------------

                strsql = "Insert into " + strTempRMSSummary;
                strsql += " select MTFC_CMcd,MTFC_AllowLimit,0,0,0,0,0,0,0,0,0";
                strsql += " from MrgTdgFin_Clients,Client_master ";
                strsql += " Where cm_cd = MTFC_CMcd and MTFC_Status='A' and MTFC_RegDt<='" + strDT + "'and exists " + myutil.LoginAccess("MTFC_CMcd") + "" + strWhere + "";

                myLib.ExecSQL(strsql, curCon);

                strsql = "Update " + strTempRMSSummary;

                strsql += " set Tmp_TplusBAL = A.ld_amount ";
                strsql += " from (select MTFC_CMcd,Sum(ld_amount) ld_amount ";
                strsql += " from Ledger,MrgTdgFin_Clients,Client_master";
                strsql += " Where cm_cd = MTFC_CMcd and (ld_clientcd = cm_cd " + (myLib.fnGetSysParam("MTFP_MRGNBAL") == "Y" ? "or ld_clientcd= cm_brkggroup" : "") + ")";
                strsql += " and ld_dt <='" + strDT + "' "; // and " & mfnGetLedType(cmbTPLedgerBal)
                strsql += " Group By MTFC_CMcd ) a ";
                strsql += " Where MTFC_CMcd = Tmp_Clientcd ";

                myLib.ExecSQL(strsql, curCon);


                if (blnisFundTransfer)
                {
                    strsql = "Update " + strTempRMSSummary + Constants.vbNewLine;
                    strsql += " set Tmp_Tplus1BAL = A.ld_amount " + Constants.vbNewLine;
                    strsql += " from (select MTFC_CMcd,Sum(ld_amount) ld_amount " + Constants.vbNewLine;
                    strsql += " from Ledger,MrgTdgFin_Clients,Client_master" + Constants.vbNewLine;
                    strsql += " Where cm_cd = MTFC_CMcd and (ld_clientcd = cm_cd " + (myLib.fnGetSysParam("MTFP_MRGNBAL") == "Y" ? "or ld_clientcd= cm_brkggroup" : "") + ")";
                    strsql += " and ld_dt <='" + strDT + "'"; // and " & mfnGetLedType(cmbTPLedgerBal) & strWhere
                    strsql += " and left(ld_DPID,1) = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                    strsql += " Group By MTFC_CMcd ) a " + Constants.vbNewLine;
                    strsql += " Where MTFC_CMcd = Tmp_Clientcd " + Constants.vbNewLine;

                    myLib.ExecSQL(strsql, curCon);

                    strsql = "Update " + strTempRMSSummary + Constants.vbNewLine;
                    strsql += " set Tmp_Tplus2BAL = A.ld_amount " + Constants.vbNewLine;
                    strsql += " from (select MTFC_CMcd,Sum(ld_amount) ld_amount " + Constants.vbNewLine;
                    strsql += " from Ledger,MrgTdgFin_Clients,Client_master" + Constants.vbNewLine;
                    strsql += " Where cm_cd = MTFC_CMcd and (ld_clientcd = cm_cd " + (myLib.fnGetSysParam("MTFP_MRGNBAL") == "Y" ? "or ld_clientcd= cm_brkggroup" : "") + ")";
                    strsql += " and ld_dt <='" + myLib.mfnGetT2Dt(strExchange, strDT) + "' "; // and " & mfnGetLedType(cmbTPLedgerBal) & strWhere
                    strsql += " and left(ld_DPID,1) = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                    strsql += " Group By MTFC_CMcd ) a " + Constants.vbNewLine;
                    strsql += " Where MTFC_CMcd = Tmp_Clientcd " + Constants.vbNewLine;
                    myLib.ExecSQL(strsql, curCon);

                    strT2Date = myLib.mfnGetT2Dt(strExchange, strDT);
                }

                // T+2 day loan balance
                //string strT2 = mfnGetT2Dt[strExchange, strDT];
                //string strT2 = myutil.AddDayDT(strDT, 2).ToString("yyyyMMdd");
                // string strT2 = myLib.mfnGetT2Dt("", strDT);
                string strT2 = myutil.mfnGetT2Dt("", strDT);

                strsql = "Update " + strTempRMSSummary + Constants.vbNewLine;
                strsql += " set Tmp_LoanBal = A.ld_amount " + Constants.vbNewLine;
                strsql += " from (select MTFC_CMcd,Sum(ld_amount) ld_amount " + Constants.vbNewLine;
                strsql += " from Ledger,MrgTdgFin_Clients" + Constants.vbNewLine;
                strsql += " Where ld_clientcd = Rtrim(MTFC_CMcd) + '" + myLib.fnGetSysParam("MTFP_SUFFIX") + "'";
                strsql += " and ld_dt <= '" + strT2 + "' " + Constants.vbNewLine;
                if (strExchange != "")
                {
                    strsql += " and left(ld_DPID,2) = '" + HttpContext.Current.Session["CompanyCode"] + strExchange + "'";
                }
                else
                {
                    strsql += " and left(ld_DPID,1) = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                }
                strsql += " Group By MTFC_CMcd ) a " + Constants.vbNewLine;
                strsql += " Where MTFC_CMcd = Tmp_Clientcd " + Constants.vbNewLine;

                myLib.ExecSQL(strsql, curCon);

                strsql = "Update " + strTempRMSSummary;
                strsql += " set Tmp_CollateralFund = A.ld_amount ";
                strsql += " from (select MTFC_CMcd,Sum(-ld_amount) ld_amount ";
                strsql += " from Ledger,MrgTdgFin_Clients";
                strsql += " Where ld_clientcd = Rtrim(MTFC_CMcd) + '" + myLib.fnGetSysParam("MTFP_SUFFIX") + "' and ld_documentType in ('P','R') ";
                strsql += " and ld_dt <='" + strDT + "'";

                if (strExchange != "")
                {
                    strsql += " and left(ld_DPID,2) = '" + HttpContext.Current.Session["CompanyCode"] + strExchange + "'";
                }
                else
                {
                    strsql += " and left(ld_DPID,1) = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                }

                strsql += " Group By MTFC_CMcd Having Sum(-ld_amount) >  0 ) a ";
                strsql += " Where MTFC_CMcd = Tmp_Clientcd ";

                myLib.ExecSQL(strsql, curCon);

                strsql = "Update " + strTempRMSSummary;
                strsql += " set Tmp_TradeValue = A.TradeValue ";
                strsql += " from (select MTtd_clientcd, Round(Sum((MTtd_bqty-MTtd_sqty)*MTtd_Rate),2) TradeValue ";
                strsql += " from MrgTdgFin_TRX,Settlements ";
                strsql += " Where MTtd_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' and MTTd_stlmnt = se_stlmnt and se_shpayoutdt ='" + strDT + "'";
                strsql += " Group By MTtd_clientcd ) a ";
                strsql += " Where MTtd_clientcd = Tmp_Clientcd ";

                myLib.ExecSQL(strsql, curCon);

                string strSelectedOurDPS = "";
                string strOurDPSWhere = "";
                if (!blnisFundTransfer)
                {
                    if (strExchange != "")
                    {
                        if (strExchange == "B")
                        {
                            strSelectedOurDPS += myLib.fnGetSysParam("MTFP_DMTBSE");
                            strSelectedOurDPS += "," + myLib.fnGetSysParam("MTFP_DMTBSEC");
                        }
                        else
                        {
                            strSelectedOurDPS += myLib.fnGetSysParam("MTFP_DMTNSE");
                            strSelectedOurDPS += "," + myLib.fnGetSysParam("MTFP_DMTNSEC");
                        }
                    }
                    else
                    {
                        strSelectedOurDPS += Convert.ToString(myLib.fnGetSysParam("MTFP_DMTBSE") + ",") + myLib.fnGetSysParam("MTFP_DMTNSE");
                        strSelectedOurDPS += Convert.ToString("," + myLib.fnGetSysParam("MTFP_DMTBSEC") + ",") + myLib.fnGetSysParam("MTFP_DMTNSEC");
                    }

                    for (int intOurDP = 0, loopTo = strSelectedOurDPS.Split(',').Length - 1; intOurDP <= loopTo; intOurDP++)
                    {
                        if (!string.IsNullOrEmpty(strSelectedOurDPS.Split(',')[intOurDP]))
                        {
                            strOurDPSWhere += "'" + strSelectedOurDPS.Split(',')[intOurDP] + "',";
                        }
                    }
                }

                if (strOurDPSWhere.Length > 0)
                {
                    strOurDPSWhere = Strings.Left(strOurDPSWhere, (strOurDPSWhere.Length) - 1);
                    strOurDPSWhere = " and dm_ourDP in (" + strOurDPSWhere + ")";
                }


                strsql = " Insert into " + strTempRMSDetail + Constants.vbNewLine;
                strsql += " select case When od_actType = 'C' Then 'C' else 'X' End type,";
                strsql += " case dm_OurDP When '" + myLib.fnGetSysParam("MTFP_DMTBSE").Trim().Trim() + "' Then 'B' When '" + myLib.fnGetSysParam("MTFP_DMTNSE").Trim().Trim() + "' Then 'N'";
                strsql += " When '" + myLib.fnGetSysParam("MTFP_DMTBSEC").Trim().Trim() + "' Then 'B' When '" + myLib.fnGetSysParam("MTFP_DMTNSEC").Trim().Trim() + "' Then 'N' else '' end,";
                strsql += " dm_clientcd,dm_Scripcd,'N',Sum(Qty),0,0,0,0,0 from ( ";

                strsql += " select 'X' type,dm_OurDP,dm_clientcd,dm_Scripcd,Sum(-dm_qty) Qty" + Constants.vbNewLine;
                strsql += " from Demat,Settlements,Client_master" + Constants.vbNewLine;
                strsql += " Where dm_clientcd = cm_cd and dm_stlmnt=se_stlmnt " + strWhere;
                strsql += " and se_shpayoutdt <='" + strDT + "'" + Constants.vbNewLine;

                strsql += " and dm_Dt <='" + strDT + "'" + Constants.vbNewLine + strOurDPSWhere;
                strsql += " and dm_type ='BC' and dm_locked ='N' and dm_transfered = 'N'" + Constants.vbNewLine;
                strsql += " Group By dm_OurDP,dm_clientcd,dm_Scripcd" + Constants.vbNewLine;


                // Future Date Payout to Client & Benf to Pool
                strsql += " union all ";
                strsql += " select 'X' type,dm_OurDP,dm_clientcd,dm_Scripcd,Sum(-dm_qty) Qty" + Constants.vbNewLine;
                strsql += " from Demat,Settlements,Client_master" + Constants.vbNewLine;
                strsql += " Where dm_clientcd = cm_cd and dm_stlmnt=se_stlmnt " + strWhere;
                strsql += " and se_shpayoutdt <='" + strDT + "'" + Constants.vbNewLine;
                strsql += " and dm_Dt <='" + strDT + "'" + Constants.vbNewLine;
                strsql += " and dm_execdt > '" + strDT + "'" + Constants.vbNewLine + strOurDPSWhere;
                strsql += " and dm_type ='BC' and (dm_locked <>'N' Or dm_transfered <> 'N') " + Constants.vbNewLine;
                strsql += " Group By dm_OurDP,dm_clientcd,dm_Scripcd" + Constants.vbNewLine;

                // Expected
                strsql += " union all ";
                strsql += " select 'X',dm_OurDP,dm_clientcd,dm_Scripcd,Sum(-dm_qty)" + Constants.vbNewLine;
                strsql += " from Demat,Settlements,Client_master" + Constants.vbNewLine;
                strsql += " Where dm_stlmnt=se_stlmnt and dm_clientcd = cm_cd " + strWhere;
                strsql += " and se_stdt <= '" + strDT + "'" + Constants.vbNewLine;
                strsql += " and se_shpayoutdt > '" + strDT + "'" + Constants.vbNewLine;
                strsql += " and exists ( select MTtd_Stlmnt,MTtd_dt,MTtd_TrxFlag,MTtd_clientcd,MTtd_scripcd,MTtd_bsflag from MrgTdgFin_TRX,Settlements " + Constants.vbNewLine;
                strsql += " Where MTtd_Stlmnt=se_stlmnt and se_stdt <= '" + strDT + "' and se_shpayoutdt > '" + strDT + "' and MTtd_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'" + Constants.vbNewLine;
                strsql += " and MTtd_Stlmnt = dm_stlmnt and MTtd_TrxFlag = 'N' and MTtd_bsflag = 'B' and MTtd_clientcd = dm_clientcd and MTtd_scripcd = dm_scripcd  and MTtd_bsflag = case When dm_type = 'BC' Then 'B' else 'S' end ) " + Constants.vbNewLine + strOurDPSWhere;
                strsql += " and dm_type ='BC'" + Constants.vbNewLine;
                strsql += " Group By dm_OurDP,dm_clientcd,dm_Scripcd" + Constants.vbNewLine;
                strsql += " ) a,ourDPS Where dm_OurDP = od_cd Group By type,dm_OurDP,dm_clientcd,dm_Scripcd,od_actType";

                myLib.ExecSQL(strsql, curCon);


                if (myLib.fnGetSysParam("MTFP_COLLAT") == "Y")
                {
                    strsql = " Delete " + strTempRMSDetail + Constants.vbNewLine + " Where Tmp_Type = 'X' ";
                    myLib.ExecSQL(strsql, curCon);

                }

                {
                    strsql = "Insert into " + strTempRMSDetail;
                    strsql += " select 'M',MTtd_Exchange,MTtd_clientcd,MTtd_scripcd,'N',Sum(MTtd_bqty-MTtd_sqty),Round(Sum((MTtd_bqty-MTtd_sqty)*MTtd_rate)/Sum(MTtd_bqty-MTtd_sqty),2),0,0,0,0";
                    strsql += " from MrgTdgFin_TRX,client_master ";
                    strsql += " Where MTtd_clientcd=cm_cd and MTtd_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' and MTtd_dt <= '" + strDT + "'and exists " + myutil.LoginAccess("MTtd_clientcd") + "" + strWhere + "";
                    if (strExchange != "")
                    {
                        strsql += " and MTtd_Exchange = '" + strExchange + "'";
                    }

                    strsql += " Group By MTtd_Exchange,MTtd_clientcd,MTtd_scripcd";   // ,MTtd_CntStlmnt
                    strsql += " Having Sum(MTtd_bqty-MTtd_sqty) <> 0 ";
                    myLib.ExecSQL(strsql, curCon);
                }
                //myLib.ExecSQL(strsql, curCon);


                if (myLib.fnGetSysParam("MTFP_COLLAT") != "Y")
                {
                    strsql = "Insert into " + strTempRMSDetail;
                    strsql += " select 'C',Tmp_Exchange,Tmp_Clientcd,Tmp_Scripcd,'N',Sum(case Tmp_Type When 'X' Then Tmp_Qty else -Tmp_Qty end),0,0,0,0,0";
                    strsql += " from " + strTempRMSDetail;
                    strsql += " Group By Tmp_Exchange,Tmp_Clientcd,Tmp_Scripcd ";
                    strsql += " Having Sum(case Tmp_Type When 'X' Then Tmp_Qty else -Tmp_Qty end) > 0 ";
                    myLib.ExecSQL(strsql, curCon);

                    strsql = " Delete " + strTempRMSDetail + " where Tmp_Type = 'X' ";
                    myLib.ExecSQL(strsql, curCon);
                }

                if (strExchange == "")
                {
                    strsql = "Delete " + strTempRMSDetail + Constants.vbNewLine + " Where Tmp_Type = 'C' and Tmp_Scripcd not in (select MTFD_SecCD from MrgTdgFin_SecuritiesDt ";
                    strsql += " Where MTFD_SecDt = (Select max(MTFD_SecDt) from MrgTdgFin_SecuritiesDt where MTFD_SecDt <= '" + strDT + "') and (MTFD_BSE = 'Y' Or MTFD_NSE = 'Y'))";
                    myLib.ExecSQL(strsql, curCon);
                }
                else
                {
                    strsql = "Delete " + strTempRMSDetail + Constants.vbNewLine + " Where Tmp_Type = 'C' and Tmp_Scripcd not in (select MTFD_SecCD from MrgTdgFin_SecuritiesDt ";
                    strsql += " Where MTFD_SecDt = (Select max(MTFD_SecDt) from MrgTdgFin_SecuritiesDt where MTFD_SecDt <= '" + strDT + "') and MTFD_" + strExchange + "SE = 'Y')";
                    myLib.ExecSQL(strsql, curCon);
                }

                //string[] arrExch;

                // arrExch = ((IIf(blnBSE, "B/", "") + IIf(blnNSE, "N/", "")).s("/");// BSE, NSE

                string[] arrExch = ((blnBSE ? "B/" : "") + (blnNSE ? "N/" : "")).Split('/');

                if (strExchange != "")
                {
                    arrExch = (Strings.Left(strExchange, 1) + ToString().Split('/')).ToString().Split('/');
                }
                else
                {
                    arrExch = ((blnBSE ? "B/" : "") + (blnNSE ? "N/" : "")).Split('/');
                }    // BSE, NSE


                if (blnIncludeUNDEL == true)
                {
                    strsql = "Insert into " + strTempRMSDetail + Constants.vbNewLine;
                    strsql += "  select 'U' type,left(dm_tstlmnt,1) ,dm_clientcd,dm_Scripcd,'N',sum(dm_qty)  ,0,0,0,0,0 ";
                    strsql += "  From Demat, OurDps, Settlements, Client_master ";
                    strsql += " Where dm_clientcd = cm_cd And dm_ourdp = od_cd  And dm_tstlmnt = se_stlmnt and dm_companyCode = '" + HttpContext.Current.Session["CompanyCode"] + "' and dm_type = 'BC' ";
                    strsql += " and od_acttype = 'T' and dm_locked = 'B' and se_stdt <= '" + strDT + "' and se_shpayindt >= '" + strDT + "'" + strWhere;
                    strsql += " and dm_execdt > '" + strDT + "' and dm_execdt <= se_shpayindt Group By left(dm_tstlmnt,1),dm_clientcd,dm_Scripcd";
                    myLib.ExecSQL(strsql, curCon);
                }


                for (int i = 0; i < arrExch.Length - 1; i++)
                {
                    string line = arrExch[i];
                    if (line != "")
                    {
                        strsql = "Update " + strTempRMSDetail;
                        strsql += " set Tmp_MarketRate = mk_closerate from market_rates a with (nolock) where mk_exchange = '" + line + "' and mk_scripcd=Tmp_Scripcd ";
                        strsql += " and mk_dt= (select max(mk_dt) from market_rates with(nolock) where mk_exchange = '" + line + "'";
                        strsql += " and mk_dt <='" + strDT + "') ";
                        strsql += " and Tmp_Type= 'M' and Tmp_Exchange = '" + line + "'";


                        myLib.ExecSQL(strsql, curCon);

                        strsql = "Update " + strTempRMSDetail;
                        strsql += " set Tmp_MarketRate = mk_closerate from market_rates a with (nolock) where mk_exchange = '" + line + "' and mk_scripcd=Tmp_Scripcd ";
                        strsql += " and mk_dt= (select max(mk_dt) from market_rates with(nolock) where mk_exchange = '" + line + "'";
                        strsql += " and mk_dt <'" + strDT + "') ";
                        strsql += " and Tmp_Type <> 'M' and Tmp_Exchange = '" + line + "'";

                        myLib.ExecSQL(strsql, curCon);

                        strsql = "Update " + strTempRMSDetail;
                        strsql += " Set Tmp_RegForFO = 'Y'  ";
                        strsql += " From Product_master, Securities ";
                        strsql += " Where pm_Exchange = '" + line + "' and pm_assetcd = " + (line == "B" ? "ss_Bsymbol" : "ss_nsymbol");

                        strsql += " and Tmp_Scripcd  = ss_cd and Tmp_Exchange = '" + line + "'";
                        if (Convert.ToInt32(myLib.fnFireQuery("Product_Expiry", "Count(0)", "pe_expirydt >= '" + strDT + "' and pe_exchange", line, false)) > 0)
                            strsql += " and pm_assetcd in ( select pe_assetcd from Product_Expiry Where pe_exchange = '" + line + "' and pe_expirydt >= '" + strDT + "')";


                        myLib.ExecSQL(strsql, curCon);

                        strsql = "update " + strTempRMSDetail;
                        strsql += " set Tmp_MrgHairCut = ";
                        strsql += " case Tmp_Type When 'C' Then Case When vm_exchange = 'N' then vm_applicable_var else vm_margin_rate end else (Case When vm_exchange = 'N' then vm_applicable_var else vm_margin_rate end * " + myLib.fnGetSysParam("MTFP_VARMAR") + " ) + (vm_max_loss * case Tmp_RegForFO When 'Y' Then " + myLib.fnGetSysParam("MTFP_ELMRGFO") + " else " + myLib.fnGetSysParam("MTFP_ELMNTFO") + " end ) end ";
                        strsql += " from VarMargin  ";
                        strsql += " where vm_scripcd = Tmp_Scripcd and vm_exchange = '" + line + "'";
                        strsql += " and vm_dt =(select max(vm_dt) from VarMargin ";
                        strsql += " Where vm_exchange = '" + line + "' ";
                        strsql += " and vm_dt <'" + strDT + "')";
                        strsql += " and Tmp_Exchange = '" + line + "'";

                        myLib.ExecSQL(strsql, curCon);
                    }

                }

                {
                    myLib.ExecSQL("Alter Table " + strTempRMSDetail + " Add Tmp_NonAppoved varchar(1) ", curCon);
                    myLib.ExecSQL("Update " + strTempRMSDetail + " Set Tmp_NonAppoved = '' ", curCon);

                    strsql = "Update " + strTempRMSDetail + Constants.vbNewLine;
                    strsql += " set Tmp_NonAppoved = 'Y' " + Constants.vbNewLine;
                    strsql += " Where Tmp_Type = 'M' and Tmp_Scripcd not in (select MTFD_SecCD from MrgTdgFin_SecuritiesDt " + Constants.vbNewLine;
                    strsql += " Where MTFD_SecDt = (Select max(MTFD_SecDt) from MrgTdgFin_SecuritiesDt where MTFD_SecDt <= '" + strDT + "') " + Constants.vbNewLine;
                    if (strExchange == "")
                    {
                        strsql += " and (MTFD_BSE = 'Y' Or MTFD_NSE = 'Y')) " + Constants.vbNewLine;
                    }
                    else
                    {
                        strsql += " and MTFD_" + strExchange + "SE = 'Y') " + Constants.vbNewLine;
                    }

                    myLib.ExecSQL(strsql, curCon);
                }



                strsql = "Update " + strTempRMSDetail + Constants.vbNewLine;
                strsql += " set Tmp_NonAppoved = 'Y', Tmp_MrgHairCut = 0, Tmp_MarketRate = 0 " + Constants.vbNewLine;
                strsql += " Where Tmp_Type = 'C' and Tmp_Scripcd not in (select MTFD_SecCD from MrgTdgFin_SecuritiesDt " + Constants.vbNewLine;
                strsql += " Where MTFD_SecDt = (Select max(MTFD_SecDt) from MrgTdgFin_SecuritiesDt where MTFD_SecDt <= '" + strDT + "') " + Constants.vbNewLine;
                if (strExchange == "")
                {
                    strsql += " and (MTFD_BSE = 'Y' Or MTFD_NSE = 'Y')) " + Constants.vbNewLine;
                }
                else
                {
                    strsql += " and MTFD_" + strExchange + "SE = 'Y') " + Constants.vbNewLine;
                }

                myLib.ExecSQL(strsql, curCon);

                DataTable test = myLib.OpenDataTable("select * from #TmpRMSDetailReport", curCon);

                strsql = "update " + strTempRMSDetail + "  set Tmp_MrgHairCut = " + dblHairCut + " Where Tmp_MrgHairCut < " + dblHairCut;
                myLib.ExecSQL(strsql, curCon);

                strsql = "update " + strTempRMSDetail + "  set Tmp_Value = Round(Tmp_Qty*Tmp_Rate,2) Where Tmp_Type= 'M' ";
                myLib.ExecSQL(strsql, curCon);

                strsql = "update " + strTempRMSDetail + "  set Tmp_Value = Round(Tmp_Qty*Tmp_MarketRate,2) Where Tmp_Type <> 'M' ";
                myLib.ExecSQL(strsql, curCon);

                strsql = "update " + strTempRMSDetail + "  set Tmp_NetValue = Round(Tmp_Value*((Tmp_MrgHairCut)/100),2) Where Tmp_Type = 'M' ";
                myLib.ExecSQL(strsql, curCon);

                strsql = "update " + strTempRMSDetail + "  set Tmp_NetValue = Round(Tmp_Value*((100-Tmp_MrgHairCut)/100),2) Where Tmp_Type <> 'M' ";
                myLib.ExecSQL(strsql, curCon);

                DataTable test1 = myLib.OpenDataTable("select * from #TmpRMSDetailReport", curCon);

                strsql = "Update " + strTempRMSSummary + "  set Tmp_FundedAmount = A.Tmp_FundedAmount, Tmp_FundedMrgReq  = A.Tmp_FundedMrgReq, ";
                strsql += " Tmp_CollateralValue = A.Tmp_CollateralValue ";
                strsql += " from (select Tmp_Clientcd Clientcd,";
                strsql += " Round(Sum(case Tmp_Type When 'M' Then Tmp_Value else 0 end),2) Tmp_FundedAmount, ";
                strsql += " Round(Sum(case Tmp_Type When 'M' Then Tmp_NetValue else 0 end),2) Tmp_FundedMrgReq , ";
                strsql += " Round(Sum(case Tmp_Type When 'C' Then Tmp_NetValue else 0 end),2) Tmp_CollateralValue ";
                strsql += " from " + strTempRMSDetail;
                strsql += " Group By Tmp_Clientcd ) a ";
                strsql += " Where Clientcd = Tmp_Clientcd ";
                myLib.ExecSQL(strsql, curCon);


                strsql = "Update " + strTempRMSSummary + "  set Tmp_M2MLoss = A.M2MLoss ";
                strsql += " From ( select Tmp_clientcd Tmpclientcd, Round(Sum((Tmp_Rate-Tmp_MarketRate)*Tmp_Qty),2) M2MLoss ";
                strsql += " From " + strTempRMSDetail;
                strsql += " Where Tmp_type = 'M' and Tmp_Rate > Tmp_MarketRate  ";
                strsql += " Group By Tmp_clientcd) A ";
                strsql += " Where Tmp_Clientcd = Tmpclientcd ";
                myLib.ExecSQL(strsql, curCon);


                strsql = "Update " + strTempRMSSummary + "  set Tmp_ShortFallExcess = (Tmp_CollateralFund+Tmp_CollateralValue)-(Tmp_FundedMrgReq+Tmp_M2MLoss) ";
                myLib.ExecSQL(strsql, curCon);


                strSQL = "select " + strTempRMSSummary + ".*,cm_name from " + strTempRMSSummary + ", Client_master WHERE cm_cd= TMP_CLIENTCD ";
                strSQL += " order by  cm_name";

                dtSum = myLib.OpenDataTable(strSQL, curCon);

                HttpContext.Current.Session["data"] = dtSum;

                //strSQL = "select * from " + strTempRMSDetail + "";               

                //dtSum = myLib.OpenDataTable(strSQL, curCon);

                string strSql = "";
                DataTable dtall;

                strSql = "select Tmp_Scripcd,ss_name, SUM(Tmp_Qty) Qty,";
                strSql += " SUM(Tmp_Value) ActualCost,SUM(Tmp_Qty * Tmp_MarketRate ) ClosePrice, ";
                strSql += " SUM(Tmp_NetValue) MarginReq,Tmp_MrgHairCut,Tmp_Clientcd";
                strSql += " from " + strTempRMSDetail + ",Client_master,securities ";
                strSql += " where cm_cd=Tmp_Clientcd and Tmp_Scripcd=ss_cd and Tmp_Type='M' ";
                strSql += " Group By  Tmp_Exchange,Tmp_Clientcd,cm_name,Tmp_MrgHairCut,Tmp_Scripcd,ss_name,Tmp_MrgHairCut";
                strSql += " Order By ss_name,Tmp_Clientcd";

                DataTable dtFunded = myLib.OpenDataTable(strSql, curCon);
                HttpContext.Current.Session["DsFunded"] = dtFunded;

                strSql = "select Tmp_Scripcd,ss_name, SUM(Tmp_Qty) Qty,";
                strSql += " Tmp_MarketRate as Rate,sum(Tmp_Value) Value, Tmp_MrgHairCut HairCut,";
                strSql += " sum(Tmp_NetValue) NetValue,Tmp_Clientcd ";
                strSql += " from " + strTempRMSDetail + ",Client_master,securities ";
                strSql += " where cm_cd=Tmp_Clientcd and Tmp_Scripcd=ss_cd and Tmp_Type='C' ";
                strSql += " Group By  Tmp_Exchange,Tmp_Clientcd,cm_name,Tmp_MrgHairCut,Tmp_MarketRate,Tmp_Scripcd,ss_name";
                strSql += " Order By ss_name,Tmp_Clientcd";

                DataTable dtCollateral = myLib.OpenDataTable(strSql, curCon);
                HttpContext.Current.Session["DsCollateral"] = dtCollateral;

                strSql = "select MTtd_scripcd,MTtd_bqty,MTtd_sqty,MTtd_rate , (case MTtd_bsflag when 'B' then MTtd_bqty*MTtd_Rate when 'S' then MTtd_sqty*MTtd_Rate end) value,MTtd_Stlmnt,ss_name,MTtd_clientcd";
                strSql += " from MrgTdgFin_TRX,Securities ";
                strSql += " where  MTtd_scripcd = ss_cd ";
                strSql += "  and MTtd_dt = '" + strDT + "'";
                strSql += " and MTtd_TrxFlag = 'N'";
                strSql += " Order By ss_name";


                DataTable dtTrades = myLib.OpenDataTable(strSql, curCon);
                HttpContext.Current.Session["DsTrades"] = dtTrades;

            }


            return dtSum;
        }

        public DataTable GetMTFRMSummaryReport1(string strClient, string FDate, string Select)
        {
            string strsql;
            bool blnVarHairCut = true;


            LibraryModel myLib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            UtilityDBModel mydbutil = new UtilityDBModel();
            bool blnCollExcessOppExch = false;
            bool blnisFundTransfer = false;
            double dblHairCut = Convert.ToDouble(myLib.GetSysParmSt("MTFP_HAIRCUT", ""));    // Visible Off - txtHaircut
            string strT2Date = string.Empty;
            string strTempRMSSummary = "#TmpRMSSummaryReport";
            string strTempRMSDetail = "#TmpRMSDetailReport";
            string strExchange = "";

            FDate = myutil.dtos(FDate);

            DataTable dtSum = null;
            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {

                curCon.Open();
                //----------------------create temp table---------------------------

                strsql = "Drop Table " + strTempRMSSummary;
                myLib.ExecSQL(strsql, curCon);

                strsql = "Create Table " + strTempRMSSummary + " (";
                strsql += " Tmp_Clientcd VarChar(8),";
                strsql += " Tmp_Limit Money,";
                strsql += " Tmp_TplusBal Money,";
                strsql += " Tmp_LoanBal Money,";
                strsql += " Tmp_FundedAmount Money,";
                strsql += " Tmp_FundedMrgReq Money,";
                strsql += " Tmp_CollateralFund Money,";
                strsql += " Tmp_CollateralValue Money,";
                strsql += " Tmp_ShortFallExcess Money,";
                strsql += " Tmp_TradeValue Money,";
                strsql += " Tmp_M2MLoss Money)";
                myLib.ExecSQL(strsql, curCon);

                strsql = "Drop Table " + strTempRMSDetail;
                myLib.ExecSQL(strsql, curCon);

                strsql = "Create Table " + strTempRMSDetail + " (";
                strsql += " Tmp_Type Char(1),";
                strsql += " Tmp_Exchange Char(1),";
                strsql += " Tmp_Clientcd VarChar(8),";
                strsql += " Tmp_Scripcd VarChar(6),";
                strsql += " Tmp_RegForFO VarChar(1),";
                strsql += " Tmp_Qty Numeric,";
                strsql += " Tmp_Rate Money,";
                strsql += " Tmp_MarketRate Money,";
                strsql += " Tmp_Value Money,";
                strsql += " Tmp_MrgHairCut Money,";
                strsql += " Tmp_NetValue Money)";
                myLib.ExecSQL(strsql, curCon);

                //-----------------------------------------------------------------
                if (strClient.Trim() != "")
                {
                    switch (Select)
                    {
                        case "CL":
                            {
                                strClient = " and cm_cd = '" + strClient + "'";
                                break;
                            }

                        case "GR":
                            {
                                strClient = " and cm_groupcd = '" + strClient + "'";
                                break;
                            }

                        case "FM":
                            {
                                strClient = " and cm_familycd = '" + strClient + "'";
                                break;
                            }

                        case "SB":
                            {
                                strClient = " and cm_subbroker = '" + strClient + "'";
                                break;
                            }

                        case "BR":
                            {
                                strClient = " and cm_brboffcode = '" + strClient + "'";
                                break;
                            }
                        case "ALL":
                            {
                                strClient = " ";
                                break;
                            }
                    }
                }

                string strWhere = strClient;

                if (!myutil.fnchkTable("FMargins_MTF") & myLib.GetSysParmSt("MTFPLDCOLLAT", "") == "N")
                {
                    strsql = "Create Table FMargins_MTF (" + Constants.vbNewLine;
                    strsql += "Fmt_Companycode char(1) Not Null,  " + Constants.vbNewLine;
                    strsql += "Fmt_Dt varchar(8) Not Null,  " + Constants.vbNewLine;
                    strsql += "Fmt_Exchange char(1) Not Null,  " + Constants.vbNewLine;
                    strsql += "Fmt_Clientcd varchar(8) Not Null,  " + Constants.vbNewLine;
                    strsql += "Fmt_scripcd varchar(6) Not Null,  " + Constants.vbNewLine;
                    strsql += "Fmt_qty Numeric Not Null,  " + Constants.vbNewLine;
                    strsql += "Fmt_Rate Money Not Null,  " + Constants.vbNewLine;
                    strsql += "Fmt_Value Money Not Null,  " + Constants.vbNewLine;
                    strsql += "Fmt_HairCut Money Not Null,  " + Constants.vbNewLine;
                    strsql += "Fmt_HairCutValue Money Not Null,  " + Constants.vbNewLine;
                    strsql += "Fmt_NetValue Money Not Null,  " + Constants.vbNewLine;
                    strsql += "Fmt_Type Char(1) Not Null,  " + Constants.vbNewLine;
                    strsql += "Fmt_Filler1 varchar(1) Not Null,  " + Constants.vbNewLine;
                    strsql += "Fmt_Filler2 varchar(1) Not Null,  " + Constants.vbNewLine;
                    strsql += "Fmt_Filler3 varchar(1) Not Null,  " + Constants.vbNewLine;
                    strsql += "Fmt_NFiller1 Numeric Not Null,  " + Constants.vbNewLine;
                    strsql += "Fmt_NFiller2 Numeric Not Null,  " + Constants.vbNewLine;
                    strsql += "Fmt_NFiller3 Numeric Not Null,  " + Constants.vbNewLine;
                    strsql += "CONSTRAINT [PK_FMargins_MTF] PRIMARY KEY CLUSTERED (";
                    strsql += "[Fmt_Companycode] ASC,";
                    strsql += "[Fmt_Dt] ASC,";
                    strsql += "[Fmt_Exchange] ASC,";
                    strsql += "[Fmt_Clientcd] ASC,";
                    strsql += "[Fmt_scripcd] ASC,";
                    strsql += "[Fmt_Type] ASC)";
                    strsql += ")" + Constants.vbNewLine;
                    myLib.ExecSQL(strsql, curCon);
                }
                dblHairCut = 0;
                bool blnBSE = false;
                bool blnNSE = false;
                string strDMTBSE = "";
                string strDMTNSE = "";
                string strDMTColBSE = "";
                string strDMTColNSE = "";
                blnBSE = myLib.GetSysParmSt("MTFP_LICBSE", "") == "Y";
                blnNSE = myLib.GetSysParmSt("MTFP_LICNSE", "") == "Y";
                strDMTBSE = myLib.GetSysParmSt("MTFP_DMTBSEP", "");
                strDMTNSE = myLib.GetSysParmSt("MTFP_DMTNSEP", "");
                strDMTColBSE = "";
                strDMTColNSE = "";
                strDMTColBSE = myLib.GetSysParmSt("MTFP_DMBSECP", "");
                strDMTColNSE = myLib.GetSysParmSt("MTFP_DMNSECP", "");

                myutil.prCreateTableHolding(curCon);
                myutil.prCreateTempTable(curCon, blnCollExcessOppExch);

                strsql = "Insert into " + strTempRMSSummary + Constants.vbNewLine;
                strsql += " select MTFC_CMcd,MTFC_AllowLimit,0,0,0,0,0,0,0,0,0" + Constants.vbNewLine;
                strsql += " from MrgTdgFin_Clients,Client_master " + Constants.vbNewLine;
                strsql += " Where MTFC_CMcd = cm_cd and (MTFC_Status='A' or (MTFC_Status='I' and MTFC_FillerA >'" + FDate + "'))  and MTFC_RegDt<='" + FDate + "'" + "and exists " + myutil.LoginAccess("MTFC_CMcd") + strWhere;
                myLib.ExecSQL(strsql, curCon);

                strsql = "Update " + strTempRMSSummary + Constants.vbNewLine;
                strsql += " set Tmp_TplusBAL = A.ld_amount " + Constants.vbNewLine;
                strsql += " from (select MTFC_CMcd,Sum(ld_amount) ld_amount " + Constants.vbNewLine;
                strsql += " from Ledger,MrgTdgFin_Clients,Client_master" + Constants.vbNewLine;
                strsql += " Where cm_cd = MTFC_CMcd and (ld_clientcd = cm_cd " + ((myLib.GetSysParmSt(("MTFP_MRGNBAL").Trim(), "") == "Y") ? " or ld_clientcd= cm_brkggroup" : "") + ")";
                strsql += " and ld_dt <='" + FDate + "'";
                strsql += " Group By MTFC_CMcd ) a " + Constants.vbNewLine;
                strsql += " Where MTFC_CMcd = Tmp_Clientcd " + Constants.vbNewLine;
                myLib.ExecSQL(strsql, curCon);

                if (blnisFundTransfer)
                {
                    strT2Date = myutil.mfnGetT2Dt(strExchange, FDate);
                }

                strsql = "Update " + strTempRMSSummary + Constants.vbNewLine;
                strsql += " set Tmp_LoanBal = A.ld_amount " + Constants.vbNewLine;
                strsql += " from (select MTFC_CMcd,Sum(ld_amount) ld_amount " + Constants.vbNewLine;
                strsql += " from Ledger,MrgTdgFin_Clients,Client_master " + Constants.vbNewLine;
                strsql += " Where MTFC_CMcd = cm_Cd and ld_clientcd = Rtrim(MTFC_FillerB) ";
                if (blnisFundTransfer)
                {
                    strsql += " and ld_dt <= '" + strT2Date + "' " + Constants.vbNewLine;
                }
                else
                {
                    strsql += " and ld_dt <= '" + FDate + "' " + Constants.vbNewLine;
                }

                if (strExchange != "")
                {
                    strsql += " and left(ld_DPID,2) = '" + HttpContext.Current.Session["CompanyCode"] + strExchange + "'";
                }
                else
                {
                    strsql += " and left(ld_DPID,1) = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                }

                strsql += " Group By MTFC_CMcd ) a " + Constants.vbNewLine;
                strsql += " Where MTFC_CMcd = Tmp_Clientcd " + Constants.vbNewLine;
                myLib.ExecSQL(strsql, curCon);

                strsql = "Update " + strTempRMSSummary + Constants.vbNewLine;
                strsql += " set Tmp_CollateralFund = A.ld_amount " + Constants.vbNewLine;
                strsql += " from (select MTFC_CMcd,Sum(-ld_amount) ld_amount " + Constants.vbNewLine;
                strsql += " from Ledger,MrgTdgFin_Clients,Client_master" + Constants.vbNewLine;
                strsql += " Where MTFC_CMcd = cm_Cd and ld_clientcd = Rtrim(MTFC_FillerB) and ld_documentType in ('P','R') ";
                strsql += " and ld_dt <='" + FDate + "'" + Constants.vbNewLine;
                if (strExchange != "")
                {
                    strsql += " and left(ld_DPID,2) = '" + HttpContext.Current.Session["CompanyCode"] + strExchange + "'";
                }
                else
                {
                    strsql += " and left(ld_DPID,1) = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                }

                strsql += " Group By MTFC_CMcd Having Sum(-ld_amount) >  0 ) a " + Constants.vbNewLine;
                strsql += " Where MTFC_CMcd = Tmp_Clientcd " + Constants.vbNewLine;
                myLib.ExecSQL(strsql, curCon);

                strsql = "Update " + strTempRMSSummary + Constants.vbNewLine;
                strsql += " set Tmp_TradeValue = A.TradeValue " + Constants.vbNewLine;
                strsql += " from (select MTtd_clientcd, Round(Sum((MTtd_bqty-MTtd_sqty)*MTtd_Rate),2) TradeValue " + Constants.vbNewLine;
                strsql += " from MrgTdgFin_TRX,Settlements,Client_master " + Constants.vbNewLine;
                strsql += " Where MTtd_clientcd = cm_Cd and MTtd_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' and MTTd_stlmnt = se_stlmnt and se_shpayoutdt ='" + FDate + "' and MTtd_TrxFlag <> 'X'" + Constants.vbNewLine;
                strsql += " Group By MTtd_clientcd ) a " + Constants.vbNewLine;
                strsql += " Where MTtd_clientcd = Tmp_Clientcd " + Constants.vbNewLine;
                myLib.ExecSQL(strsql, curCon);

                strsql = " Insert into " + strTempRMSDetail + Constants.vbNewLine;
                strsql += " select 'M' type,MTtd_Exchange,";
                strsql += " MTtd_clientcd,MTtd_scripcd,'N',Sum(MTtd_bqty-MTtd_sqty),Round(Sum((MTtd_bqty-MTtd_sqty)*MTtd_rate)/Sum(MTtd_bqty-MTtd_sqty),2),0,0,0,0 ";
                strsql += " from MrgTdgFin_TRX,Client_master " + Constants.vbNewLine;
                strsql += " Where MTtd_clientcd = cm_Cd and MTtd_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                strsql += " and MTtd_dt <='" + FDate + "' and MTtd_TrxFlag <> 'X'" + "and exists " + myutil.LoginAccess("MTtd_clientcd") + strWhere;
                if (strExchange != "")
                {
                    strsql += " and MTtd_Exchange = '" + strExchange + "'";
                }

                strsql += " Group by MTtd_clientcd,MTtd_scripcd,MTtd_Exchange,MTtd_CntStlmnt";
                strsql += " Having Sum(MTtd_bqty-MTtd_sqty) > 0 ";
                myLib.ExecSQL(strsql, curCon);

                if (myLib.GetSysParmSt("MTFPLDCOLLAT", "") == "N" & Convert.ToInt32(FDate) >= 20200901)
                {
                    string strLastCollatDT = myLib.fnFireQuery("Fmargins_MTF", "isNull(max(Fmt_Dt),'')", "Fmt_Dt <='" + FDate + "' and Fmt_Companycode", "", true);// HttpContext.Current.Session["CompanyCode"]
                    strsql = " Insert into " + strTempRMSDetail + Constants.vbNewLine;
                    strsql += " select 'C' type,Fmt_Exchange,";
                    strsql += " Fmt_Clientcd,Fmt_scripcd,'N',Sum(Fmt_qty),0,0,0,0,0 ";
                    strsql += " from Fmargins_MTF,Client_master " + Constants.vbNewLine;
                    strsql += " Where Fmt_Clientcd = cm_Cd and Fmt_Companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                    strsql += " and Fmt_Dt = '" + strLastCollatDT + "'" + "'and exists " + myutil.LoginAccess("MTtd_clientcd") + strWhere;
                    if (strExchange != "")
                    {
                        strsql += " and Fmt_Exchange = '" + strExchange + "'";
                    }

                    strsql += " Group by Fmt_Clientcd,Fmt_scripcd,Fmt_Exchange,Fmt_Type";
                    strsql += " Having Sum(Fmt_qty) > 0 ";
                    myLib.ExecSQL(strsql, curCon);
                }
                else
                {
                    strsql = " Insert into " + strTempRMSDetail + Constants.vbNewLine;
                    strsql += " select 'C' type,case MPT_OurDP When '" + strDMTColBSE + "' Then 'B' When '" + strDMTColNSE + "' Then 'N' else '' end MPT_Exchange,";
                    strsql += " MPT_clientcd,MPT_scripcd,'N',Sum(case MPT_DRCR When 'C' Then MPT_Qty else -MPT_Qty end),0,0,0,0,0 ";
                    strsql += " from MrgTdgFin_Pledge,Client_master,OurDPS " + Constants.vbNewLine;
                    strsql += " Where MPT_clientcd = cm_Cd and MPT_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                    strsql += " and MPT_dt <= '" + FDate + "' and MPT_TrxFlag = 'P'" + "'and exists " + myutil.LoginAccess("MTtd_clientcd") + strWhere;
                    if (strExchange != "")
                    {

                        strsql += " and MPT_OurDP = '" + ((strExchange == "B") ? strDMTColBSE : strDMTColNSE) + "'";
                    }


                    strsql += " and od_cd = MPT_OurDP and od_ActType = 'H' ";
                    strsql += " Group by MPT_clientcd,MPT_scripcd,MPT_OurDP";
                    strsql += " Having Sum(case MPT_DRCR When 'C' Then MPT_Qty else -MPT_Qty end) > 0 ";
                    myLib.ExecSQL(strsql, curCon);
                }

                if (strExchange == "")
                {
                    strsql = "Delete " + strTempRMSDetail + Constants.vbNewLine + " Where Tmp_Type = 'C' and Tmp_Scripcd not in (select MTFD_SecCD from MrgTdgFin_SecuritiesDt ";
                    strsql += " Where MTFD_SecDt = (Select max(MTFD_SecDt) from MrgTdgFin_SecuritiesDt where MTFD_SecDt <= '" + FDate + "') and (MTFD_BSE = 'Y' Or MTFD_NSE = 'Y'))";
                    myLib.ExecSQL(strsql, curCon);
                }
                else
                {
                    strsql = "Delete " + strTempRMSDetail + Constants.vbNewLine + " Where Tmp_Type = 'C' and Tmp_Scripcd not in (select MTFD_SecCD from MrgTdgFin_SecuritiesDt ";
                    strsql += " Where MTFD_SecDt = (Select max(MTFD_SecDt) from MrgTdgFin_SecuritiesDt where MTFD_SecDt <= '" + FDate + "') and MTFD_" + strExchange + "SE = 'Y')";
                    myLib.ExecSQL(strsql, curCon);
                }

                string[] arrExch;
                if (strExchange != "")
                {
                    arrExch = Strings.Split(Strings.Left(strExchange, 1) + "/", "/");
                }
                else
                {
                    arrExch = Strings.Split((blnBSE ? "B/" : "") + (blnNSE ? "N/" : ""), "/"); // 'BSE, NSE
                }    // BSE, NSE

                strsql = "Update " + strTempRMSDetail + Constants.vbNewLine;
                strsql += " Set Tmp_RegForFO = 'Y'  " + Constants.vbNewLine;
                strsql += " From Product_master, Securities  " + Constants.vbNewLine;
                strsql += " Where pm_assetcd = Case pm_Exchange When 'B' Then ss_Bsymbol Else ss_nsymbol End and pm_segment = 'F' " + Constants.vbNewLine;
                strsql += " and Tmp_Scripcd  = ss_cd " + Constants.vbNewLine;
                strsql += " and exists ( select pe_assetcd from Product_Expiry Where pe_assetcd = pm_assetcd and pe_exchange = pm_exchange and pe_segment = 'F' and pe_expirydt >= '" + FDate + "')";
                myLib.ExecSQL(strsql, curCon);
                string strLastRateDt = "";

                for (int i = 0, loopTo = Information.UBound(arrExch) - 1; i <= loopTo; i++)
                {
                    strLastRateDt = FDate;
                    if ((myLib.fnFireQuery("market_rates", "Count(0)", "mk_exchange = '" + arrExch[i] + "' and mk_dt", strLastRateDt, true)) == "0")
                    {
                        strLastRateDt = myutil.GetTMinusPlusdt(strLastRateDt, -1, arrExch[i]);
                    }

                    strsql = "Update " + strTempRMSDetail + Constants.vbNewLine;
                    strsql += " set Tmp_MarketRate = mk_closerate from market_rates a with (nolock) where mk_exchange = '" + arrExch[i] + "' and mk_scripcd=Tmp_Scripcd " + Constants.vbNewLine;
                    strsql += " and mk_dt= (select max(mk_dt) from market_rates with(nolock) where mk_exchange = '" + arrExch[i] + "'" + Constants.vbNewLine;
                    strsql += " and mk_dt <='" + strLastRateDt + "') " + Constants.vbNewLine;
                    strsql += " and Tmp_Type= 'M' and Tmp_Exchange = '" + arrExch[i] + "'" + Constants.vbNewLine;

                    myLib.ExecSQL(strsql, curCon);
                    strsql = "Update " + strTempRMSDetail + Constants.vbNewLine;
                    strsql += " set Tmp_MarketRate = mk_closerate from market_rates a with (nolock) where mk_exchange = '" + arrExch[i] + "' and mk_scripcd=Tmp_Scripcd " + Constants.vbNewLine;
                    strsql += " and mk_dt= (select max(mk_dt) from market_rates with(nolock) where mk_exchange = '" + arrExch[i] + "'" + Constants.vbNewLine;
                    strsql += " and mk_dt <= '" + myutil.GetTMinusPlusdt(strLastRateDt, -1, arrExch[i]) + "') " + Constants.vbNewLine;
                    strsql += " and Tmp_Type <> 'M' and Tmp_Exchange = '" + arrExch[i] + "'" + Constants.vbNewLine;

                    myLib.ExecSQL(strsql, curCon);

                    strsql = "update " + strTempRMSDetail + Constants.vbNewLine;
                    strsql += " set Tmp_MrgHairCut = ";
                    strsql += " case Tmp_Type When 'C' Then Case When vm_exchange = 'N' then vm_applicable_var else vm_margin_rate end else (Case When vm_exchange = 'N' then vm_applicable_var else vm_margin_rate end * " + myLib.GetSysParmSt("MTFP_VARMAR", "") + " ) + (vm_max_loss * case Tmp_RegForFO When 'Y' Then " + myLib.GetSysParmSt("MTFP_ELMRGFO", "") + " else " + myLib.GetSysParmSt("MTFP_ELMNTFO", "") + " end ) end " + Constants.vbNewLine;
                    strsql += " from VarMargin  " + Constants.vbNewLine;
                    strsql += " where vm_scripcd = Tmp_Scripcd and vm_exchange = '" + arrExch[i] + "'" + Constants.vbNewLine;
                    strsql += " and vm_dt =(select max(vm_dt) from VarMargin " + Constants.vbNewLine;
                    strsql += " Where vm_exchange = '" + arrExch[i] + "' " + Constants.vbNewLine;
                    strsql += " and vm_dt <= '" + myutil.GetTMinusPlusdt(strLastRateDt, -1, arrExch[i]) + "')" + Constants.vbNewLine;
                    strsql += " and Tmp_Exchange = '" + arrExch[i] + "'" + Constants.vbNewLine;
                    myLib.ExecSQL(strsql, curCon);
                }
                strsql = "update " + strTempRMSDetail + Constants.vbNewLine + "  set Tmp_MrgHairCut = " + dblHairCut + " Where Tmp_MrgHairCut < " + dblHairCut;
                myLib.ExecSQL(strsql, curCon);
                strsql = "update " + strTempRMSDetail + Constants.vbNewLine + "  set Tmp_MrgHairCut = 100 Where Tmp_MrgHairCut > 100 ";
                myLib.ExecSQL(strsql, curCon);
                myLib.ExecSQL("Alter Table " + strTempRMSDetail + " Add Tmp_NonAppoved varchar(1) ", curCon);
                myLib.ExecSQL("Update " + strTempRMSDetail + " Set Tmp_NonAppoved = '' ", curCon);
                strsql = "Update " + strTempRMSDetail + Constants.vbNewLine;
                strsql += " set Tmp_NonAppoved = 'Y' " + Constants.vbNewLine;
                strsql += " Where Tmp_Type = 'M' and Tmp_Scripcd not in (select MTFD_SecCD from MrgTdgFin_SecuritiesDt " + Constants.vbNewLine;
                strsql += " Where MTFD_SecDt = (Select max(MTFD_SecDt) from MrgTdgFin_SecuritiesDt where MTFD_SecDt <= '" + FDate + "') " + Constants.vbNewLine;
                if (strExchange == "")
                {
                    strsql += " and (MTFD_BSE = 'Y' Or MTFD_NSE = 'Y')) " + Constants.vbNewLine;
                }
                else
                {
                    strsql += " and MTFD_" + strExchange + "SE = 'Y') " + Constants.vbNewLine;
                }

                myLib.ExecSQL(strsql, curCon);

                strsql = "Update " + strTempRMSDetail + Constants.vbNewLine;
                strsql += " set Tmp_NonAppoved = 'Y', Tmp_MrgHairCut = 0, Tmp_MarketRate = 0 " + Constants.vbNewLine;
                strsql += " Where Tmp_Type = 'C' and Tmp_Scripcd not in (select MTFD_SecCD from MrgTdgFin_SecuritiesDt " + Constants.vbNewLine;
                strsql += " Where MTFD_SecDt = (Select max(MTFD_SecDt) from MrgTdgFin_SecuritiesDt where MTFD_SecDt <= '" + FDate + "') " + Constants.vbNewLine;
                if (strExchange == "")
                {
                    strsql += " and (MTFD_BSE = 'Y' Or MTFD_NSE = 'Y')) " + Constants.vbNewLine;
                }
                else
                {
                    strsql += " and MTFD_" + strExchange + "SE = 'Y') " + Constants.vbNewLine;
                }

                myLib.ExecSQL(strsql, curCon);

                strsql = "update " + strTempRMSDetail + Constants.vbNewLine + "  set Tmp_Value = Round(Tmp_Qty*Tmp_Rate,2) Where Tmp_Type= 'M' ";
                myLib.ExecSQL(strsql, curCon);
                strsql = "update " + strTempRMSDetail + Constants.vbNewLine + "  set Tmp_Value = Round(Tmp_Qty*Tmp_MarketRate,2) Where Tmp_Type <> 'M' ";
                myLib.ExecSQL(strsql, curCon);
                strsql = "update " + strTempRMSDetail + Constants.vbNewLine + "  set Tmp_NetValue = Round(Tmp_Value*((Tmp_MrgHairCut)/100),2) Where Tmp_Type = 'M' ";
                myLib.ExecSQL(strsql, curCon);
                strsql = "update " + strTempRMSDetail + Constants.vbNewLine + "  set Tmp_NetValue = Round(Tmp_Value*((100-Tmp_MrgHairCut)/100),2) Where Tmp_Type <> 'M' ";
                myLib.ExecSQL(strsql, curCon);


                strsql = "Update " + strTempRMSSummary + Constants.vbNewLine + "  set Tmp_FundedAmount = A.Tmp_FundedAmount, Tmp_FundedMrgReq  = A.Tmp_FundedMrgReq, ";
                strsql += " Tmp_CollateralValue = A.Tmp_CollateralValue " + Constants.vbNewLine;
                strsql += " from (select Tmp_Clientcd Clientcd,";
                strsql += " Round(Sum(case Tmp_Type When 'M' Then Tmp_Value else 0 end),2) Tmp_FundedAmount, " + Constants.vbNewLine;
                strsql += " Round(Sum(case Tmp_Type When 'M' Then Tmp_NetValue else 0 end),2) Tmp_FundedMrgReq , " + Constants.vbNewLine;
                strsql += " Round(Sum(case Tmp_Type When 'C' Then Tmp_NetValue else 0 end),2) Tmp_CollateralValue " + Constants.vbNewLine;
                strsql += " from " + strTempRMSDetail + Constants.vbNewLine;
                strsql += " Group By Tmp_Clientcd ) a " + Constants.vbNewLine;
                strsql += " Where Clientcd = Tmp_Clientcd " + Constants.vbNewLine;
                myLib.ExecSQL(strsql, curCon);

                strsql = "Update " + strTempRMSSummary + Constants.vbNewLine + "  set Tmp_M2MLoss = b.M2MLoss From ( ";
                strsql += " select Tmpclientcd,Sum(M2MLoss) M2MLoss from ( ";
                strsql += " select Tmp_clientcd Tmpclientcd,Tmp_Scripcd,Round(Sum((Tmp_Rate-Tmp_MarketRate)*Tmp_Qty),2) M2MLoss " + Constants.vbNewLine;
                strsql += " From " + strTempRMSDetail + Constants.vbNewLine;
                strsql += " Where Tmp_type = 'M' " + Constants.vbNewLine;
                strsql += " Group By Tmp_clientcd,Tmp_Scripcd Having Round(Sum((Tmp_Rate-Tmp_MarketRate)*Tmp_Qty),2)  > 0 ) A Group By Tmpclientcd ) b " + Constants.vbNewLine;
                strsql += " Where Tmp_Clientcd = Tmpclientcd " + Constants.vbNewLine;
                myLib.ExecSQL(strsql, curCon);
                strsql = "Update " + strTempRMSSummary + Constants.vbNewLine + "  set Tmp_ShortFallExcess = (Tmp_CollateralFund+Tmp_CollateralValue)-(Tmp_FundedMrgReq+Tmp_M2MLoss) ";
                myLib.ExecSQL(strsql, curCon);


                strsql = "select " + strTempRMSSummary + ".*,cm_name from " + strTempRMSSummary + ", Client_master WHERE cm_cd= TMP_CLIENTCD ";
                strsql += " order by  cm_name";

                dtSum = myLib.OpenDataTable(strsql, curCon);

                HttpContext.Current.Session["data"] = dtSum;

                //strSQL = "select * from " + strTempRMSDetail + "";               

                //dtSum = myLib.OpenDataTable(strSQL, curCon);

                string strSql = "";
                DataTable dtall;

                strSql = "select Tmp_Scripcd,ss_name, SUM(Tmp_Qty) Qty,";
                strSql += " SUM(Tmp_Value) ActualCost,SUM(Tmp_Qty * Tmp_MarketRate ) ClosePrice, ";
                strSql += " SUM(Tmp_NetValue) MarginReq,Tmp_MrgHairCut,Tmp_Clientcd";
                strSql += " from " + strTempRMSDetail + ",Client_master,securities ";
                strSql += " where cm_cd=Tmp_Clientcd and Tmp_Scripcd=ss_cd and Tmp_Type='M' ";
                strSql += " Group By  Tmp_Exchange,Tmp_Clientcd,cm_name,Tmp_MrgHairCut,Tmp_Scripcd,ss_name,Tmp_MrgHairCut";
                strSql += " Order By ss_name,Tmp_Clientcd";

                DataTable dtFunded = myLib.OpenDataTable(strSql, curCon);
                HttpContext.Current.Session["DsFunded"] = dtFunded;

                strSql = "select Tmp_Scripcd,ss_name, SUM(Tmp_Qty) Qty,";
                strSql += " Tmp_MarketRate as Rate,sum(Tmp_Value) Value, Tmp_MrgHairCut HairCut,";
                strSql += " sum(Tmp_NetValue) NetValue,Tmp_Clientcd ";
                strSql += " from " + strTempRMSDetail + ",Client_master,securities ";
                strSql += " where cm_cd=Tmp_Clientcd and Tmp_Scripcd=ss_cd and Tmp_Type='C' ";
                strSql += " Group By  Tmp_Exchange,Tmp_Clientcd,cm_name,Tmp_MrgHairCut,Tmp_MarketRate,Tmp_Scripcd,ss_name";
                strSql += " Order By ss_name,Tmp_Clientcd";

                DataTable dtCollateral = myLib.OpenDataTable(strSql, curCon);
                HttpContext.Current.Session["DsCollateral"] = dtCollateral;

                strSql = "select MTtd_scripcd,MTtd_bqty,MTtd_sqty,MTtd_rate , (case MTtd_bsflag when 'B' then MTtd_bqty*MTtd_Rate when 'S' then MTtd_sqty*MTtd_Rate end) value,MTtd_Stlmnt,ss_name,MTtd_clientcd";
                strSql += " from MrgTdgFin_TRX,Securities ";
                strSql += " where  MTtd_scripcd = ss_cd ";
                strSql += "  and MTtd_dt = '" + FDate + "'";
                strSql += " and MTtd_TrxFlag = 'N'";
                strSql += " Order By ss_name";


                DataTable dtTrades = myLib.OpenDataTable(strSql, curCon);
                HttpContext.Current.Session["DsTrades"] = dtTrades;
            }



            return dtSum;

        }

        public DataTable GetMTFRMSummaryReport2(string strClient, string FDate, string Select, string strExchange)
        {
            string strSql = "";
            bool blnVarHairCut = true;


            LibraryModel myLib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            UtilityDBModel mydbutil = new UtilityDBModel();
            bool blnCollExcessOppExch = false;
            bool blnisFundTransfer = false;
            double dblHairCut = Convert.ToDouble(myLib.GetSysParmSt("MTFP_HAIRCUT", ""));    // Visible Off - txtHaircut
            string strT2Date = string.Empty;
            string strTempRMSSummary = "#TmpRMSSummaryReport";
            string strTempRMSDetail = "#TmpRMSDetailReport";
            //string strExchange = "N";

            FDate = myutil.dtos(FDate);

            DataTable dtSum = null;
            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {

                curCon.Open();
                //----------------------create temp table---------------------------

                myutil.prCreateTableHolding(curCon);
                myutil.prCreateTempTable(curCon, blnCollExcessOppExch);

                //-----------------------------------------------------------------
                if (strClient.Trim() != "")
                {
                    switch (Select)
                    {
                        case "CL":
                            {
                                strClient = " and cm_cd = '" + strClient + "'";
                                break;
                            }

                        case "GR":
                            {
                                strClient = " and cm_groupcd = '" + strClient + "'";
                                break;
                            }

                        case "FM":
                            {
                                strClient = " and cm_familycd = '" + strClient + "'";
                                break;
                            }

                        case "SB":
                            {
                                strClient = " and cm_subbroker = '" + strClient + "'";
                                break;
                            }

                        case "BR":
                            {
                                strClient = " and cm_brboffcode = '" + strClient + "'";
                                break;
                            }
                        case "ALL":
                            {
                                strClient = " ";
                                break;
                            }
                    }
                }

                string strWhere = strClient;

                if (!myutil.fnchkTable("FMargins_MTF") & myLib.GetSysParmSt("MTFPLDCOLLAT", "") == "N")
                {
                    strSql = "Create Table FMargins_MTF (" + Constants.vbNewLine;
                    strSql += "Fmt_Companycode char(1) Not Null,  " + Constants.vbNewLine;
                    strSql += "Fmt_Dt varchar(8) Not Null,  " + Constants.vbNewLine;
                    strSql += "Fmt_Exchange char(1) Not Null,  " + Constants.vbNewLine;
                    strSql += "Fmt_Clientcd varchar(8) Not Null,  " + Constants.vbNewLine;
                    strSql += "Fmt_scripcd varchar(6) Not Null,  " + Constants.vbNewLine;
                    strSql += "Fmt_qty Numeric Not Null,  " + Constants.vbNewLine;
                    strSql += "Fmt_Rate Money Not Null,  " + Constants.vbNewLine;
                    strSql += "Fmt_Value Money Not Null,  " + Constants.vbNewLine;
                    strSql += "Fmt_HairCut Money Not Null,  " + Constants.vbNewLine;
                    strSql += "Fmt_HairCutValue Money Not Null,  " + Constants.vbNewLine;
                    strSql += "Fmt_NetValue Money Not Null,  " + Constants.vbNewLine;
                    strSql += "Fmt_Type Char(1) Not Null,  " + Constants.vbNewLine;
                    strSql += "Fmt_Filler1 varchar(1) Not Null,  " + Constants.vbNewLine;
                    strSql += "Fmt_Filler2 varchar(1) Not Null,  " + Constants.vbNewLine;
                    strSql += "Fmt_Filler3 varchar(1) Not Null,  " + Constants.vbNewLine;
                    strSql += "Fmt_NFiller1 Numeric Not Null,  " + Constants.vbNewLine;
                    strSql += "Fmt_NFiller2 Numeric Not Null,  " + Constants.vbNewLine;
                    strSql += "Fmt_NFiller3 Numeric Not Null,  " + Constants.vbNewLine;
                    strSql += "CONSTRAINT [PK_FMargins_MTF] PRIMARY KEY CLUSTERED (";
                    strSql += "[Fmt_Companycode] ASC,";
                    strSql += "[Fmt_Dt] ASC,";
                    strSql += "[Fmt_Exchange] ASC,";
                    strSql += "[Fmt_Clientcd] ASC,";
                    strSql += "[Fmt_scripcd] ASC,";
                    strSql += "[Fmt_Type] ASC)";
                    strSql += ")" + Constants.vbNewLine;
                    myLib.ExecSQL(strSql, curCon);
                }
                dblHairCut = 0;
                bool blnBSE = false;
                bool blnNSE = false;
                string strDMTBSE = "";
                string strDMTNSE = "";
                string strDMTColBSE = "";
                string strDMTColNSE = "";
                blnBSE = myLib.GetSysParmSt("MTFP_LICBSE", "") == "Y";
                blnNSE = myLib.GetSysParmSt("MTFP_LICNSE", "") == "Y";
                strDMTBSE = myLib.GetSysParmSt("MTFP_DMTBSEP", "");
                strDMTNSE = myLib.GetSysParmSt("MTFP_DMTNSEP", "");
                strDMTColBSE = "";
                strDMTColNSE = "";
                strDMTColBSE = myLib.GetSysParmSt("MTFP_DMBSECP", "");
                strDMTColNSE = myLib.GetSysParmSt("MTFP_DMNSECP", "");

                if (blnBSE && blnNSE)
                {
                    if (strExchange == "A")
                    {
                        strExchange = "";
                    }
                }
                else
                {
                    if (blnBSE)
                    {
                        strExchange = "B";
                    }
                    else if (blnNSE)
                    {
                        strExchange = "N";
                    }
                }



                strSql = "Insert into " + strTempRMSSummary + Constants.vbNewLine;
                strSql += " select MTFC_CMcd,MTFC_AllowLimit,0,0,0,0,0,0,0,0,0,0,0,0,0" + Constants.vbNewLine;
                strSql += " from MrgTdgFin_Clients,Client_master " + Constants.vbNewLine;
                strSql += " Where MTFC_CMcd = cm_cd and (MTFC_Status='A' or (MTFC_Status='I' and MTFC_FillerA >'" + FDate + "'))  and MTFC_RegDt<='" + FDate + "'and exists " + myutil.LoginAccess("MTFC_CMcd") + "" + Constants.vbNewLine;

                myLib.ExecSQL(strSql, curCon);

                strSql = "Update " + strTempRMSSummary + Constants.vbNewLine;
                strSql += " set Tmp_TplusBAL = A.ld_amount " + Constants.vbNewLine;
                strSql += " from (select MTFC_CMcd,Sum(ld_amount) ld_amount " + Constants.vbNewLine;
                strSql += " from Ledger,MrgTdgFin_Clients,Client_master" + Constants.vbNewLine;
                strSql += " Where cm_cd = MTFC_CMcd and (ld_clientcd = cm_cd " + ((myLib.GetSysParmSt(("MTFP_MRGNBAL").Trim(), "") == "Y") ? " or ld_clientcd= cm_brkggroup" : "") + ")";
                strSql += " and ld_dt <='" + FDate + "' and   left(ld_dpid,1)='A'";
                strSql += " Group By MTFC_CMcd ) a " + Constants.vbNewLine;
                strSql += " Where MTFC_CMcd = Tmp_Clientcd " + Constants.vbNewLine;
                myLib.ExecSQL(strSql, curCon);

                if (blnisFundTransfer)
                {
                    strSql = "Update " + strTempRMSSummary + Constants.vbNewLine;
                    strSql += " set Tmp_Tplus1BAL = A.ld_amount " + Constants.vbNewLine;
                    strSql += " from (select MTFC_CMcd,Sum(ld_amount) ld_amount " + Constants.vbNewLine;
                    strSql += " from Ledger,MrgTdgFin_Clients,Client_master" + Constants.vbNewLine;
                    strSql += " Where cm_cd = MTFC_CMcd and (ld_clientcd = cm_cd " + ((myLib.GetSysParmSt(("MTFP_MRGNBAL").Trim(), "") == "Y") ? " or ld_clientcd= cm_brkggroup" : "") + ")";
                    strSql += " and ld_dt <='" + myutil.mfnGetTPlusDt(strExchange, FDate, 1) + "'and   left(ld_dpid,1)='A'";
                    strSql += " and left(ld_DPID,1) = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                    strSql += " Group By MTFC_CMcd ) a " + Constants.vbNewLine;
                    strSql += " Where MTFC_CMcd = Tmp_Clientcd " + Constants.vbNewLine;
                    myLib.ExecSQL(strSql, curCon);

                    strSql = "Update " + strTempRMSSummary + Constants.vbNewLine;
                    strSql += " set Tmp_Tplus2BAL = A.ld_amount " + Constants.vbNewLine;
                    strSql += " from (select MTFC_CMcd,Sum(ld_amount) ld_amount " + Constants.vbNewLine;
                    strSql += " from Ledger,MrgTdgFin_Clients,Client_master" + Constants.vbNewLine;
                    strSql += " Where cm_cd = MTFC_CMcd and (ld_clientcd = cm_cd " + ((myLib.GetSysParmSt(("MTFP_MRGNBAL").Trim(), "") == "Y") ? " or ld_clientcd= cm_brkggroup" : "") + ")";
                    strSql += " and ld_dt <='" + myutil.mfnGetTPlusDt(strExchange, FDate, 2) + "'and   left(ld_dpid,1)='A'";
                    strSql += " and left(ld_DPID,1) = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                    strSql += " Group By MTFC_CMcd ) a " + Constants.vbNewLine;
                    strSql += " Where MTFC_CMcd = Tmp_Clientcd " + Constants.vbNewLine;
                    myLib.ExecSQL(strSql, curCon);

                }


                strT2Date = myutil.mfnGetTPlusDt(strExchange, FDate, 2);

                strSql = "Update " + strTempRMSSummary + Constants.vbNewLine;
                strSql += " set Tmp_LoanBal = A.ld_amount " + Constants.vbNewLine;
                strSql += " from (select MTFC_CMcd,Sum(ld_amount) ld_amount " + Constants.vbNewLine;
                strSql += " from Ledger,MrgTdgFin_Clients,Client_master " + Constants.vbNewLine;
                strSql += " Where MTFC_CMcd = cm_Cd and ld_clientcd = Rtrim(MTFC_FillerB) ";

                strSql += " and ld_dt <= '" + strT2Date + "' " + Constants.vbNewLine;

                //   strSql += " and ld_dt <= '" + FDate + "' " + Constants.vbNewLine;

                if (strExchange != "")
                {
                    strSql += " and left(ld_DPID,2) = '" + HttpContext.Current.Session["CompanyCode"] + strExchange + "'";
                }
                else
                {
                    strSql += " and left(ld_DPID,1) = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                }
                strSql += " Group By MTFC_CMcd ) a " + Constants.vbNewLine;
                strSql += " Where MTFC_CMcd = Tmp_Clientcd " + Constants.vbNewLine;

                myLib.ExecSQL(strSql, curCon);

                strSql = "Update " + strTempRMSSummary + Constants.vbNewLine;
                strSql += " set Tmp_CollateralFund = A.ld_amount " + Constants.vbNewLine;
                strSql += " from (select MTFC_CMcd,Sum(-ld_amount) ld_amount " + Constants.vbNewLine;
                strSql += " from Ledger,MrgTdgFin_Clients,Client_master" + Constants.vbNewLine;
                strSql += " Where MTFC_CMcd = cm_Cd and ld_clientcd = Rtrim(MTFC_FillerB) and ld_documentType in ('P','R') ";
                strSql += " and ld_dt <='" + FDate + "'" + Constants.vbNewLine;
                if (strExchange != "")
                {
                    strSql += " and left(ld_DPID,2) = '" + HttpContext.Current.Session["CompanyCode"] + strExchange + "'";
                }
                else
                {
                    strSql += " and left(ld_DPID,1) = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                }
                strSql += " Group By MTFC_CMcd Having Sum(-ld_amount) >  0 ) a " + Constants.vbNewLine;
                strSql += " Where MTFC_CMcd = Tmp_Clientcd " + Constants.vbNewLine;
                myLib.ExecSQL(strSql, curCon);

                strSql = "Update " + strTempRMSSummary + Constants.vbNewLine;
                strSql += " set Tmp_TradeValue = A.TradeValue " + Constants.vbNewLine;
                strSql += " from (select MTtd_clientcd, Round(Sum((MTtd_bqty-MTtd_sqty)*MTtd_Rate),2) TradeValue " + Constants.vbNewLine;
                strSql += " from MrgTdgFin_TRX,Settlements,Client_master " + Constants.vbNewLine;
                strSql += " Where MTtd_clientcd = cm_Cd and MTtd_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' and MTTd_stlmnt = se_stlmnt and se_shpayoutdt ='" + FDate + "' and MTtd_TrxFlag <> 'X'" + Constants.vbNewLine;
                strSql += " Group By MTtd_clientcd ) a " + Constants.vbNewLine;
                strSql += " Where MTtd_clientcd = Tmp_Clientcd " + Constants.vbNewLine;
                myLib.ExecSQL(strSql, curCon);

                //  dtSum = myLib.OpenDataTable("select * from " + strTempRMSSummary + "", curCon);

                strSql = " Insert into " + strTempRMSDetail + Constants.vbNewLine;
                strSql += " select 'M' type,MTtd_Exchange,MTtd_CntStlmnt,";
                strSql += " MTtd_clientcd,MTtd_scripcd,'N',Sum(MTtd_bqty-MTtd_sqty),Round(Sum((MTtd_bqty-MTtd_sqty)*MTtd_rate)/Sum(MTtd_bqty-MTtd_sqty),2),0,0,0,0 ";
                strSql += " from MrgTdgFin_TRX,Client_master " + Constants.vbNewLine;
                strSql += " Where MTtd_clientcd = cm_Cd and MTtd_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                strSql += " and MTtd_dt <='" + FDate + "' and MTtd_TrxFlag <> 'X'and exists " + myutil.LoginAccess("MTtd_clientcd") + "" + Constants.vbNewLine;
                if (strExchange != "")
                {
                    strSql += " and MTtd_Exchange = '" + strExchange + "'";
                }
                strSql += " Group by MTtd_clientcd,MTtd_scripcd,MTtd_Exchange,MTtd_CntStlmnt";
                strSql += " Having Sum(MTtd_bqty-MTtd_sqty) > 0 ";
                myLib.ExecSQL(strSql, curCon);


                if (myLib.GetSysParmSt("MTFPLDCOLLAT", "") == "N" & Convert.ToInt32(FDate) >= 20200901)
                {
                    string strLastCollatDT = myLib.fnFireQuery("Fmargins_MTF", "isNull(max(Fmt_Dt),'')", "Fmt_Dt <='" + FDate + "' and Fmt_Companycode", HttpContext.Current.Session["CompanyCode"].ToString(), true);

                    strSql = " Insert into " + strTempRMSDetail + Constants.vbNewLine;
                    strSql += " select 'C' type,Fmt_Exchange,Fmt_Type,";
                    strSql += " Fmt_Clientcd,Fmt_scripcd,'N',Sum(Fmt_qty),0,0,0,0,0 ";
                    strSql += " from Fmargins_MTF,Client_master " + Constants.vbNewLine;
                    strSql += " Where Fmt_Clientcd = cm_Cd and Fmt_Companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                    strSql += " and Fmt_Dt = '" + strLastCollatDT + "'and exists " + myutil.LoginAccess("Fmt_Clientcd") + "" + Constants.vbNewLine;
                    if (strExchange != "")
                    {
                        strSql += " and Fmt_Exchange = '" + strExchange + "'";
                    }
                    strSql += " Group by Fmt_Clientcd,Fmt_scripcd,Fmt_Exchange,Fmt_Type";
                    strSql += " Having Sum(Fmt_qty) > 0 ";
                    myLib.ExecSQL(strSql, curCon);

                }
                else
                {
                    strSql = " Insert into " + strTempRMSDetail + Constants.vbNewLine;
                    strSql += " select 'C' type,case MPT_OurDP When '" + strDMTColBSE + "' Then 'B' When '" + strDMTColNSE + "' Then 'N' else '' end MPT_Exchange,'',";
                    strSql += " MPT_clientcd,MPT_scripcd,'N',Sum(case MPT_DRCR When 'C' Then MPT_Qty else -MPT_Qty end),0,0,0,0,0 ";
                    strSql += " from MrgTdgFin_Pledge,Client_master,OurDPS " + Constants.vbNewLine;
                    strSql += " Where MPT_clientcd = cm_Cd and MPT_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                    strSql += " and MPT_dt <= '" + FDate + "' and MPT_TrxFlag = 'P'and exists " + myutil.LoginAccess("MPT_clientcd") + "" + Constants.vbNewLine;

                    if (strExchange != "")
                    {
                        strSql += " and MPT_OurDP = '" + (strExchange == "B" ? strDMTColBSE : strDMTColNSE) + "'";
                    }
                    strSql += " and od_cd = MPT_OurDP and od_ActType = 'H' ";
                    strSql += " Group by MPT_clientcd,MPT_scripcd,MPT_OurDP";
                    strSql += " Having Sum(case MPT_DRCR When 'C' Then MPT_Qty else -MPT_Qty end) > 0 ";
                    myLib.ExecSQL(strSql, curCon);
                }

                if (strExchange == "")
                {
                    strSql = "Delete " + strTempRMSDetail + Constants.vbNewLine + " Where Tmp_Type = 'C' and Tmp_Scripcd not in (select MTFD_SecCD from MrgTdgFin_SecuritiesDt ";
                    strSql += " Where MTFD_SecDt = (Select max(MTFD_SecDt) from MrgTdgFin_SecuritiesDt where MTFD_SecDt <= '" + FDate + "') and (MTFD_BSE = 'Y' Or MTFD_NSE = 'Y'))";
                    myLib.ExecSQL(strSql, curCon);
                }
                else
                {
                    strSql = "Delete " + strTempRMSDetail + Constants.vbNewLine + " Where Tmp_Type = 'C' and Tmp_Scripcd not in (select MTFD_SecCD from MrgTdgFin_SecuritiesDt ";
                    strSql += " Where MTFD_SecDt = (Select max(MTFD_SecDt) from MrgTdgFin_SecuritiesDt where MTFD_SecDt <= '" + FDate + "') and MTFD_" + strExchange + "SE = 'Y')";
                    myLib.ExecSQL(strSql, curCon);

                }
                string[] arrExch;
                if (strExchange != "")
                {
                    arrExch = Strings.Split(Strings.Left(strExchange, 1) + "/", "/");
                }
                else
                {

                    arrExch = Strings.Split((blnBSE ? "B/" : "") + (blnNSE ? "N/" : ""), "/"); // 'BSE, NSE
                }    // BSE, NSE

                strSql = "Update " + strTempRMSDetail + Constants.vbNewLine;
                strSql += " Set Tmp_RegForFO = 'Y'  " + Constants.vbNewLine;
                strSql += " From Product_master, Securities  " + Constants.vbNewLine;
                strSql += " Where pm_assetcd = Case pm_Exchange When 'B' Then ss_Bsymbol Else ss_nsymbol End and pm_segment = 'F' " + Constants.vbNewLine;
                strSql += " and Tmp_Scripcd  = ss_cd " + Constants.vbNewLine;
                strSql += " and exists ( select pe_assetcd from Product_Expiry Where pe_assetcd = pm_assetcd and pe_exchange = pm_exchange and pe_segment = 'F' and pe_expirydt >= '" + FDate + "')";
                myLib.ExecSQL(strSql, curCon);

                string strLastRateDt = "";

                for (int i = 0, loopTo = Information.UBound(arrExch) - 1; i <= loopTo; i++)
                {
                    strLastRateDt = FDate;

                    if (myLib.fnFireQuery("market_rates", "Count(0)", "mk_exchange = '" + arrExch[i] + "' and mk_dt", strLastRateDt, true) == "0")
                    {
                        strLastRateDt = myutil.GetTMinusPlusdt(strLastRateDt, -1, arrExch[i]);
                    }
                    strSql = "Update " + strTempRMSDetail + Constants.vbNewLine;
                    strSql += " set Tmp_MarketRate = mk_closerate from market_rates a with (nolock) where mk_exchange = '" + arrExch[i] + "' and mk_scripcd=Tmp_Scripcd " + Constants.vbNewLine;
                    strSql += " and mk_dt= (select max(mk_dt) from market_rates with(nolock) where mk_exchange = '" + arrExch[i] + "'" + Constants.vbNewLine;
                    strSql += " and mk_dt <='" + strLastRateDt + "') " + Constants.vbNewLine;
                    strSql += " and Tmp_Type= 'M' and Tmp_Exchange = '" + arrExch[i] + "'" + Constants.vbNewLine;

                    myLib.ExecSQL(strSql, curCon);

                    strSql = "Update " + strTempRMSDetail + Constants.vbNewLine;
                    strSql += " set Tmp_MarketRate = mk_closerate from market_rates a with (nolock) where mk_exchange = '" + arrExch[i] + "' and mk_scripcd=Tmp_Scripcd " + Constants.vbNewLine;
                    strSql += " and mk_dt= (select max(mk_dt) from market_rates with(nolock) where mk_exchange = '" + arrExch[i] + "'" + Constants.vbNewLine;
                    strSql += " and mk_dt <= '" + myutil.GetTMinusPlusdt(strLastRateDt, -1, arrExch[i]) + "') " + Constants.vbNewLine;
                    strSql += " and Tmp_Type <> 'M' and Tmp_Exchange = '" + arrExch[i] + "'" + Constants.vbNewLine;
                    myLib.ExecSQL(strSql, curCon);

                    strSql = "update " + strTempRMSDetail + Constants.vbNewLine;
                    strSql += " set Tmp_MrgHairCut = ";
                    strSql += " case Tmp_Type When 'C' Then Case When vm_exchange = 'N' then vm_applicable_var else vm_margin_rate end else (Case When vm_exchange = 'N' then vm_applicable_var else vm_margin_rate end * " + myLib.GetSysParmSt("MTFP_VARMAR", "") + " ) + (vm_max_loss * case Tmp_RegForFO When 'Y' Then " + myLib.GetSysParmSt("MTFP_ELMRGFO", "") + " else " + myLib.GetSysParmSt("MTFP_ELMNTFO", "") + " end ) end " + Constants.vbNewLine;
                    // strSql += " case Tmp_Type When 'C' Then Case When vm_exchange = 'N' then vm_applicable_var else vm_margin_rate end else (Case When vm_exchange = 'N' then vm_applicable_var else vm_margin_rate end * " + myLib.GetSysPARM("MTFP_VARMAR") + " ) + (vm_max_loss * case Tmp_RegForFO When 'Y' Then  1  else  1  end ) end " + Constants.vbNewLine;
                    strSql += " from VarMargin  " + Constants.vbNewLine;
                    strSql += " where vm_scripcd = Tmp_Scripcd and vm_exchange = '" + arrExch[i] + "'" + Constants.vbNewLine;
                    strSql += " and vm_dt =(select max(vm_dt) from VarMargin " + Constants.vbNewLine;
                    strSql += " Where vm_exchange = '" + arrExch[i] + "' " + Constants.vbNewLine;
                    strSql += " and vm_dt <= '" + myutil.GetTMinusPlusdt(strLastRateDt, -1, arrExch[i]) + "')" + Constants.vbNewLine;
                    strSql += " and Tmp_Exchange = '" + arrExch[i] + "'" + Constants.vbNewLine;
                    myLib.ExecSQL(strSql, curCon);
                }
                strSql = "update " + strTempRMSDetail + Constants.vbNewLine + "  set Tmp_MrgHairCut = " + dblHairCut + " Where Tmp_MrgHairCut < " + dblHairCut;
                myLib.ExecSQL(strSql, curCon);


                strSql = "update " + strTempRMSDetail + Constants.vbNewLine + "  set Tmp_MrgHairCut = 100 Where Tmp_MrgHairCut > 100 ";
                myLib.ExecSQL(strSql, curCon);


                //myLib.ExecSQL("Alter Table " + strTempRMSDetail + " Add Tmp_NonAppoved varchar(1) ");
                //myLib.ExecSQL("Update " + strTempRMSDetail + " Set Tmp_NonAppoved = '' ");

                //strSql = "Update " + strTempRMSDetail + Constants.vbNewLine;
                //strSql += " set Tmp_NonAppoved = 'Y' " + Constants.vbNewLine;
                //strSql += " Where Tmp_Type = 'M' and Tmp_Scripcd not in (select MTFD_SecCD from MrgTdgFin_SecuritiesDt " + Constants.vbNewLine;
                //strSql += " Where MTFD_SecDt = (Select max(MTFD_SecDt) from MrgTdgFin_SecuritiesDt where MTFD_SecDt <= '" + FDate + "') " + Constants.vbNewLine;
                //if (strExchange == "")
                //{
                //    strSql += " and (MTFD_BSE = 'Y' Or MTFD_NSE = 'Y')) " + Constants.vbNewLine;
                //}
                //else
                //{
                //    strSql += " and MTFD_" + strExchange + "SE = 'Y') " + Constants.vbNewLine;
                //}

                //myLib.ExecSQL(strSql, curCon);

                strSql = "update " + strTempRMSDetail + Constants.vbNewLine + "  set Tmp_Value = Round(Tmp_Qty*Tmp_Rate,2) Where Tmp_Type= 'M' ";
                myLib.ExecSQL(strSql, curCon);

                strSql = "update " + strTempRMSDetail + Constants.vbNewLine + "  set Tmp_Value = Round(Tmp_Qty*Tmp_MarketRate,2) Where Tmp_Type <> 'M' ";
                myLib.ExecSQL(strSql, curCon);

                strSql = "update " + strTempRMSDetail + Constants.vbNewLine + "  set Tmp_NetValue = Round(Tmp_Value*((Tmp_MrgHairCut)/100),2) Where Tmp_Type = 'M' ";
                myLib.ExecSQL(strSql, curCon);

                strSql = "update " + strTempRMSDetail + Constants.vbNewLine + "  set Tmp_NetValue = Round(Tmp_Value*((100-Tmp_MrgHairCut)/100),2) Where Tmp_Type <> 'M' ";
                myLib.ExecSQL(strSql, curCon);

                strSql = "Update " + strTempRMSSummary + Constants.vbNewLine + "  set Tmp_FundedAmount = A.Tmp_FundedAmount, Tmp_FundedMrgReq  = A.Tmp_FundedMrgReq, ";
                strSql += " Tmp_CollateralValue = A.Tmp_CollateralValue " + Constants.vbNewLine;
                strSql += " from (select Tmp_Clientcd Clientcd,";
                strSql += " Round(Sum(case Tmp_Type When 'M' Then Tmp_Value else 0 end),2) Tmp_FundedAmount, " + Constants.vbNewLine;
                strSql += " Round(Sum(case Tmp_Type When 'M' Then Tmp_NetValue else 0 end),2) Tmp_FundedMrgReq , " + Constants.vbNewLine;
                strSql += " Round(Sum(case Tmp_Type When 'C' Then Tmp_NetValue else 0 end),2) Tmp_CollateralValue " + Constants.vbNewLine;
                strSql += " from " + strTempRMSDetail + Constants.vbNewLine;
                strSql += " Group By Tmp_Clientcd ) a " + Constants.vbNewLine;
                strSql += " Where Clientcd = Tmp_Clientcd " + Constants.vbNewLine;
                myLib.ExecSQL(strSql, curCon);

                strSql = "Update " + strTempRMSSummary + Constants.vbNewLine + "  set Tmp_M2MLoss = b.M2MLoss From ( ";
                strSql += " select Tmpclientcd,Sum(M2MLoss) M2MLoss from ( ";
                strSql += " select Tmp_clientcd Tmpclientcd,Tmp_Scripcd,Round(Sum((Tmp_Rate-Tmp_MarketRate)*Tmp_Qty),2) M2MLoss " + Constants.vbNewLine;
                strSql += " From " + strTempRMSDetail + Constants.vbNewLine;
                strSql += " Where Tmp_type = 'M' " + Constants.vbNewLine;
                strSql += " Group By Tmp_clientcd,Tmp_Scripcd Having Round(Sum((Tmp_Rate-Tmp_MarketRate)*Tmp_Qty),2)  > 0 ) A Group By Tmpclientcd ) b " + Constants.vbNewLine;
                strSql += " Where Tmp_Clientcd = Tmpclientcd " + Constants.vbNewLine;
                myLib.ExecSQL(strSql, curCon);

                strSql = "Update " + strTempRMSSummary + Constants.vbNewLine + "  set Tmp_ShortFallExcess = (Tmp_CollateralFund+Tmp_CollateralValue)-(Tmp_FundedMrgReq+Tmp_M2MLoss) ";
                myLib.ExecSQL(strSql, curCon);


                strSql = "Update " + strTempRMSSummary + Constants.vbNewLine + "  set Tmp_RMSNetVal =  case when Tmp_LoanBal > Tmp_Limit then 0 else Tmp_CollateralFund + Tmp_CollateralValue - Tmp_M2MLoss - Tmp_FundedMrgReq - Case When Tmp_LoanBal > Tmp_FundedAmount then (Tmp_LoanBal - Tmp_FundedAmount) else 0 end end";
                myLib.ExecSQL(strSql, curCon);

                strSql = "select " + strTempRMSSummary + ".*,cm_name from " + strTempRMSSummary + ", Client_master WHERE cm_cd= TMP_CLIENTCD " + strClient;
                strSql += " order by  cm_name";

                dtSum = myLib.OpenDataTable(strSql, curCon);

                HttpContext.Current.Session["data"] = dtSum;


                strSql = "select Tmp_Scripcd,ss_name, SUM(Tmp_Qty) Qty,";
                strSql += " SUM(Tmp_Value) ActualCost,SUM(Tmp_Qty * Tmp_MarketRate ) ClosePrice, ";
                strSql += " SUM(Tmp_NetValue) MarginReq,Tmp_MrgHairCut,Tmp_Clientcd";
                strSql += " from " + strTempRMSDetail + ",Client_master,securities ";
                strSql += " where cm_cd=Tmp_Clientcd and Tmp_Scripcd=ss_cd and Tmp_Type='M' ";
                strSql += " Group By  Tmp_Exchange,Tmp_Clientcd,cm_name,Tmp_MrgHairCut,Tmp_Scripcd,ss_name,Tmp_MrgHairCut";
                strSql += " Order By ss_name,Tmp_Clientcd";

                DataTable dtFunded = myLib.OpenDataTable(strSql, curCon);
                HttpContext.Current.Session["DsFunded"] = dtFunded;

                strSql = "select Tmp_Scripcd,ss_name, SUM(Tmp_Qty) Qty,";
                strSql += " Tmp_MarketRate as Rate,sum(Tmp_Value) Value, Tmp_MrgHairCut HairCut,";
                strSql += " sum(Tmp_NetValue) NetValue,Tmp_Clientcd ";
                strSql += " from " + strTempRMSDetail + ",Client_master,securities ";
                strSql += " where cm_cd=Tmp_Clientcd and Tmp_Scripcd=ss_cd and Tmp_Type='C' ";
                strSql += " Group By  Tmp_Exchange,Tmp_Clientcd,cm_name,Tmp_MrgHairCut,Tmp_MarketRate,Tmp_Scripcd,ss_name";
                strSql += " Order By ss_name,Tmp_Clientcd";

                DataTable dtCollateral = myLib.OpenDataTable(strSql, curCon);
                HttpContext.Current.Session["DsCollateral"] = dtCollateral;

                strSql = "select MTtd_scripcd,MTtd_bqty,MTtd_sqty,MTtd_rate , (case MTtd_bsflag when 'B' then MTtd_bqty*MTtd_Rate when 'S' then MTtd_sqty*MTtd_Rate end) value,MTtd_Stlmnt,ss_name,MTtd_clientcd";
                strSql += " from MrgTdgFin_TRX,Securities ";
                strSql += " where  MTtd_scripcd = ss_cd ";
                strSql += "  and MTtd_dt = '" + FDate + "'";
                strSql += " and MTtd_TrxFlag = 'N'";
                strSql += " Order By ss_name";


                DataTable dtTrades = myLib.OpenDataTable(strSql, curCon);
                HttpContext.Current.Session["DsTrades"] = dtTrades;
            }



            return dtSum;



        }
        public IEnumerable<MasterMTPRMS> GetMTFRMSummaryReport(string Code, string stdate)
        {
            //strstlmnt = "BW2019006";
            //Code = "mg040";
            //strDate = "20190329";
            LibraryModel mylib = new LibraryModel(true);
            UtilityModel myutil = new UtilityModel();
            MasterMTPRMS ObjMaster = new MasterMTPRMS();


            DataTable data = (DataTable)HttpContext.Current.Session["data"];
            DataTable DsFunded = (DataTable)HttpContext.Current.Session["DsFunded"];
            DataTable DsCollateral = (DataTable)HttpContext.Current.Session["DsCollateral"];
            DataTable DsTrades = (DataTable)HttpContext.Current.Session["DsTrades"];

            ObjMaster.CustMTPClient = (from row in data.AsEnumerable()
                                       where row.Field<string>("Tmp_Clientcd").Trim() == Code.Trim()
                                       select new MTPClientData
                                       {

                                           caption = "Margin Trading Statement As on " + stdate,
                                           Tmp_Clientcd = row.Field<string>("Tmp_Clientcd"),
                                           cm_name = row.Field<string>("cm_name"),
                                           Tmp_Limit = row.Field<decimal>("Tmp_Limit"),
                                           Tmp_FundedAmount = row.Field<decimal>("Tmp_FundedAmount"),
                                           Tmp_TplusBal = row.Field<decimal>("Tmp_TplusBal"),
                                           Tmp_LoanBal = row.Field<decimal>("Tmp_LoanBal"),
                                           Tmp_CollateralFund = row.Field<decimal>("Tmp_CollateralFund"),
                                           Tmp_CollateralValue = row.Field<decimal>("Tmp_CollateralValue"),
                                           Tmp_FundedMrgReq = row.Field<decimal>("Tmp_FundedMrgReq"),
                                           Tmp_M2MLoss = row.Field<decimal>("Tmp_M2MLoss"),
                                           Tmp_ShortFallExcess = row.Field<decimal>("Tmp_ShortFallExcess")

                                       }).ToList();

            //DataRow[] result = data.Select("Tmp_Clientcd = " + Code);
            //foreach (DataRow row in result)
            //{
            //    ObjMaster.CustMTPClient = result.AsEnumerable()
            //                 .Select(R => new MTPClientData
            //                 {
            //                     caption = row["Tmp_Clientcd"].ToString(),
            //                     Tmp_Clientcd = row["Tmp_Clientcd"].ToString(),
            //                     cm_name = row["cm_name"].ToString(),
            //                     Tmp_Limit = row["Tmp_Limit"].ToString(),
            //                     Tmp_FundedAmount = row["Tmp_FundedAmount"].ToString(),
            //                     Tmp_TplusBal = row["Tmp_TplusBal"].ToString(),
            //                     Tmp_LoanBal = row["Tmp_LoanBal"].ToString(),
            //                     Tmp_CollateralFund = row["Tmp_CollateralFund"].ToString(),
            //                     Tmp_CollateralValue = row["Tmp_CollateralValue"].ToString(),
            //                     Tmp_FundedMrgReq = row["Tmp_FundedMrgReq"].ToString(),
            //                     Tmp_M2MLoss = row["Tmp_M2MLoss"].ToString(),
            //                     Tmp_ShortFallExcess = row["Tmp_ShortFallExcess"].ToString(),
            //                 }

            //                 )
            //                 .ToList();


            //}
            //ObjMaster.CustMTPClient = from customer in data.AsEnumerable()
            //                          where customer.Field<string>("Tmp_Clientcd") == Code
            //                                select new MTPClientData
            //                                {
            //                                    caption = customer.Field<string>("Tmp_Clientcd"),
            //                                    Tmp_Clientcd = customer.Field<string>("Tmp_Clientcd"),
            //                                    cm_name = customer.Field<string>("cm_name")
            //                                };



            ObjMaster.CustCollateral = (from row in DsCollateral.AsEnumerable()
                                        where row.Field<string>("Tmp_Clientcd").Trim() == Code.Trim()
                                        select new Collateral
                                        {
                                            Code = row.Field<string>("Tmp_Scripcd"),
                                            Name = row.Field<string>("ss_name"),
                                            Quantity = row.Field<decimal>("Qty"),
                                            Rate = row.Field<decimal>("Rate"),
                                            GrossValue = row.Field<decimal>("Value"),
                                            HairCut = row.Field<decimal>("HairCut"),
                                            NetValue = row.Field<decimal>("NetValue")

                                        }
                            ).ToList();



            ObjMaster.CustFunded = (from row in DsFunded.AsEnumerable()
                                    where row.Field<string>("Tmp_Clientcd").Trim() == Code.Trim()
                                    select new Funded
                                    {
                                        Code = row.Field<string>("Tmp_Scripcd"),
                                        Name = row.Field<string>("ss_name"),
                                        Quantity = row.Field<decimal>("Qty"),
                                        Cost = row.Field<decimal>("ActualCost"),
                                        Value = row.Field<decimal>("ClosePrice"),
                                        MTM = row.Field<decimal>("ActualCost"),
                                        Margin = row.Field<decimal>("Tmp_MrgHairCut"),
                                        MarginReq = row.Field<decimal>("MarginReq")

                                    }

                          )
                          .ToList();

            ObjMaster.CustTrades = (from row in DsTrades.AsEnumerable()
                                    where row.Field<string>("MTtd_Clientcd").Trim() == Code.Trim()
                                    select new Trades
                                    {
                                        Code = row.Field<string>("MTtd_scripcd"),
                                        Name = row.Field<string>("ss_name"),
                                        Settelement = row.Field<string>("MTtd_Stlmnt"),
                                        BuyQty = row.Field<decimal>("MTtd_bqty"),
                                        SellQty = row.Field<decimal>("MTtd_sqty"),
                                        Rate = row.Field<decimal>("MTtd_rate"),
                                        Value = row.Field<decimal>("value")

                                    }

                          )
                          .ToList();

            List<MasterMTPRMS> MTPRMSObj = new List<MasterMTPRMS>();
            MTPRMSObj.Add(ObjMaster);

            return MTPRMSObj;
        }
        public DataTable GetMTFClientWiseReport(string strClient, string FDate, string cmbSelectReport, string cmbSelectGroupBy, string cmbSelect)
        {

            string strTempRMSSummary = "#TmpRMSSummaryReport";
            string strTempRMSDetail = "#TmpRMSDetailReport";
            LibraryModel myLib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            UtilityDBModel mydbutil = new UtilityDBModel();
            // SqlConnection SQLConnComex = mydbutil.commexTemp_conn("Commex");

            double dblHairCut = Convert.ToDouble(myLib.fnGetSysParam("MTFP_HAIRCUT"));

            Boolean blnBSE;
            Boolean blnNSE;
            blnBSE = myLib.fnFireQuery("Sysparameter", "sp_sysvalue", "sp_parmcd", "MTFP_LICBSE", false) == "Y";
            blnNSE = myLib.fnFireQuery("Sysparameter", "sp_sysvalue", "sp_parmcd", "MTFP_LICNSE", false) == "Y";
            string strDT = myutil.dtos(FDate);


            if (strClient.Trim() != "")
            {
                switch (cmbSelect)
                {
                    case "CL":
                        {
                            strClient = " and cm_cd = '" + strClient + "'";
                            break;
                        }

                    case "GR":
                        {
                            strClient = " and cm_groupcd = '" + strClient + "'";
                            break;
                        }

                    case "FM":
                        {
                            strClient = " and cm_familycd = '" + strClient + "'";
                            break;
                        }

                    case "SB":
                        {
                            strClient = " and cm_subbroker = '" + strClient + "'";
                            break;
                        }

                    case "BR":
                        {
                            strClient = " and cm_brboffcode = '" + strClient + "'";
                            break;
                        }
                    case "ALL":
                        {
                            strClient = " ";
                            break;
                        }
                }
            }

            string strWhere = strClient;

            DataTable DtReport = null;
            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {

                curCon.Open();
                string strsql;

                //----------------------create temp table---------------------------

                strsql = "Drop Table " + strTempRMSSummary;
                myLib.ExecSQL(strsql, curCon);

                strsql = "Create Table " + strTempRMSSummary + " (";
                strsql += " Tmp_Clientcd VarChar(8),";
                strsql += " Tmp_Limit Money,";
                strsql += " Tmp_TplusBal Money,";
                strsql += " Tmp_LoanBal Money,";
                strsql += " Tmp_FundedAmount Money,";
                strsql += " Tmp_FundedMrgReq Money,";
                strsql += " Tmp_CollateralFund Money,";
                strsql += " Tmp_CollateralValue Money,";
                strsql += " Tmp_ShortFallExcess Money,";
                strsql += " Tmp_TradeValue Money,";
                strsql += " Tmp_M2MLoss Money)";
                myLib.ExecSQL(strsql, curCon);

                strsql = "Drop Table " + strTempRMSDetail;
                myLib.ExecSQL(strsql, curCon);

                strsql = "Create Table " + strTempRMSDetail + " (";
                strsql += " Tmp_Type Char(1),";
                strsql += " Tmp_Exchange Char(1),";
                strsql += " Tmp_Clientcd VarChar(8),";
                strsql += " Tmp_Scripcd VarChar(6),";
                strsql += " Tmp_RegForFO VarChar(1),";
                strsql += " Tmp_Qty Numeric,";
                strsql += " Tmp_Rate Money,";
                strsql += " Tmp_MarketRate Money,";
                strsql += " Tmp_Value Money,";
                strsql += " Tmp_MrgHairCut Money,";
                strsql += " Tmp_NetValue Money)";
                myLib.ExecSQL(strsql, curCon);


                //-----------------------------------------------------------------



                strsql = "Insert into " + strTempRMSSummary;
                strsql += " select MTFC_CMcd,MTFC_AllowLimit,0,0,0,0,0,0,0,0,0";
                strsql += " from MrgTdgFin_Clients,Client_master ";
                strsql += " Where cm_cd = MTFC_CMcd and MTFC_Status='A' and MTFC_RegDt<='" + strDT + "'and exists " + myutil.LoginAccess("MTFC_CMcd") + "" + strWhere + "";

                myLib.ExecSQL(strsql, curCon);

                strsql = "Update " + strTempRMSSummary;
                strsql += " set Tmp_TplusBAL = A.ld_amount ";
                strsql += " from (select MTFC_CMcd,Sum(ld_amount) ld_amount ";
                strsql += " from Ledger,MrgTdgFin_Clients,Client_master";
                strsql += " Where cm_cd = MTFC_CMcd and (ld_clientcd = cm_cd " + (myLib.fnGetSysParam("MTFP_MRGNBAL") == "Y" ? "or ld_clientcd= cm_brkggroup" : "") + ")";
                strsql += " and ld_dt <='" + strDT + "' "; // and " & mfnGetLedType(cmbTPLedgerBal)
                strsql += " Group By MTFC_CMcd ) a ";
                strsql += " Where MTFC_CMcd = Tmp_Clientcd ";

                myLib.ExecSQL(strsql, curCon);

                // T+2 day loan balance
                //string strT2 = mfnGetT2Dt[strExchange, strDT];
                //string strT2 = myutil.AddDayDT(strDT, 2).ToString("yyyyMMdd");
                //  string strT2 = myLib.mfnGetT2Dt("", strDT);
                string strT2 = myutil.mfnGetT2Dt("", strDT);
                strsql = "Update " + strTempRMSSummary + Constants.vbNewLine;
                strsql += " set Tmp_LoanBal = A.ld_amount " + Constants.vbNewLine;
                strsql += " from (select MTFC_CMcd,Sum(ld_amount) ld_amount " + Constants.vbNewLine;
                strsql += " from Ledger,MrgTdgFin_Clients" + Constants.vbNewLine;
                strsql += " Where ld_clientcd = Rtrim(MTFC_CMcd) + '" + myLib.fnGetSysParam("MTFP_SUFFIX") + "' and ld_documentType not in ('P','R') ";
                strsql += " and ld_dt <= '" + strT2 + "' " + Constants.vbNewLine;
                strsql += " and left(ld_DPID,1) = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                strsql += " Group By MTFC_CMcd ) a " + Constants.vbNewLine;
                strsql += " Where MTFC_CMcd = Tmp_Clientcd " + Constants.vbNewLine;

                myLib.ExecSQL(strsql, curCon);

                strsql = "Update " + strTempRMSSummary;
                strsql += " set Tmp_CollateralFund = A.ld_amount ";
                strsql += " from (select MTFC_CMcd,Sum(-ld_amount) ld_amount ";
                strsql += " from Ledger,MrgTdgFin_Clients";
                strsql += " Where ld_clientcd = Rtrim(MTFC_CMcd) + '" + myLib.fnGetSysParam("MTFP_SUFFIX") + "' and ld_documentType in ('P','R') ";
                strsql += " and ld_dt <='" + strDT + "'";
                strsql += " and left(ld_DPID,1) = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                strsql += " Group By MTFC_CMcd Having Sum(-ld_amount) >  0 ) a ";
                strsql += " Where MTFC_CMcd = Tmp_Clientcd ";

                myLib.ExecSQL(strsql, curCon);

                strsql = "Update " + strTempRMSSummary;
                strsql += " set Tmp_TradeValue = A.TradeValue ";
                strsql += " from (select MTtd_clientcd, Round(Sum((MTtd_bqty-MTtd_sqty)*MTtd_Rate),2) TradeValue ";
                strsql += " from MrgTdgFin_TRX,Settlements ";
                strsql += " Where MTtd_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' and MTTd_stlmnt = se_stlmnt and se_shpayoutdt ='" + strDT + "'";
                strsql += " Group By MTtd_clientcd ) a ";
                strsql += " Where MTtd_clientcd = Tmp_Clientcd ";
                myLib.ExecSQL(strsql, curCon);

                strsql = " Insert into " + strTempRMSDetail;
                strsql += " select type,";
                strsql += " case dm_OurDP When '" + myLib.fnGetSysParam("MTFP_DMTBSE").Trim().Trim() + "' Then 'B' When '" + myLib.fnGetSysParam("MTFP_DMTNSE").Trim().Trim() + "' Then 'N' else '' end,";
                strsql += " dm_clientcd,dm_Scripcd,'N',Sum(Qty),0,0,0,0,0 from ( ";

                strsql += " select 'X' type,dm_OurDP,dm_clientcd,dm_Scripcd,Sum(-dm_qty) Qty";
                strsql += " from Demat,Settlements,client_master";
                strsql += " Where dm_stlmnt=se_stlmnt and dm_clientcd=cm_cd ";
                strsql += " and se_shpayoutdt <='" + strDT + "'and exists " + myutil.LoginAccess("dm_clientcd") + "" + strWhere + "";

                strsql += " and dm_ourDP in ('" + myLib.fnGetSysParam("MTFP_DMTBSE") + "','" + myLib.fnGetSysParam("MTFP_DMTNSE") + "')";

                strsql += " and dm_type ='BC' and dm_locked ='N' and dm_transfered = 'N'";
                strsql += " Group By dm_OurDP,dm_clientcd,dm_Scripcd";

                // Future Date Payout to Client & Benf to Pool
                strsql += " union all ";
                strsql += " select 'X' type,dm_OurDP,dm_clientcd,dm_Scripcd,Sum(-dm_qty) Qty";
                strsql += " from Demat,Settlements,client_master";
                strsql += " Where dm_stlmnt=se_stlmnt and dm_clientcd=cm_cd ";
                strsql += " and se_shpayoutdt <='" + strDT + "'";
                strsql += " and dm_execdt > '" + strDT + "'and exists " + myutil.LoginAccess("dm_clientcd") + "" + strWhere + "";


                strsql += " and dm_ourDP in ('" + myLib.fnGetSysParam("MTFP_DMTBSE") + "','" + myLib.fnGetSysParam("MTFP_DMTNSE") + "')";
                strsql += " and dm_type ='BC' and (dm_locked <>'N' Or dm_transfered <> 'N') ";
                strsql += " Group By dm_OurDP,dm_clientcd,dm_Scripcd";

                // Expected
                strsql += " union all ";
                strsql += " select 'X',dm_OurDP,dm_clientcd,dm_Scripcd,Sum(-dm_qty)";
                strsql += " from Demat,Settlements,client_master";
                strsql += " Where dm_stlmnt=se_stlmnt and dm_clientcd=cm_cd ";
                strsql += " and se_stdt <= '" + strDT + "'";
                strsql += " and se_shpayoutdt > '" + strDT + "'and exists " + myutil.LoginAccess("dm_clientcd") + "" + strWhere + "";


                strsql += " and dm_ourDP in ('" + myLib.fnGetSysParam("MTFP_DMTBSE") + "','" + myLib.fnGetSysParam("MTFP_DMTNSE") + "')";

                strsql += " and dm_type ='BC'";
                strsql += " Group By dm_OurDP,dm_clientcd,dm_Scripcd";


                strsql += " ) a Group By type,dm_OurDP,dm_clientcd,dm_Scripcd ";

                myLib.ExecSQL(strsql, curCon);


                strsql = "Insert into " + strTempRMSDetail;
                strsql += " select 'M',MTtd_Exchange,MTtd_clientcd,MTtd_scripcd,'N',Sum(MTtd_bqty-MTtd_sqty),Round(Sum((MTtd_bqty-MTtd_sqty)*MTtd_rate)/Sum(MTtd_bqty-MTtd_sqty),2),0,0,0,0";
                strsql += " from MrgTdgFin_TRX,client_master ";
                strsql += " Where MTtd_clientcd=cm_cd and MTtd_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "' and MTtd_dt <= '" + strDT + "' and exists " + myutil.LoginAccess("MTtd_clientcd") + "" + strWhere + "";

                strsql += " Group By MTtd_Exchange,MTtd_clientcd,MTtd_scripcd";   // ,MTtd_CntStlmnt
                strsql += " Having Sum(MTtd_bqty-MTtd_sqty) <> 0 ";
                myLib.ExecSQL(strsql, curCon);


                strsql = "Insert into " + strTempRMSDetail;
                strsql += " select 'C',Tmp_Exchange,Tmp_Clientcd,Tmp_Scripcd,'N',Sum(case Tmp_Type When 'X' Then Tmp_Qty else -Tmp_Qty end),0,0,0,0,0";
                strsql += " from " + strTempRMSDetail;
                strsql += " Group By Tmp_Exchange,Tmp_Clientcd,Tmp_Scripcd ";
                strsql += " Having Sum(case Tmp_Type When 'X' Then Tmp_Qty else -Tmp_Qty end) > 0 ";
                myLib.ExecSQL(strsql, curCon);

                strsql = " Delete " + strTempRMSDetail + " where Tmp_Type = 'X' ";
                myLib.ExecSQL(strsql, curCon);


                strsql = "Delete " + strTempRMSDetail + Constants.vbNewLine + " Where Tmp_Type = 'C' and Tmp_Scripcd not in (select MTFD_SecCD from MrgTdgFin_SecuritiesDt ";
                strsql += " Where MTFD_SecDt = (Select max(MTFD_SecDt) from MrgTdgFin_SecuritiesDt where MTFD_SecDt <= '" + strDT + "') and (MTFD_BSE = 'Y' Or MTFD_NSE = 'Y'))";
                myLib.ExecSQL(strsql, curCon);


                //string[] arrExch;

                // arrExch = ((IIf(blnBSE, "B/", "") + IIf(blnNSE, "N/", "")).s("/");// BSE, NSE

                string[] arrExch = ((blnBSE ? "B/" : "") + (blnNSE ? "N/" : "")).Split('/');


                for (int i = 0; i < arrExch.Length - 1; i++)
                {
                    string line = arrExch[i];
                    if (line != "")
                    {
                        strsql = "Update " + strTempRMSDetail;
                        strsql += " set Tmp_MarketRate = mk_closerate from market_rates a with (nolock) where mk_exchange = '" + line + "' and mk_scripcd=Tmp_Scripcd ";
                        strsql += " and mk_dt= (select max(mk_dt) from market_rates with(nolock) where mk_exchange = '" + line + "'";
                        strsql += " and mk_dt <='" + strDT + "') ";
                        strsql += " and Tmp_Type= 'M' and Tmp_Exchange = '" + line + "'";
                        myLib.ExecSQL(strsql, curCon);

                        strsql = "Update " + strTempRMSDetail;
                        strsql += " set Tmp_MarketRate = mk_closerate from market_rates a with (nolock) where mk_exchange = '" + line + "' and mk_scripcd=Tmp_Scripcd ";
                        strsql += " and mk_dt= (select max(mk_dt) from market_rates with(nolock) where mk_exchange = '" + line + "'";
                        strsql += " and mk_dt <'" + strDT + "') ";
                        strsql += " and Tmp_Type <> 'M' and Tmp_Exchange = '" + line + "'";
                        myLib.ExecSQL(strsql, curCon);

                        strsql = "Update " + strTempRMSDetail;
                        strsql += " Set Tmp_RegForFO = 'Y'  ";
                        strsql += " From Product_master, Securities ";
                        strsql += " Where pm_Exchange = '" + line + "' and pm_assetcd = " + (line == "B" ? "ss_Bsymbol" : "ss_nsymbol");

                        strsql += " and Tmp_Scripcd  = ss_cd and Tmp_Exchange = '" + line + "'";
                        if (Convert.ToInt32(myLib.fnFireQuery("Product_Expiry", "Count(0)", "pe_expirydt >= '" + strDT + "' and pe_exchange", line, false)) > 0)
                            strsql += " and pm_assetcd in ( select pe_assetcd from Product_Expiry Where pe_exchange = '" + line + "' and pe_expirydt >= '" + strDT + "')";
                        myLib.ExecSQL(strsql, curCon);

                        strsql = "update " + strTempRMSDetail;
                        strsql += " set Tmp_MrgHairCut = ";
                        strsql += " case Tmp_Type When 'C' Then Case When vm_exchange = 'N' then vm_applicable_var else vm_margin_rate end else (Case When vm_exchange = 'N' then vm_applicable_var else vm_margin_rate end * " + myLib.fnGetSysParam("MTFP_VARMAR") + " ) + (vm_max_loss * case Tmp_RegForFO When 'Y' Then " + myLib.fnGetSysParam("MTFP_ELMRGFO") + " else " + myLib.fnGetSysParam("MTFP_ELMNTFO") + " end ) end ";
                        strsql += " from VarMargin  ";
                        strsql += " where vm_scripcd = Tmp_Scripcd and vm_exchange = '" + line + "'";
                        strsql += " and vm_dt =(select max(vm_dt) from VarMargin ";
                        strsql += " Where vm_exchange = '" + line + "' ";
                        strsql += " and vm_dt <'" + strDT + "')";
                        strsql += " and Tmp_Exchange = '" + line + "'";
                        myLib.ExecSQL(strsql, curCon);
                    }

                }

                strsql = "update " + strTempRMSDetail + "  set Tmp_MrgHairCut = " + dblHairCut + " Where Tmp_MrgHairCut < " + dblHairCut;
                myLib.ExecSQL(strsql, curCon);

                strsql = "update " + strTempRMSDetail + "  set Tmp_Value = Round(Tmp_Qty*Tmp_Rate,2) Where Tmp_Type= 'M' ";
                myLib.ExecSQL(strsql, curCon);

                strsql = "update " + strTempRMSDetail + "  set Tmp_Value = Round(Tmp_Qty*Tmp_MarketRate,2) Where Tmp_Type <> 'M' ";
                myLib.ExecSQL(strsql, curCon);

                strsql = "update " + strTempRMSDetail + "  set Tmp_NetValue = Round(Tmp_Value*((Tmp_MrgHairCut)/100),2) Where Tmp_Type = 'M' ";
                myLib.ExecSQL(strsql, curCon);

                strsql = "update " + strTempRMSDetail + "  set Tmp_NetValue = Round(Tmp_Value*((100-Tmp_MrgHairCut)/100),2) Where Tmp_Type <> 'M' ";
                myLib.ExecSQL(strsql, curCon);

                strsql = "Update " + strTempRMSSummary + "  set Tmp_FundedAmount = A.Tmp_FundedAmount, Tmp_FundedMrgReq  = A.Tmp_FundedMrgReq, ";
                strsql += " Tmp_CollateralValue = A.Tmp_CollateralValue ";
                strsql += " from (select Tmp_Clientcd Clientcd,";
                strsql += " Round(Sum(case Tmp_Type When 'M' Then Tmp_Value else 0 end),2) Tmp_FundedAmount, ";
                strsql += " Round(Sum(case Tmp_Type When 'M' Then Tmp_NetValue else 0 end),2) Tmp_FundedMrgReq , ";
                strsql += " Round(Sum(case Tmp_Type When 'C' Then Tmp_NetValue else 0 end),2) Tmp_CollateralValue ";
                strsql += " from " + strTempRMSDetail;
                strsql += " Group By Tmp_Clientcd ) a ";
                strsql += " Where Clientcd = Tmp_Clientcd ";
                myLib.ExecSQL(strsql, curCon);

                strsql = "Update " + strTempRMSSummary + "  set Tmp_M2MLoss = A.M2MLoss ";
                strsql += " From ( select Tmp_clientcd Tmpclientcd, Round(Sum((Tmp_Rate-Tmp_MarketRate)*Tmp_Qty),2) M2MLoss ";
                strsql += " From " + strTempRMSDetail;
                strsql += " Where Tmp_type = 'M' and Tmp_Rate > Tmp_MarketRate  ";
                strsql += " Group By Tmp_clientcd) A ";
                strsql += " Where Tmp_Clientcd = Tmpclientcd ";
                myLib.ExecSQL(strsql, curCon);

                strsql = "Update " + strTempRMSSummary + "  set Tmp_ShortFallExcess = (Tmp_CollateralFund+Tmp_CollateralValue)-(Tmp_FundedMrgReq+Tmp_M2MLoss) ";
                myLib.ExecSQL(strsql, curCon);

                string StrField = "";
                string strOrderBY = "";
                string strGroupBy = "";

                if (cmbSelectReport == "C")
                {
                    if (cmbSelectGroupBy == "None")
                    {
                        StrField = "D.Tmp_Clientcd as Code,cm_name as Cname,bm_email,cm_email,bm_branchcd, '' as HName,";
                        strOrderBY = " Order By cm_name,D.Tmp_Clientcd"; // " & IIf(blnmail = True, IIf(chkBranchmail.Checked = True, "bm_email,", "cm_email,"), "") & " 
                        strGroupBy = " Group By D.Tmp_Clientcd,cm_name,bm_email,cm_email,bm_branchcd";
                    }
                    else if (cmbSelectGroupBy == "Scrip")
                    {
                        StrField = " Tmp_Scripcd as Code,ss_name as Cname,D.Tmp_Clientcd,cm_name,cm_name +' ['+ D.Tmp_Clientcd +']' as HName,Tmp_Rate,Tmp_MarketRate,Tmp_MrgHairCut,bm_email,cm_email,bm_branchcd,";
                        strOrderBY = " Order By  cm_name,D.Tmp_Clientcd,ss_name,Tmp_Scripcd"; // " & IIf(blnmail = True, IIf(chkBranchmail.Checked = True, "bm_email,", "cm_email,"), "") & "
                        strGroupBy = " Group By D.Tmp_Clientcd,cm_name,Tmp_Scripcd,ss_name,Tmp_Rate,Tmp_MarketRate,Tmp_MrgHairCut,bm_email,cm_email,bm_branchcd";
                    }
                }
                else if (cmbSelectReport == "S")
                {
                    if (cmbSelectGroupBy == "None")
                    {
                        StrField = " Tmp_Scripcd as Code,ss_name as Cname,''  as HName,";
                        strOrderBY = " Order By ss_name,Tmp_Scripcd";
                        strGroupBy = " Group By Tmp_Scripcd,ss_name,Tmp_MrgHairCut";
                    }
                    else if (cmbSelectGroupBy == "Client")
                    {
                        StrField = "cm_cd Code,cm_name as Cname,ss_name,Tmp_Scripcd,ss_name +' ['+ Tmp_Scripcd +']' as HName ,";
                        strOrderBY = " Order By ss_name,Tmp_Scripcd,cm_name,cm_cd";
                        strGroupBy = " Group By Tmp_Scripcd,ss_name,cm_cd,cm_name,Tmp_MrgHairCut";
                    }
                }
                string strSql = "";

                strSql = "select " + StrField + " SUM(Tmp_Qty) Qty,";
                strSql += " sum(Tmp_Value) Value , sum(Tmp_NetValue) NetValue , ";
                strSql += " SUM(Tmp_Qty*Tmp_Rate) ActualCost,SUM(Tmp_Qty * Tmp_MarketRate ) MarketValue, s.tmp_CollateralFund tmp_CollateralFund,((SUM(Tmp_Qty * Tmp_MarketRate ))-(SUM(Tmp_Qty*Tmp_Rate))) MTM";
                strSql += " from " + strTempRMSDetail + " D, " + strTempRMSSummary + " S,Client_master,securities,Branch_master ";
                strSql += " where cm_cd=D.Tmp_Clientcd and Tmp_Scripcd=ss_cd and D.Tmp_Clientcd  = s.Tmp_Clientcd and cm_brboffcode = bm_branchcd ";
                strSql += " and Tmp_Type='M'";
                strSql += strGroupBy + " , s.tmp_CollateralFund " + strOrderBY;




                DtReport = myLib.OpenDataTable(strSql, curCon);


            }


            return DtReport;
        }
        public DataTable GetMTFSecurityListReport1(string Fdate)
        {
            LibraryModel myLib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            UtilityDBModel mydbutil = new UtilityDBModel();
            Boolean blnBSE;
            Boolean blnNSE;
            blnBSE = myLib.fnFireQuery("Sysparameter", "sp_sysvalue", "sp_parmcd", "MTFP_LICBSE", false) == "Y";
            blnNSE = myLib.fnFireQuery("Sysparameter", "sp_sysvalue", "sp_parmcd", "MTFP_LICNSE", false) == "Y";
            string strDT = myutil.dtos(Fdate);

            DataTable dtsum = null;
            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {

                curCon.Open();
                string strSql;

                //----------------------create temp table---------------------------

                strSql = "Drop Table #TmpSecurity";
                myLib.ExecSQL(strSql, curCon);

                strSql = "Create Table #TmpSecurity (";
                strSql += " Tmp_Scripcd Char(6),";
                strSql += " Tmp_BSE VarChar(3),";
                strSql += " Tmp_NSE VarChar(3),";
                strSql += " Tmp_MSEI VarChar(3),";
                strSql += " Tmp_RegForFOBSE VarChar(1),";
                strSql += " Tmp_VarMarginBSE Money,";
                strSql += " Tmp_ELMBSE Money,";
                strSql += " Tmp_RegForFONSE VarChar(1),";
                strSql += " Tmp_VarMarginNSE Money,";
                strSql += " Tmp_ELMNSE Money )";
                myLib.ExecSQL(strSql, curCon);

                strSql = "Insert Into #TmpSecurity ";
                strSql += " select MTFD_SecCD,";
                strSql += " Case MTFD_BSE When 'Y' then 'Yes' else 'No' end , ";
                strSql += " Case MTFD_NSE When 'Y' then 'Yes' else 'No' end , ";
                strSql += " Case MTFD_MSEI When 'Y' then 'Yes' else 'No' end ,'', 0, 0,'',0,0 ";
                strSql += " From MrgTdgFin_SecuritiesDt";
                strSql += " Where MTFD_SecDt = (Select max(MTFD_SecDt) from MrgTdgFin_SecuritiesDt where MTFD_SecDt <= '" + strDT + "') ";
                strSql += " and (MTFD_BSE= 'Y' or MTFD_NSE='Y' or MTFD_MSEI= 'Y')";
                myLib.ExecSQL(strSql, curCon);

                if (blnNSE)
                {
                    strSql = "Update #TmpSecurity";
                    strSql += " Set Tmp_RegForFONSE = 'Y'  ";
                    strSql += " From Product_master, Securities  ";
                    strSql += " Where pm_Exchange = 'N' and pm_assetcd = ss_nsymbol ";
                    strSql += " and Tmp_Scripcd  = ss_cd ";

                    if (Conversion.Val(myLib.fnFireQuery("Product_Expiry", "Count(0)", "pe_expirydt >= '" + strDT + "' and pe_exchange", "N", true)) > 0)
                    {
                        strSql += " and pm_assetcd in ( select pe_assetcd from Product_Expiry Where pe_exchange = 'N' and pe_expirydt >= '" + strDT + "')";
                    }
                    myLib.ExecSQL(strSql, curCon);
                }
                if (blnBSE)
                {
                    strSql = "Update #TmpSecurity ";
                    strSql += " Set Tmp_RegForFOBSE = 'Y'  ";
                    strSql += " From Product_master, Securities  ";
                    strSql += " Where pm_Exchange = 'B' and pm_assetcd = ss_Bsymbol ";
                    strSql += " and Tmp_Scripcd  = ss_cd ";
                    if (Conversion.Val(myLib.fnFireQuery("Product_Expiry", "Count(0)", "pe_expirydt >= '" + strDT + "' and pe_exchange", "B", true)) > 0)
                    {
                        strSql += " and pm_assetcd in ( select pe_assetcd from Product_Expiry Where pe_exchange = 'B' and pe_expirydt >= '" + strDT + "')";
                    }
                    myLib.ExecSQL(strSql, curCon);
                }

                string[] arrExch = ((blnBSE ? "B/" : "") + (blnNSE ? "N/" : "")).Split('/');

                foreach (string line in arrExch)
                {
                    if (line != "")
                    {
                        strSql = "Update #TmpSecurity  ";
                        strSql += " Set Tmp_VarMargin" + line + "SE=";
                        strSql += " (Case When vm_exchange = 'N' then vm_applicable_var else vm_margin_rate end * " + myLib.fnGetSysParam("MTFP_VARMAR") + " )";
                        strSql += " From VarMargin  ";
                        strSql += " where vm_scripcd = Tmp_Scripcd and vm_exchange = '" + line + "'";
                        strSql += " and vm_dt =(select max(vm_dt) from VarMargin ";
                        strSql += " Where vm_exchange = '" + line + "' ";
                        strSql += " and vm_dt <='" + strDT + "')";
                        myLib.ExecSQL(strSql, curCon);
                        strSql = "Update #TmpSecurity  ";
                        strSql += "Set Tmp_ELM" + line + "SE=";
                        strSql += " (vm_max_loss * case Tmp_RegForFO" + line + "SE When 'Y' Then " + myLib.fnGetSysParam("MTFP_ELMRGFO") + " else " + myLib.fnGetSysParam("MTFP_ELMNTFO") + "  end ) ";
                        strSql += " From VarMargin  ";
                        strSql += " where vm_scripcd = Tmp_Scripcd and vm_exchange = '" + line + "'";
                        strSql += " and vm_dt =(select max(vm_dt) from VarMargin ";
                        strSql += " Where vm_exchange = '" + line + "' ";
                        strSql += " and vm_dt <='" + strDT + "')";
                        myLib.ExecSQL(strSql, curCon);

                    }
                }
                strSql = "Select MTFS_SecCD, MTFS_Lname, ";
                strSql += " Case MTFS_BSE When 'Y' then 'Yes' else 'No' end MTFS_BSE, ";
                strSql += " Case MTFS_NSE When 'Y' then 'Yes' else 'No' end MTFS_NSE, ";
                strSql += " Case MTFS_MSEI When 'Y' then 'Yes' else 'No' end MTFS_MSEI, ";
                strSql += " Case Tmp_RegForFOBSE When 'Y' then 'Yes' else 'No' end Tmp_RegForFOBSE ,";
                strSql += " Case Tmp_RegForFONSE When 'Y' then 'Yes' else 'No' end Tmp_RegForFONSE ,";
                strSql += " Tmp_VarMarginBSE, Tmp_ELMBSE, (Tmp_VarMarginBSE + Tmp_ELMBSE) TotalBSE, ";
                strSql += " case when (Tmp_VarMarginBSE + Tmp_ELMBSE) > 0 then (round(100/(Tmp_VarMarginBSE + Tmp_ELMBSE),2)) else '0' end ExposureBSE,";
                strSql += " Tmp_RegForFONSE,";
                strSql += " Tmp_VarMarginNSE, Tmp_ELMNSE, (Tmp_VarMarginNSE + Tmp_ELMNSE) TotalNSE, ";
                strSql += " case when (Tmp_VarMarginNSE + Tmp_ELMNSE)  > 0 then (round(100/(Tmp_VarMarginNSE + Tmp_ELMNSE),2)) else '0' end ExposureNSE";

                strSql += ",'" + blnNSE + "' as  blnNSE";

                strSql += ",'" + blnBSE + "' as  blnBSE";

                strSql += " From #TmpSecurity, MrgTdgFin_Securities";
                strSql += " Where MTFS_SecCD = Tmp_Scripcd ";
                strSql += " And MTFS_Status= 'A' ";
                strSql += " And (MTFS_BSE= 'Y' or MTFS_NSE='Y' or MTFS_MSEI= 'Y')";
                strSql += " Order by MTFS_Lname,MTFS_SecCD";
                myLib.ExecSQL(strSql, curCon);

                dtsum = myLib.OpenDataTable(strSql, curCon);




                return dtsum;
            }



        }

        public DataTable GetMTFSecurityListReport(string Fdate)
        {
            LibraryModel myLib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            UtilityDBModel mydbutil = new UtilityDBModel();
            Boolean blnBSE;
            Boolean blnNSE;
            blnBSE = myLib.fnFireQuery("Sysparameter", "sp_sysvalue", "sp_parmcd", "MTFP_LICBSE", false) == "Y";
            blnNSE = myLib.fnFireQuery("Sysparameter", "sp_sysvalue", "sp_parmcd", "MTFP_LICNSE", false) == "Y";
            string strDT = myutil.dtos(Fdate);

            DataTable dtsum = null;
            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {

                curCon.Open();
                string strSql;

                //----------------------create temp table---------------------------

                strSql = "Drop Table #TmpSecurity";
                myLib.ExecSQL(strSql, curCon);

                strSql = "Create Table #TmpSecurity (";
                strSql += " Tmp_Scripcd Char(6),";
                strSql += " Tmp_BSE VarChar(3),";
                strSql += " Tmp_NSE VarChar(3),";
                strSql += " Tmp_MSEI VarChar(3),";
                strSql += " Tmp_RegForFO VarChar(1),";
                strSql += " Tmp_VarMarginBSE Money,";
                strSql += " Tmp_ELMBSE Money,";
                strSql += " Tmp_VarMarginNSE Money,";
                strSql += " Tmp_ELMNSE Money )";
                myLib.ExecSQL(strSql, curCon);

                strSql = "Insert Into #TmpSecurity " + Constants.vbNewLine;
                strSql += " select MTFD_SecCD,";
                strSql += " Case MTFD_BSE When 'Y' then 'Yes' else 'No' end , " + Constants.vbNewLine;
                strSql += " Case MTFD_NSE When 'Y' then 'Yes' else 'No' end , " + Constants.vbNewLine;
                strSql += " Case MTFD_MSEI When 'Y' then 'Yes' else 'No' end ,'', 0, 0,0,0 " + Constants.vbNewLine;
                strSql += " From MrgTdgFin_SecuritiesDt" + Constants.vbNewLine;
                strSql += " Where MTFD_SecDt = (Select max(MTFD_SecDt) from MrgTdgFin_SecuritiesDt where MTFD_SecDt <= '" + strDT + "') " + Constants.vbNewLine;
                strSql += " and (MTFD_BSE= 'Y' or MTFD_NSE='Y' or MTFD_MSEI= 'Y')" + Constants.vbNewLine;
                myLib.ExecSQL(strSql, curCon);



                strSql = "Update #TmpSecurity" + Constants.vbNewLine;
                strSql += " Set Tmp_RegForFO = 'Y'  " + Constants.vbNewLine;
                strSql += " From Product_master, Securities  " + Constants.vbNewLine;
                strSql += " Where pm_assetcd = Case pm_Exchange When 'B' Then ss_Bsymbol Else ss_nsymbol End and pm_segment = 'F' " + Constants.vbNewLine;
                strSql += " and Tmp_Scripcd  = ss_cd " + Constants.vbNewLine;
                strSql += " and exists ( select pe_assetcd from Product_Expiry Where pe_assetcd = pm_assetcd and pe_exchange = pm_exchange and pe_segment = 'F' and pe_expirydt >= '" + strDT + "')";
                myLib.ExecSQL(strSql, curCon);


                string[] arrExch = ((blnBSE ? "B/" : "") + (blnNSE ? "N/" : "")).Split('/');

                foreach (string line in arrExch)
                {
                    if (line != "")
                    {
                        strSql = "Update #TmpSecurity  " + Constants.vbNewLine;
                        strSql += " Set Tmp_VarMargin" + line + "SE=" + Constants.vbNewLine;
                        strSql += " (Case When vm_exchange = 'N' then vm_applicable_var else vm_margin_rate end * " + myLib.fnGetSysParam("MTFP_VARMAR") + " )";
                        strSql += " From VarMargin  " + Constants.vbNewLine;
                        strSql += " where vm_scripcd = Tmp_Scripcd and vm_exchange = '" + line + "'" + Constants.vbNewLine;
                        strSql += " and vm_dt =(select max(vm_dt) from VarMargin " + Constants.vbNewLine;
                        strSql += " Where vm_exchange = '" + line + "' " + Constants.vbNewLine;
                        strSql += " and vm_dt <='" + strDT + "')" + Constants.vbNewLine;
                        myLib.ExecSQL(strSql, curCon);
                        strSql = "Update #TmpSecurity  " + Constants.vbNewLine;
                        strSql += "Set Tmp_ELM" + line + "SE=" + Constants.vbNewLine;
                        strSql += " (vm_max_loss * case Tmp_RegForFO When 'Y' Then " + myLib.fnGetSysParam("MTFP_ELMRGFO") + " else " + myLib.fnGetSysParam("MTFP_ELMNTFO") + "  end ) " + Constants.vbNewLine;
                        strSql += " From VarMargin  " + Constants.vbNewLine;
                        strSql += " where vm_scripcd = Tmp_Scripcd and vm_exchange = '" + line + "'" + Constants.vbNewLine;
                        strSql += " and vm_dt =(select max(vm_dt) from VarMargin " + Constants.vbNewLine;
                        strSql += " Where vm_exchange = '" + line + "' " + Constants.vbNewLine;
                        strSql += " and vm_dt <='" + strDT + "')" + Constants.vbNewLine;
                        myLib.ExecSQL(strSql, curCon);

                    }
                }

                strSql = "Select MTFS_SecCD, MTFS_Lname,MTFS_NSymbol, Tmp_BSE , Tmp_NSE , Tmp_MSEI , " + Constants.vbNewLine;
                strSql += " Case Tmp_RegForFO When 'Y' then 'Yes' else 'No' end Tmp_RegForFO ,";
                strSql += " Tmp_VarMarginBSE, Tmp_ELMBSE, (Tmp_VarMarginBSE + Tmp_ELMBSE) TotalBSE, " + Constants.vbNewLine;
                strSql += " Tmp_VarMarginNSE, Tmp_ELMNSE, (Tmp_VarMarginNSE + Tmp_ELMNSE) TotalNSE " + Constants.vbNewLine;
                strSql += ",'" + blnNSE + "' as  blnNSE";

                strSql += ",'" + blnBSE + "' as  blnBSE";
                strSql += " From #TmpSecurity, MrgTdgFin_Securities" + Constants.vbNewLine;
                strSql += " Where Tmp_Scripcd = MTFS_SecCD " + Constants.vbNewLine;
                strSql += " Order by MTFS_Lname,MTFS_SecCD";
                myLib.ExecSQL(strSql, curCon);

                dtsum = myLib.OpenDataTable(strSql, curCon);




                return dtsum;
            }



        }
        public DataTable GetMTFTradeListingReport(string Select = "", string Code = "", string FDate = "", string ToDate = "", string ClientType = "")
        {
            string strwhere = "";
            string StrField = "";
            string StrTable = "";
            string strOrderBY = "";

            UtilityModel myutil = new UtilityModel();
            LibraryModel myLib = new LibraryModel();
            DataTable dtsum = null;

            //FDate = myutil.dtos(FDate);
            //ToDate = myutil.dtos(ToDate);

            strOrderBY = "MTtd_dt";
            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {

                curCon.Open();

                string strSql;
                if (ClientType == "Client")
                {
                    StrField = " cm_cd HName,";
                    strOrderBY = " cm_name,cm_cd";
                    StrTable = "";
                }
                else if (ClientType == "Scrip")
                {
                    StrField = " ss_name +' ['+ ss_cd +']' as HName,";
                    strOrderBY = "ss_name,ss_cd,MTtd_dt ";
                    StrTable = "";
                }
                else if (ClientType == "Branch")
                {
                    StrField = "bm_branchname +' ['+ cm_brboffcode +']' HName,";
                    strOrderBY = "bm_branchname,cm_brboffcode,MTtd_dt,cm_name,ss_name ";
                    StrTable = ",Branch_Master";
                    strwhere += " and cm_brboffcode = bm_branchcd";
                }
                else if (ClientType == "Group")
                {
                    StrField = "gr_desc +' ['+ cm_groupcd +']' as HName,";
                    strOrderBY = "gr_desc,cm_groupcd,MTtd_dt,cm_name,ss_name  ";
                    StrTable = ",Group_Master";
                    strwhere += " and cm_groupcd = gr_cd";
                }
                else if (ClientType == "Family")
                {
                    StrField = "fm_desc +' ['+ cm_familycd +']'  as HName,";
                    strOrderBY = "fm_desc,cm_familycd,MTtd_dt,cm_name,ss_name ";
                    StrTable = ",Family_Master";
                    strwhere += " and cm_familycd = fm_cd";
                }
                else
                    StrField = " cm_name +' ['+ MTtd_clientcd +']' as HName,";
                string strClient = "";
                if (Code != "")
                {
                    switch (Select)
                    {
                        case "CL":
                            {
                                strClient = " and cm_cd = '" + Code + "'";
                                break;
                            }

                        case "GR":
                            {
                                strClient = " and cm_groupcd = '" + Code + "'";
                                break;
                            }

                        case "FM":
                            {
                                strClient = " and cm_familycd = '" + Code + "'";
                                break;
                            }

                        case "SB":
                            {
                                strClient = " and cm_subbroker = '" + Code + "'";
                                break;
                            }

                        case "BR":
                            {
                                strClient = " and cm_brboffcode = '" + Code + "'";
                                break;
                            }
                        case "ALL":
                            {
                                strClient = " ";
                                break;
                            }

                    }
                }



                strSql = " select " + StrField + " cm_cd as Code,cm_name as Cname,convert(char(10),convert(datetime, MTtd_dt),103) MTtd_dt ,MTtd_clientcd,MTtd_scripcd,MTtd_Stlmnt,MTtd_bsflag,MTtd_bqty,MTtd_sqty,MTtd_rate,cm_name,ss_name,";
                strSql += " Round((MTtd_bqty-MTtd_sqty)*MTtd_Rate,2) value ";
                strSql += " , case MTtd_TrxFlag when 'R' then 'Re-Payment' when 'N' then 'Normal Trade' when 'C' then 'Corporate Action' else '' end [type]";
                strSql += " from MrgTdgFin_TRX,Client_master,Securities " + StrTable;
                strSql += " where MTtd_clientcd=cm_cd and MTtd_scripcd = ss_cd ";
                strSql += " and MTtd_dt between '" + FDate + "' and '" + ToDate + "'" + strwhere;
                strSql += " " + strClient + " and cm_schedule = '49843750' and exists " + myutil.LoginAccess("MTtd_clientcd");//Filter1.prpSelectionSQL
                strSql += " Order By " + strOrderBY;



                dtsum = myLib.OpenDataTable(strSql, curCon);

            }

            return dtsum;
        }
        public DataTable GetMTFContinuousShortReport(string strClient, string FDate, string Select)
        {
            int iDays = 0;
            string strdate;
            string strQuery;
            DataTable dsDates;
            DataTable DsDrClient;
            DataTable dsDetails;
            LibraryModel myLib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            UtilityDBModel mydbutil = new UtilityDBModel();
            if (Select.Trim() != "" && strClient.Trim() != "")
            {
                switch (Select)
                {
                    case "CL":
                        {
                            //strClient = " and cm_cd in ('acs9098', '26555')";
                            strClient = " and cm_cd = '" + strClient + "'";
                            break;
                        }

                    case "GR":
                        {
                            strClient = " and cm_groupcd = '" + strClient + "'";
                            break;
                        }

                    case "FM":
                        {
                            strClient = " and cm_familycd = '" + strClient + "'";
                            break;
                        }

                    case "SB":
                        {
                            strClient = " and cm_subbroker = '" + strClient + "'";
                            break;
                        }

                    case "BR":
                        {
                            strClient = " and cm_brboffcode = '" + strClient + "'";
                            break;
                        }
                    case "ALL":
                        {
                            strClient = " ";
                            break;
                        }
                }
            }

            int IntNtxtDays = Convert.ToInt32(myLib.fnGetSysParam("MTFDEBITDAYS"));

            //if (IntNtxtDays == 0)
            //{
            //    ClientScript.RegisterStartupScript(GetType(), "Message", "alert(\"Enter Days For Period\");", true);
            //    return;
            //}

            strdate = FDate;
            //DateTime curdate;
            //curdate = Convert.ToDateTime(strdate);


            using (SqlConnection ShortCon = new SqlConnection(connectionstring))
            {

                ShortCon.Open();
                string strSql = "";


                strSql = " Drop Table #TmpDebitClient";
                myLib.ExecSQL(strSql, ShortCon);

                strSql = "Create Table #TmpDebitClient (";
                strSql += " Td_Clientcd VarChar(8),";
                strSql += " Td_dt VarChar(10),";
                strSql += " Td_Limit Money,";
                strSql += " Td_TplusBal Money,";
                strSql += " Td_LoanBal Money,";
                strSql += " Td_FundedAmount Money,";
                strSql += " Td_FundedMrgReq Money,";
                strSql += " Td_CollateralFund Money,";
                strSql += " Td_CollateralValue Money,";
                strSql += " Td_ShortFallExcess Money,";
                strSql += " Td_TradeValue Money,";
                strSql += " Td_M2MLoss Money)";
                myLib.ExecSQL(strSql, ShortCon);


                strSql = "Drop Table #TmpDebitClntDetail";
                myLib.ExecSQL(strSql, ShortCon);

                strSql = "Create Table #TmpDebitClntDetail (";
                strSql += " Tcd_Type Char(1),";
                strSql += " Tcd_dt VarChar(10),";
                strSql += " Tcd_Exchange Char(1),";
                strSql += " Tcd_Clientcd VarChar(8),";
                strSql += " Tcd_Scripcd VarChar(6),";
                strSql += " Tcd_RegForFO VarChar(1),";
                strSql += " Tcd_Qty Numeric,";
                strSql += " Tcd_Rate Money,";
                strSql += " Tcd_MarketRate Money,";
                strSql += " Tcd_Value Money,";
                strSql += " Tcd_MrgHairCut Money,";
                strSql += " Tcd_NetValue Money)";
                myLib.ExecSQL(strSql, ShortCon);



                for (int IntiDays = 0, loopTo = IntNtxtDays - 1; IntiDays <= loopTo; IntiDays++)
                {
                AgainT2:
                    ;
                    strQuery = "select * from Tholiday_master where hm_companycode = '" + myutil.gstrUserCd() + " '";
                    if (myLib.fnGetSysParam("MTFP_LICBSE") == "Y")
                        strQuery += " and hm_exchange in ('B')";
                    else if (myLib.fnGetSysParam("MTFP_LICNSE") == "Y")
                        strQuery += " and hm_exchange in ('N')";
                    else if (myLib.fnGetSysParam("MTFP_LICBSE") == "Y" & myLib.fnGetSysParam("MTFP_LICNSE") == "Y")
                        strQuery += " and hm_exchange in ('B','N')";

                    strQuery += " and hm_Segment = 'C' and hm_dt = '" + myutil.dtos(strdate) + "'";
                    dsDates = myLib.OpenDataTable(strQuery, ShortCon);


                    if (dsDates.Rows.Count > 0)
                    {
                        //strdate = curdate.AddDays(-1).ToString("dd/MM/yyyy");
                        strdate = myutil.AddDayDT(myutil.dtos(strdate), -1).ToString("dd/MM/yyyy");
                        dsDates = null;
                        goto AgainT2;
                    }
                    else
                    {
                        mydbutil.prProcess(myutil.dtos(strdate), "", strClient);

                        strSql = " insert into #TmpDebitClient ";
                        strSql += "select Tmp_Clientcd,'" + strdate + "',Tmp_Limit,Tmp_TplusBal,Tmp_LoanBal,Tmp_FundedAmount,Tmp_FundedMrgReq,Tmp_CollateralFund,Tmp_CollateralValue,Tmp_ShortFallExcess,Tmp_TradeValue,Tmp_M2MLoss";
                        strSql += " From #TmpRMSSummaryReport, Client_master WHERE cm_cd= TMP_CLIENTCD order by cm_name";
                        myLib.ExecSQL(strSql, ShortCon);

                        if (strdate == FDate)
                        {
                            strSql = " insert into #TmpDebitClntDetail ";
                            strSql += " select Tmp_Type,'" + strdate + "',Tmp_Exchange,Tmp_Clientcd,Tmp_Scripcd,Tmp_RegForFO,Tmp_Qty,Tmp_Rate,Tmp_MarketRate,Tmp_Value,Tmp_MrgHairCut,Tmp_NetValue";
                            strSql += " From #TmpRMSDetailReport, Client_master WHERE cm_cd= Tmp_Clientcd and Tmp_Type = 'M' order by cm_name";
                            myLib.ExecSQL(strSql, ShortCon);
                        }


                        // ''''''''''''''''''''''''''''''''''''''''''''''''
                        //strdate = curdate.AddDays(-1).ToString("dd/MM/yyyy");
                        strdate = myutil.AddDayDT(myutil.dtos(strdate), -1).ToString("dd/MM/yyyy");


                    }
                    dsDates = null;
                }

                strSql = " delete from #TmpDebitClient where Td_Clientcd in ( Select Td_Clientcd from #TmpDebitClient where Td_ShortFallExcess >= 0  )  ";
                myLib.ExecSQL(strSql, ShortCon);
                strSql = " delete from #TmpDebitClntDetail where Tcd_Clientcd not in ( Select Distinct Td_Clientcd from #TmpDebitClient )  ";

                myLib.ExecSQL(strSql, ShortCon);

                strSql = "select #TmpDebitClient.*,cm_name,bm_email,cm_email,bm_branchcd,cm_panno,cm_pincode, cm_dob";
                strSql += " from #TmpDebitClient, Client_master ,Branch_master";
                strSql += " WHERE cm_cd= Td_Clientcd and cm_brboffcode = bm_branchcd and Td_dt = '" + FDate + "'";



                DsDrClient = myLib.OpenDataTable(strSql, ShortCon);
                HttpContext.Current.Session["dsClient"] = DsDrClient;

                dsDetails = null;
                strSql = "select (case when Tcd_Exchange='D' then 'BSE' when Tcd_Exchange='F' then'NSE' when Tcd_Exchange='M' then'MCX' else Tcd_Exchange +'SE' end) Tcd_Exchange,Tcd_Scripcd,ss_name, SUM(Tcd_Qty) Qty, SUM(Tcd_Value) ActualCost,";
                strSql += " SUM(Tcd_Qty * Tcd_MarketRate) ClosePrice,((SUM(Tcd_Qty * Tcd_MarketRate))-(SUM(Tcd_Value))) MTM,SUM(Tcd_NetValue) MarginReq,Tcd_MrgHairCut,Tcd_Clientcd";
                strSql += " from #TmpDebitClntDetail,Client_master,securities";
                strSql += " where cm_cd=Tcd_Clientcd and Tcd_Scripcd=ss_cd ";
                strSql += " Group By Tcd_Exchange,Tcd_Clientcd,cm_name,Tcd_MrgHairCut,Tcd_Scripcd,ss_name ";
                strSql += " Order By ss_name,Tcd_Clientcd";
                dsDetails = myLib.OpenDataTable(strSql, ShortCon);
                HttpContext.Current.Session["dsDetails"] = dsDetails;


            }

            return DsDrClient;

        }

        public DataTable[] GetContinuousShortfall(string Code, string stdate)
        {
            LibraryModel myLib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            UtilityDBModel mydbutil = new UtilityDBModel();
            List<DataTable> list = new List<DataTable>();
            DataTable DsDrClient = (DataTable)HttpContext.Current.Session["dsClient"];
            DataTable dsDetails = (DataTable)HttpContext.Current.Session["dsDetails"];

            var DRClient = DsDrClient.Select("Td_Clientcd='" + Code + "'");

            var DTClient = new DataTable();
            if (DRClient.Length != 0)
                DTClient = DRClient.CopyToDataTable();

            //DataRow[] DRClient = DsDrClient.Select("Td_Clientcd='" + Code + "'");

            //DataTable Client = new DataTable();
            //foreach (DataRow dr in DRClient)
            //{
            //    Client.ImportRow(dr);
            //}
            list.Add(DTClient);

            var DRDetails = dsDetails.Select("Tcd_Clientcd='" + Code + "'");
            var DTDetails = new DataTable();
            if (DRDetails.Length != 0)
                DTDetails = DRDetails.CopyToDataTable();
            list.Add(DTDetails);

            return list.ToArray();
        }

        public DataTable GetCConfimationReport(string Select = "", string Code = "", string FDate = "", string ToDate = "", string cmbclient = "")
        {
            HttpContext.Current.Session["dsCombine"] = null;
            HttpContext.Current.Session["StrNoRcrd"] = null;
            HttpContext.Current.Session["StrperiodDT"] = null;
            HttpContext.Current.Session["ToDate"] = null;

            string strCLients = "";
            var cnneSign = new SqlConnection();
            bool blnIndexDigitalDetailsDt = false;
            LibraryModel myLib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            UtilityDBModel mydbutil = new UtilityDBModel();
            string StrperiodDT = null;
            string StrNoRcrd = "";
            // FDate = myutil.dtos(FDate);
            //ToDate = myutil.dtos(ToDate);
            var cmdDT = new SqlCommand();
            var adDT = new SqlDataAdapter();
            var dsDT = new DataTable();
            var dsCombined = new DataTable();
            string strsql = "";
            string strClient = "";
            if (Code.Trim() != "")
            {
                switch (Select)
                {
                    case "CL":
                        {
                            strClient = " and cm_cd = '" + Code + "'";
                            break;
                        }

                    case "GR":
                        {
                            strClient = " and cm_groupcd = '" + Code + "'";
                            break;
                        }

                    case "FM":
                        {
                            strClient = " and cm_familycd = '" + Code + "'";
                            break;
                        }

                    case "SB":
                        {
                            strClient = " and cm_subbroker = '" + Code + "'";
                            break;
                        }

                    case "BR":
                        {
                            strClient = " and cm_brboffcode = '" + Code + "'";
                            break;
                        }
                }
            }

            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {


                strsql = "select * from Other_Products Where OP_Product Like 'TPLUSESIGN%'";
                strsql = strsql + " and '" + FDate + "'  between OP_DSN and OP_URL ";

                dsDT = myLib.OpenDataTable(strsql, curCon);


                if (dsDT.Rows.Count > 0)
                {
                    // -----------------------------------No Record Found StrNoRcrd----------------------------------------'
                    StrNoRcrd = " In " + dsDT.Rows[0]["OP_DataBase"].ToString().Trim() + " Database.";
                    if (Convert.ToInt32(ToDate) > Convert.ToInt32(dsDT.Rows[0]["OP_URL"].ToString().Trim()))
                    {
                        // -----------------------------------Date set Msg StrperiodDT----------------------------------------'
                        StrperiodDT = StrperiodDT + "Data For Period After " + myutil.DbToDate(dsDT.Rows[0]["OP_URL"].ToString().Trim()) + @" May Be In Different Database,";
                        StrperiodDT = StrperiodDT + @"Try Separately For Remaining Period";

                        string ToDate1 = myutil.DbToDate(dsDT.Rows[0]["OP_URL"].ToString().Trim());
                        HttpContext.Current.Session["ToDate"] = ToDate1;
                        cnneSign = mydbutil.EsignConnectionString(dsDT.Rows[0]["OP_Product"].ToString().Trim());
                        HttpContext.Current.Session["DBConn"] = dsDT.Rows[0]["OP_Product"].ToString().Trim();

                    }
                    else
                    {
                        HttpContext.Current.Session["ToDate"] = myutil.stod(ToDate).ToString("dd/MM/yyyy");
                        cnneSign = mydbutil.EsignConnectionString(dsDT.Rows[0]["OP_Product"].ToString().Trim());
                        HttpContext.Current.Session["DBConn"] = dsDT.Rows[0]["OP_Product"].ToString().Trim();
                    }
                }
                else
                {
                    HttpContext.Current.Session["ToDate"] = myutil.stod(ToDate).ToString("dd/MM/yyyy");
                    cnneSign = mydbutil.EsignConnectionString("ESIGN-TRADEPLUS");
                    HttpContext.Current.Session["DBConn"] = "ESIGN-TRADEPLUS";

                }
                if (cnneSign.State == ConnectionState.Closed)
                {

                    cnneSign.Open();
                }

                strsql = "Drop table #TmpClient";
                myLib.ExecSQL(strsql, cnneSign);

                strsql = "Create Table #TmpClient (Tmp_Clientcd VarChar(8),Tmp_cmName VarChar(100))";

                myLib.ExecSQL(strsql, cnneSign);


                strsql = "select count(0) from sysIndexes Where Name = 'idx_Digitaldetails_dt'";

                dsDT = myLib.OpenDataTable(strsql, cnneSign);


                blnIndexDigitalDetailsDt = Convert.ToInt16(dsDT.Rows[0][0]) > 0;

                strsql = "Select cm_cd,cm_Name from Client_master where cm_contractflag = '" + cmbclient + "'" + HttpContext.Current.Session["LoginAccessOld"];

                strsql += strClient.ToString();
                dsDT = myLib.OpenDataTable(strsql, curCon);

                //strsql = "Insert Into #TmpClient Select cm_cd,cm_Name from [Tplustest0120].dbo.Client_master where cm_contractflag = '" + cmbclient + "'" + HttpContext.Current.Session["LoginAccessOld"];
                //myLib.ExecSQL(strsql, cnneSign);

                for (int i = 0, loopTo = dsDT.Rows.Count - 1; i <= loopTo; i++)
                {
                    strCLients = " Insert Into #TmpClient Values('" + dsDT.Rows[i]["cm_cd"].ToString().Trim() + "','" + dsDT.Rows[i]["cm_name"].ToString().Replace("'", "").Trim() + "')" + Constants.vbNewLine;
                    myLib.ExecSQL(strCLients, cnneSign);
                }

                strsql = "select distinct dd_clientcd, Tmp_cmName cm_name ,'Tplus' doctype, '" + FDate + "' FDate, '" + ToDate + "' ToDate ";
                strsql += " from digital_details " + ((blnIndexDigitalDetailsDt) ? " With(index(idx_Digitaldetails_dt)) " : "") + " ,#TmpClient ";
                strsql += " Where dd_dt between '" + FDate + "' and '" + ToDate + "' and dd_filetype='CNOTE' and dd_clientcd = Tmp_Clientcd ";

                dsCombined = myLib.OpenDataTable(strsql, cnneSign);


                HttpContext.Current.Session["dsCombine"] = dsCombined;
                HttpContext.Current.Session["StrNoRcrd"] = StrNoRcrd;
                HttpContext.Current.Session["StrperiodDT"] = StrperiodDT;


            }

            return dsCombined;
        }

        public DataTable GetQuaterlySettlementReport(string Segment)
        {
            DataTable dtQuSett = null;
            string strsql = "";
            string StrQTRCOMPWISEView = "";
            LibraryModel myLib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            UtilityDBModel mydbutil = new UtilityDBModel();
            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {
                if (Segment != "X")
                {
                    strsql = "Select Count(0) From Sysparameter where sp_parmcd = 'QTRCOMPWISE' and Rtrim(ltrim(sp_sysvalue))='Y'";

                    dtQuSett = myLib.OpenDataTable(strsql, curCon);

                    if (Convert.ToInt32(dtQuSett.Rows[0][0]) > 0)
                    {
                        StrQTRCOMPWISEView = "Y";
                    }

                    else
                    {
                        StrQTRCOMPWISEView = "N";
                    }
                }

                strsql = "select MAX(qs_dt) From QuarterlySquareoff " + ((StrQTRCOMPWISEView == "Y") ? "Where qs_CompanyCode = '" + HttpContext.Current.Session["CompanyCode"] + "'" : "");

                dtQuSett = myLib.OpenDataTable(strsql, curCon);

            }

            return dtQuSett;

        }

        public DataTable getQtlySettlementReport(string Select, string Code, string Report, string Sortby, string Segment)
        {
            LibraryModel myLib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            UtilityDBModel mydbutil = new UtilityDBModel();
            string[] ParmSettlement = new string[4];
            string[] ParmSettlement2 = new string[3];
            DataTable dtQuSett = null;
            int TNetQTRSQDYS = 0;
            string strsql = "";
            string strWhere = "";
            string strorder = "";
            string sqoffdate = "";

            //string StrQTRCOMPWISE = "";
            string StrQTRCOMPWISEView = "";
            string StrQTRCOMPWISEClient = "";
            string strprev90day = "";
            string strprev180day = "";

            string StrMinDt = "";
            string strClient = "";
            DataTable DtCombined = null;

            StrQTRCOMPWISEView = "N";
            if (Code.Trim() != "")
            {
                switch (Select)
                {
                    case "CL":
                        {
                            strClient = strClient + " and cm_cd = '" + Code + "'";
                            break;
                        }

                    case "GR":
                        {
                            strClient = strClient + " and cm_groupcd = '" + Code + "'";
                            break;
                        }

                    case "FM":
                        {
                            strClient = strClient + " and cm_familycd = '" + Code + "'";
                            break;
                        }

                    case "SB":
                        {
                            strClient = strClient + " and cm_subbroker = '" + Code + "'";
                            break;
                        }

                    case "BR":
                        {
                            strClient = strClient + " and cm_brboffcode = '" + Code + "'";
                            break;
                        }
                    case "ALL":
                        {
                            strClient = strClient + "";
                            break;
                        }
                }
            }
            SqlConnection SQLConnComex = mydbutil.commexTemp_conn("Commex");
            if (SQLConnComex != null)
                if (SQLConnComex.State == ConnectionState.Closed)
                {
                    SQLConnComex.Open();
                }
            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {

                if (Segment != "X")
                {
                    strsql = "Select Count(0) From Sysparameter where sp_parmcd = 'QTRCOMPWISE' and Rtrim(ltrim(sp_sysvalue))='Y'";
                    var dsCompnyCd = new DataSet();
                    DtCombined = myLib.OpenDataTable(strsql, curCon);

                    if (Convert.ToInt32(DtCombined.Rows[0][0]) > 0)
                    {
                        StrQTRCOMPWISEView = "Y";
                    }

                    else
                    {
                        StrQTRCOMPWISEView = "N";
                    }
                }

                strsql = "select isNull(min(qs_dt),'') 'Mindate' , MAX(qs_dt)  'Maxdate' From QuarterlySquareoff " + ((StrQTRCOMPWISEView == "Y") ? "Where qs_CompanyCode = '" + HttpContext.Current.Session["CompanyCode"] + "'" : "");
                var DT = new DataTable();

                if (Segment == "X")
                {
                    DT = myLib.OpenDataTable(strsql, SQLConnComex);
                }
                else
                {
                    DT = myLib.OpenDataTable(strsql, curCon);
                }

                if (myLib.fnGetSysParam("TNetQTRSQDYS") != "")
                    TNetQTRSQDYS = Convert.ToInt32(myLib.fnGetSysParam("TNetQTRSQDYS"));

                TNetQTRSQDYS = ((TNetQTRSQDYS > 0) ? -TNetQTRSQDYS : -90);

                if (DT.Rows.Count > 0)
                {
                    sqoffdate = DT.Rows[0][1].ToString();

                    strprev90day = myutil.dtos(myutil.AddDayDT(sqoffdate, TNetQTRSQDYS).ToString("dd/MM/yyyy"));

                    strprev180day = myutil.dtos(myutil.AddDayDT(strprev90day, TNetQTRSQDYS).ToString("dd/MM/yyyy"));

                }



                strsql = "select isNull(min(qs_dt),'') 'Mindate' , isNull(max(qs_dt),'') 'Maxdate' From QuarterlySquareoff ";
                strsql = strsql + ((StrQTRCOMPWISEView.ToString() == "Y") ? " where qs_CompanyCode = '" + HttpContext.Current.Session["CompanyCode"] + "' " : "");

                DT = myLib.OpenDataTable(strsql, curCon);

                if (DT.Rows.Count > 0)
                {
                    //if (objutility.mfnFormatdate(objutility.mfnDateAdd(objUtility.eAddDate.eDay, TNetQTRSQDYS, dsMinDt.Tables(0).Rows(0).IsNull("Maxdate")), objUtility.eNewDateformat.EDATABASE) > objutility.mfnFormatdate(dsMinDt.Tables(0).Rows(0).IsNull("Mindate"), objUtility.eNewDateformat.EDATABASE))
                    //    StrMinDt = dsMinDt.Tables(0).Rows(0).IsNull("Mindate").ToString();
                    //DateTime DtRMSVALATLTRT = myutil.ConvertDT(myutil.gstrDBToday()).AddDays(-Conversion.Val(strRMSVALATLTRT));
                    //string StrNewRMSVALATLTRT = DtRMSVALATLTRT.ToString("yyyyMMdd");
                    //myutil.dtos(myutil.AddDayDT(sqoffdate, TNetQTRSQDYS).ToString("dd/MM/yyyy"));

                    DateTime date1 = myutil.AddDayDT(DT.Rows[0]["Maxdate"].ToString().Trim(), TNetQTRSQDYS);
                    DateTime date2 = myutil.ConvertDT(DT.Rows[0]["Mindate"].ToString().Trim());

                    if (date1 < date2)
                    {

                        StrMinDt = DT.Rows[0]["Mindate"].ToString().Trim();
                    }
                }

                switch (Sortby)
                {
                    case "Clientname":
                        {
                            strorder = "order by cm_name ,qs_dt";
                            break;
                        }

                    case "ClienCode":
                        {
                            strorder = "order by cm_cd ,qs_dt";
                            break;
                        }
                }


                if (Report == "CNS")
                {
                    strsql = "select cm_cd,cm_name,cm_add1,cm_add2,cm_add3,cm_add4,cm_email,cm_pincode,cm_mobile,";
                    strsql = strsql + " isNull((select case When Datediff(d,max(cq_qsdt),qs_dt) > 90 Then 90 else Datediff(d,max(cq_qsdt),qs_dt) end From Client_QtrSqrOFF  where cq_cmcd = qs_cmcd and  cq_qsdt < = '" + sqoffdate + "' " + ((StrQTRCOMPWISEView == "Y") ? "and cq_filler1 = '" + HttpContext.Current.Session["CompanyCode"] + "'" : "") + "),90) LastSqdt";
                    strsql = strsql + " from QuarterlySquareoff, Client_master where qs_cmcd=cm_cd and qs_dt ='" + sqoffdate + "' and qs_netvalue < 0  and Cm_opendt < '" + strprev90day + "'";
                    strsql = strsql + " and qs_cmcd not in (  Select distinct cq_cmcd From Client_QtrSqrOFF where cq_qsdt Between '" + strprev90day + "' and '" + sqoffdate + "'" + ((StrQTRCOMPWISEView == "Y") ? "and cq_filler1 = '" + HttpContext.Current.Session["CompanyCode"] + "'" : "") + ")";
                    if (StrMinDt != "")
                        strsql = strsql + " and  qs_cmcd in (  Select distinct qs_cmcd From QuarterlySquareoff where qs_dt Between '" + strprev180day + "' and '" + strprev90day + "'" + ((StrQTRCOMPWISEView == "Y") ? "and qs_CompanyCode = '" + HttpContext.Current.Session["CompanyCode"] + "'" : "") + ")";

                    strsql = strsql + " " + HttpContext.Current.Session["LoginAccessOld"] + ((StrQTRCOMPWISEView == "Y") ? "and qs_CompanyCode = '" + HttpContext.Current.Session["CompanyCode"] + "'" : "");
                    strsql += strClient + strorder;
                }
                //else if (Report == "CNT")
                //{ 



                //}
                else
                {
                    strsql = " select cm_cd,cm_name,convert(char,convert(datetime,cq_qsdt,103),103) as LastSqdt";
                    strsql = strsql + " From Client_QtrSqrOFF,Client_master  where cq_cmcd = cm_Cd  and ";
                    strsql = strsql + "cq_qsdt between '" + strprev90day + "' and '" + sqoffdate + "' " + HttpContext.Current.Session["LoginAccessOld"];
                    strsql = strsql + ((StrQTRCOMPWISEView == "Y") ? "and cq_filler1 = '" + HttpContext.Current.Session["CompanyCode"] + "'" : "");
                    strsql += strClient + strorder.Replace("qs_dt", "cq_qsdt");
                }

                if (Report == "CNT")
                {
                    myutil.prNotTradedClnt(sqoffdate, "T", curCon);
                    myutil.pr30DaysNotTradeClnt(sqoffdate, "T", curCon);

                    strsql = "select qs_cmcd,qs_dt,qs_LedBal,qs_LedBalM,qs_TotalShares,qs_TotalFundShare,qs_DebitLedger,qs_DebitLedgerM,qs_FundPayInCashT,qs_FundPayInFXT,qs_FundPayInFOT,qs_FundPayInCashT1,isNull(qs_FundPayInCXT,0) qs_FundPayInCXT,qs_SharePayInCashT,qs_SharePayInCashT1,qs_MarginFO,qs_MarginFX,";
                    strsql += "isnull(qs_marginCash,0) qs_marginCash ,isnull(qs_MarginCX,0) qs_MarginCX,qs_TurnoverCash,qs_RetAllowed,qs_TotalRetainReq,qs_RetainFund,qs_RetainShares,qs_TotalRetain,qs_ReleaseFund,qs_ReleaseShares,qs_TotalRelease,qs_CollFD,qs_CollBG,qs_CollafterH,qs_BenfAfterH,qs_Netvalue, cm_cd,cm_name,cm_add1,cm_add2,cm_add3,cm_add4,cm_email,cm_pincode,cm_mobile,cm_brboffCode,bm_email ";
                    strsql += " from QuarterlySquareoff, Client_master,Branch_master where qs_cmcd=cm_cd and cm_brboffCode = bm_branchcd and qs_dt = '" + sqoffdate + "' and qs_netvalue < 0 ";
                    strsql += (StrQTRCOMPWISEView == "Y" ? " and isNull(qs_CompanyCode,'') = '" + HttpContext.Current.Session["CompanyCode"] + "'  " : "");
                    strsql += " and not Exists (select tmp_Clnt From #TmpClnt Where cm_cd = tmp_Clnt) ";
                    strsql += " and not Exists (select tqs_cmcd From #TmpQuarterlySquareoff Where cm_cd = tqs_cmcd) ";
                    strsql += " and Cm_opendt < '" + Strings.Format(myutil.stod(sqoffdate).AddDays(-30), "yyyyMMdd") + "'";
                    strsql += " and cm_type <> 'P' ";
                    strsql = strsql + HttpContext.Current.Session["LoginAccessOld"];
                    strsql += strClient + strorder;
                }


                ParmSettlement[0] = sqoffdate;
                ParmSettlement[1] = StrQTRCOMPWISEView;
                ParmSettlement[2] = Report;
                ParmSettlement[3] = Segment;
                HttpContext.Current.Session["ParmSettlement"] = ParmSettlement;


                ParmSettlement2[0] = strprev90day;//fromDt
                ParmSettlement2[1] = sqoffdate;//toDt
                if (Segment == "X")
                {
                    ParmSettlement2[2] = "X";//strapp
                }
                else
                {
                    ParmSettlement2[2] = "Y";//strapp }
                }


                HttpContext.Current.Session["ParmSettlement2"] = ParmSettlement2;



                if (Segment == "X")
                {
                    dtQuSett = myLib.OpenDataTable(strsql, SQLConnComex);
                }

                else
                {
                    dtQuSett = myLib.OpenDataTable(strsql, curCon);
                }
                //if (Report == "CNT")
                //{
                //    dtQuSett.Columns.Add("Maxdate", typeof(System.String));
                //    //    //foreach (DataRow row in dtQuSett.Rows)
                //    //    //{
                //    //    //    DataTable dt = myLib.OpenDataTable("SELECT td_clientcd, MAX(td_dt) as Maxdate FROM ( SELECT td_clientcd, td_dt    FROM trx    UNION ALL    SELECT td_clientcd, td_dt    FROM trades) as subQuery where td_clientcd='" + row["qs_cmcd"] + "' GROUP BY td_clientcd");   // or set it to some other value
                //    //    //                                                                                                                                                                                                                                                                          //need to set value to NewColumn column
                //    //    //    if (dt.Rows.Count > 0)
                //    //    //        row["Maxdate"] = myutil.stod(dt.Rows[0]["Maxdate"].ToString()).ToString("dd/MM/yyyy");
                //    //    //}


                //}

            }


            return dtQuSett;

        }

        public DataTable GetQuaterlySettlementReport(string Code, string strdate)
        {
            DataTable dtQuSett = null;
            if (HttpContext.Current.Session["ParmSettlement"] != null)
            {
                LibraryModel myLib = new LibraryModel();
                UtilityModel myutil = new UtilityModel();
                UtilityDBModel mydbutil = new UtilityDBModel();




                string[] ParmSettlement = (String[])HttpContext.Current.Session["ParmSettlement"];
                string sqoffdate = ParmSettlement[0];
                string QTRCOMPWISE = ParmSettlement[1];
                string Report = ParmSettlement[2];
                string Segment = ParmSettlement[3];
                string strsql = null;




                using (SqlConnection curCon = new SqlConnection(connectionstring))
                {



                    if (Report == "CNS")


                    {
                        strsql = "select QuarterlySquareoff.*, cm_cd,cm_name,cm_add1,cm_add2,cm_add3,cm_add4,cm_email,cm_pincode,cm_mobile,";
                        strsql = strsql + " isNull((select case When Datediff(d,max(cq_qsdt),qs_dt) > 90 Then 90 else Datediff(d,max(cq_qsdt),qs_dt) end From Client_QtrSqrOFF  where cq_cmcd = qs_cmcd and  cq_qsdt < = '" + sqoffdate + "'" + ((QTRCOMPWISE == "Y") ? "and cq_filler1 = '" + HttpContext.Current.Session["CompanyCode"] + "'" : "") + "),90) LastSqdt";
                        strsql = strsql + " from QuarterlySquareoff, Client_master where qs_cmcd=cm_cd and qs_dt ='" + sqoffdate + "' ";
                        strsql = strsql + "and cm_cd= '" + Code + "'";
                        strsql = strsql + ((QTRCOMPWISE == "Y") ? "and qs_CompanyCode = '" + HttpContext.Current.Session["CompanyCode"] + "'" : "");
                        strsql = strsql + " " + HttpContext.Current.Session["LoginAccessOld"];
                    }

                    else
                    {

                        strdate = myutil.dtos(strdate.ToString().Trim());
                        strsql = "select QuarterlySquareoff.*, cm_cd,cm_name,cm_add1,cm_add2,cm_add3,cm_add4,cm_email,cm_pincode,cm_mobile,";
                        strsql = strsql + "convert(char,convert(datetime,qs_dt,103),103) as LastSqdt";
                        strsql = strsql + " From QuarterlySquareoff, Client_master  where qs_cmcd=cm_cd and ";
                        strsql = strsql + " qs_dt= '" + strdate + "' and cm_cd='" + Code + "'";
                        strsql = strsql + ((QTRCOMPWISE == "Y") ? "and qs_CompanyCode = '" + HttpContext.Current.Session["CompanyCode"] + "'" : "");
                        strsql = strsql + " " + HttpContext.Current.Session["LoginAccessOld"];


                    }
                    //{
                    //    strsql = " select cm_cd,cm_name,convert(char,convert(datetime,cq_qsdt,103),103) as LastSqdt";
                    //    strsql = strsql + " From Client_QtrSqrOFF,Client_master  where cq_cmcd = cm_Cd  and ";
                    //    strsql = strsql + "cq_qsdt between '" + strdate + "' and  '" + sqoffdate + "' ";
                    //    strsql = strsql + " and exists " + myutil.LoginAccess("cq_cmcd");
                    //    strsql = strsql + ((QTRCOMPWISE == "Y") ? "and cq_filler1 = '" + HttpContext.Current.Session["CompanyCode"] + "'" : "");
                    //    // strsql += Filter1.prpSelectionSQL;
                    //    // strsql += strorder.Replace("qs_dt", "cq_qsdt");
                    //}

                    SqlConnection SQLConnComex = mydbutil.commexTemp_conn("Commex");
                    if (SQLConnComex != null)
                    {
                        if (SQLConnComex.State == ConnectionState.Closed)
                        {
                            SQLConnComex.Open();
                        }
                    }

                    if (Segment == "X")
                    {
                        dtQuSett = myLib.OpenDataTable(strsql, SQLConnComex);
                    }

                    else
                    {
                        dtQuSett = myLib.OpenDataTable(strsql, curCon);
                    }


                }

            }
            return dtQuSett;

        }

        public DataTable GetDailystatusReport(string Code, string strdate)
        {
            DataTable dtQuSett = null;
            string strcd;
            string strFromDt;
            string strToDt;
            string strapp = "";
            string StrSqoffDate = "";
            strcd = Code;
            strFromDt = strdate;
            strFromDt = strdate;
            //strapp = Request.QueryString("strapp") 'commodity-X
            // viewState("QTRCOMPWISE") = "N";


            if (HttpContext.Current.Session["ParmSettlement2"] != null)
            {
                LibraryModel myLib = new LibraryModel();
                UtilityModel myutil = new UtilityModel();
                UtilityDBModel mydbutil = new UtilityDBModel();

                string[] ParmSettlement2 = (String[])HttpContext.Current.Session["ParmSettlement2"];
                strcd = Code;
                strFromDt = ParmSettlement2[0];
                strToDt = ParmSettlement2[1];
                strapp = ParmSettlement2[2];

                string strsql = null;

                using (SqlConnection curCon = new SqlConnection(connectionstring))
                {

                    if (strapp != "X")
                    {
                        strsql = "Select Count(0) From Sysparameter where sp_parmcd = 'QTRCOMPWISE' and Rtrim(ltrim(sp_sysvalue))='Y'";
                        var dsCompnyCd = new DataSet();
                        dtQuSett = myLib.OpenDataTable(strsql, curCon);
                        if (dtQuSett.Rows.Count > 0)
                            strapp = "Y";
                    }

                    strsql = " select convert(char,convert(datetime,qs_dt,103),103) as QsDate,QuarterlySquareoff.*, cm_cd,cm_name,cm_add1,cm_add2,cm_add3,cm_add4,cm_email,cm_pincode,cm_mobile,'' YN ";
                    strsql = strsql + "From QuarterlySquareoff, Client_master ";
                    strsql = strsql + "where qs_cmcd=cm_cd   and qs_dt between '" + strFromDt + "' and '" + strToDt + "'  and cm_cd='" + strcd + "' ";
                    strsql = strsql + " " + HttpContext.Current.Session["LoginAccessOld"];
                    strsql = strsql + "order by cm_name,qs_dt ";


                    SqlConnection SQLConnComex = mydbutil.commexTemp_conn("Commex");
                    if (SQLConnComex != null)
                    {
                        SQLConnComex.Open();
                    }


                    if (strapp == "X")
                    {
                        dtQuSett = myLib.OpenDataTable(strsql, SQLConnComex);
                        if (dtQuSett.Rows.Count > 0)
                        {
                            StrSqoffDate = myLib.fnFireQueryCommex("Client_QtrSqrOFF", "Isnull(Max(cq_qsdt),'')", "cq_cmcd = '" + dtQuSett.Rows[0]["qs_cmcd"].ToString().Trim() + "' and  cq_qsdt ", myutil.dtos(dtQuSett.Rows[0]["QsDate"].ToString().Trim()), true);
                        }
                    }
                    else
                    {
                        dtQuSett = myLib.OpenDataTable(strsql, curCon);
                        if (dtQuSett.Rows.Count > 0)
                        {
                            StrSqoffDate = myLib.fnFireQuery("Client_QtrSqrOFF", "Isnull(Max(cq_qsdt),'')", "cq_cmcd = '" + dtQuSett.Rows[0]["qs_cmcd"].ToString().Trim() + "'" + ((strapp == "Y") ? "and cq_filler1 = '" + HttpContext.Current.Session["CompanyCode"] + "'" : "") + " and  cq_qsdt", myutil.dtos(dtQuSett.Rows[0]["QsDate"].ToString().Trim()), true);
                        }
                    }
                    if (dtQuSett.Rows.Count > 0)
                    {
                        for (int i = 0, loopTo = dtQuSett.Rows.Count - 1; i <= loopTo; i++)
                        {
                            if (dtQuSett.Rows[i]["YN"].ToString() == "")
                                dtQuSett.Rows[i]["YN"] = (StrSqoffDate.ToString() != "") ? "Yes" : "No";
                        }
                    }




                }

            }

            return dtQuSett;
        }

        public IEnumerable<ddlcmbproduct> Populateproduct()
        {
            UtilityDBModel mydbutil = new UtilityDBModel();
            List<ddlcmbproduct> product = new List<ddlcmbproduct>();

            product.Add(new ddlcmbproduct
            {
                cmbproductvalue = "Equity",
                cmbproductText = "Equity"
            });
            SqlConnection SQLConnComex = mydbutil.commexTemp_conn("Commex");
            if (SQLConnComex != null)
            {
                product.Add(new ddlcmbproduct
                {
                    cmbproductvalue = "X",
                    cmbproductText = "Commodity"
                });
            }

            return product;

        }

        public ClientMasterDetails GetClientMasterDetails(string Code)
        {
            string strSQL = "";
            LibraryModel myLib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            UtilityDBModel mydbutil = new UtilityDBModel();
            strSQL = "select isnull(da_clientcd,'') 'Code',isnull(da_dpid,'') 'DPID', isnull(da_actno,'') 'ClientID',";
            strSQL += " isnull(da_name,'') 'AccountName',da_defaultyn 'Default',dp_name 'DPName'";
            strSQL += " from Dematact,Dps ";
            strSQL += " where dp_dpid=da_dpid and da_clientcd= '" + Code + "' order by da_defaultyn desc";

            DataTable dtDPdtl = myLib.OpenDataTable(strSQL);
            List<CLDPDetails> DPview = new List<CLDPDetails>();
            DPview = dtDPdtl.AsEnumerable()
            .Select(row => new CLDPDetails
            {
                Code = row.Field<string>("Code"),
                DPID = row.Field<string>("DPID"),
                ClientID = row.Field<string>("ClientID"),
                AcctName = row.Field<string>("AccountName"),
                Default = row.Field<string>("Default"),
                DpName = row.Field<string>("DpName"),
            }).ToList();

            DataTable dtchk = null;
            strSQL = " select bk_name 'BankName',bk_add1 'Branch',Bankact.*";

            dtchk = myLib.OpenDataTable("Select * from sysobjects a, syscolumns b where a.id=b.id and a.name='Bankact'  and b.name='ba_ifsccode'");
            if (dtchk.Rows.Count > 0)
            {

                strSQL += "";
                HttpContext.Current.Session["IsViewifsccode"] = "Yes";
            }
            else
            {
                strSQL += ",ba_ifsccode='DBNULL'";
                HttpContext.Current.Session["IsViewifsccode"] = "No";
            }

            strSQL += " from Bankact, Bank_master";
            strSQL += " where bk_micr=ba_micr  and ba_clientcd = '" + Code + "'";

            //strSQL +=   myLib.fnFireQuery("client_info", "case cm_fundpayout when 'O' then 'On Demand' when 'A' then 'Auto' else '' end as cm_fundpayout1 ", "cm2_cd", "'+ Code +'", true);
            //strSQL +=   myLib.fnFireQuery("client_master", "case cm_bankacttype when 'C' then 'Cheque' when 'D' then 'Demand Draft' when 'T' then 'Transfer' else '' end as cm_bankacttype1 ", "cm_cd", "'+ Code +'", true);


            dtchk = myLib.OpenDataTable("Select * from sysobjects a, syscolumns b where a.id=b.id and a.name='Bankact'  and b.name='ba_ifsccode'");
            if (dtchk.Rows.Count > 0)
            {
                strSQL += " and ba_ifsccode=bk_IFCCode ";
            }

            DataTable dtBankdtl = myLib.OpenDataTable(strSQL);
            List<CLBankDetails> Bankview = new List<CLBankDetails>();
            Bankview = dtBankdtl.AsEnumerable()
            .Select(row => new CLBankDetails
            {
                MICR = row.Field<string>("ba_micr"),
                IFSC = row.Field<string>("ba_ifsccode"),
                ActType = row.Field<string>("ba_acttype"),
                ActNO = row.Field<string>("ba_actno"),
                AcctName = row.Field<string>("BankName"),
                BankDetail = row.Field<string>("Branch"),
                Default = row.Field<string>("ba_default"),
                //cm_fundpayout = row.Field<string>("cm_fundpayout"),
                //cm_bankacttype = row.Field<string>("cm_bankacttype")

            }).ToList();


            string[] Cross = new string[2];
            string[] Estro = new string[2];
            bool bCross = false;
            bool bEstro = false;
            string strBankCode, strVoiceMail, strbankccy, strBankacttype = "";
            strBankCode = "";
            strVoiceMail = "";
            strbankccy = "";
            strSQL = "Select OP_Server,OP_DataBase,OP_Owner,OP_User from Other_Products Where OP_Product = 'CROSS' and op_Status = 'A'";
            DataTable dtCross = myLib.OpenDataTable(strSQL);
            if (dtCross.Rows.Count > 0)
            {
                DataRow drCross = dtCross.Rows[0];

                bCross = true;
                Cross = new string[3];
                Cross[0] = drCross["OP_Server"].ToString().Trim();
                Cross[1] = drCross["OP_DataBase"].ToString().Trim();
                Cross[2] = drCross["OP_Owner"].ToString().Trim();
            }

            strSQL = "Select OP_Server,OP_DataBase,OP_Owner,OP_User,OP_PWD from Other_Products Where OP_Product = 'ESTRO' and op_Status = 'A'";
            DataTable dtEstro = myLib.OpenDataTable(strSQL);
            if (dtEstro.Rows.Count > 0)
            {
                DataRow drEstro = dtEstro.Rows[0];
                bEstro = true;
                Estro = new string[3];
                Estro[0] = drEstro["OP_Server"].ToString().Trim();
                Estro[1] = drEstro["OP_DataBase"].ToString().Trim();
                Estro[2] = drEstro["OP_Owner"].ToString().Trim();
            }
            List<CDSLDPDetails> CDSLDPview = new List<CDSLDPDetails>();
            if (bCross)
            {
                for (int i = 0; i < dtDPdtl.Rows.Count; i++)
                {
                    CDSLDPDetails cdsl = new CDSLDPDetails();
                    {
                        if (dtDPdtl.Rows[i]["Default"].ToString() == "Y" && Strings.Left(dtDPdtl.Rows[i]["DPID"].ToString(), 2) != "IN")
                        {
                            strSQL = "Select cm_sech_name,cm_thih_name,cb_nominee,cm_divbankcode,cb_voicemail,cm_divbankacno,cm_divbankccy,cm_divbranchno,cb_sechpanno,cb_thirdpanno,cb_UID2,cb_UID3 From " + '[' + Cross[0] + ']' + "." + Cross[1] + "." + Cross[2] + ".client_master , " + '[' + Cross[0] + ']' + "." + Cross[1] + "." + Cross[2] + ".client_backoffice " +
                            // strSQL = "Select cm_sech_name,cm_thih_name,cb_nominee,cm_divbankcode,cb_voicemail,cm_divbankacno,cm_divbankccy,cm_divbranchno,cb_sechpanno,cb_thirdpanno,cb_UID2,cb_UID3 From " + Cross[1] + "." + Cross[2] + ".client_master , " + Cross[1] + "." + Cross[2] + ".client_backoffice " +
                            "where cm_cd = cb_cmcd and cm_cd ='" + dtDPdtl.Rows[i]["ClientID"].ToString() + "'  and cm_active = '01'";
                            DataTable dtCrossDtls = myLib.OpenDataTable(strSQL);
                            if (dtCrossDtls.Rows.Count > 0)
                            {
                                cdsl.BOID = dtDPdtl.Rows[i]["ClientID"].ToString();
                                cdsl.SecHName = dtCrossDtls.Rows[0]["cm_sech_name"].ToString();
                                cdsl.SecHPANNo = dtCrossDtls.Rows[0]["cb_sechpanno"].ToString();
                                cdsl.ThrdHName = dtCrossDtls.Rows[0]["cm_thih_name"].ToString();
                                cdsl.ThrdHPANNo = dtCrossDtls.Rows[0]["cb_thirdpanno"].ToString();
                                cdsl.AcctNo = dtCrossDtls.Rows[0]["cm_divbankacno"].ToString();
                                cdsl.BankCd = dtCrossDtls.Rows[0]["cm_divbankcode"].ToString();
                                cdsl.IFSC = dtCrossDtls.Rows[0]["cb_voicemail"].ToString();
                                cdsl.AcctType = "";

                                switch (dtCrossDtls.Rows[0]["cm_divbranchno"].ToString())
                                {
                                    case "10":
                                        cdsl.AcctType = "Saving Account";
                                        break;
                                    case "11":
                                        cdsl.AcctType = "Current Account";
                                        break;
                                    case "13":
                                        cdsl.AcctType = "Cash Credit";
                                        break;
                                }

                                //strSQL = "select name from  " + Cross[1] + "." + Cross[2] + ".SysObjects where name = 'Client_NomineeDetails'";
                                strSQL = "select name from  " + '[' + Cross[0] + ']' + "." + Cross[1] + "." + Cross[2] + ".SysObjects where name = 'Client_NomineeDetails'";
                                DataTable dtNM = myLib.OpenDataTable(strSQL);
                                if (dtNM.Rows.Count > 0)
                                {
                                    strSQL = "select cn_NomName from " + '[' + Cross[0] + ']' + "." + Cross[1] + "." + Cross[2] + ". Client_NomineeDetails where  cn_PurposeCd = '6' and  cn_Cmcd='" + dtDPdtl.Rows[i]["ClientID"].ToString() + "'";
                                    // strSQL = "select cn_NomName from " + Cross[1] + "." + Cross[2] + ". Client_NomineeDetails where  cn_PurposeCd = '6' and  cn_Cmcd='" + dtDPdtl.Rows[i]["ClientID"].ToString() + "'";
                                    DataTable dtNomNameCross = myLib.OpenDataTable(strSQL);
                                    if (dtNomNameCross.Rows.Count > 0)
                                        cdsl.NomineeNm = dtNomNameCross.Rows[0]["cn_NomName"].ToString();
                                    else
                                        cdsl.NomineeNm = dtCrossDtls.Rows[0]["cb_nominee"].ToString();
                                }

                                strBankCode = dtCrossDtls.Rows[0]["cm_divbankcode"].ToString();
                                strVoiceMail = dtCrossDtls.Rows[0]["cb_voicemail"].ToString();
                                strbankccy = dtCrossDtls.Rows[0]["cm_divbankccy"].ToString();
                            }

                            strSQL = "select bk_name from  " + '[' + Cross[0] + ']' + "." + Cross[1] + "." + Cross[2] + ".bank_master " +
                              //strSQL = "select bk_name from  " + Cross[1] + "." + Cross[2] + ".bank_master " +
                              "where bk_micr = '" + strBankCode.Trim() + "' and bk_branch = '" + strVoiceMail.Trim() + "'";
                            DataTable dtBank = myLib.OpenDataTable(strSQL);
                            if (dtBank.Rows.Count > 0)
                            {
                                cdsl.BankName = dtBank.Rows[0]["bk_name"].ToString();
                            }


                            strSQL = "Select cs_desc from  " + '[' + Cross[0] + ']' + "." + Cross[1] + "." + Cross[2] + ".Clientsub_master where cs_code = '" + strbankccy.Trim() + "'";
                            // strSQL = "Select cs_desc from  " + Cross[1] + "." + Cross[2] + ".Clientsub_master where cs_code = '" + strbankccy.Trim() + "'";
                            DataTable dt = myLib.OpenDataTable(strSQL);
                            if (dt.Rows.Count > 0)
                            {
                                cdsl.Currency = dt.Rows[0]["cs_desc"].ToString();
                            }

                            CDSLDPview.Add(cdsl);
                        }
                    }
                };
            }
            else if (bEstro)
            {
                for (int i = 0; i < dtDPdtl.Rows.Count; i++)
                {
                    CDSLDPDetails cdsl = new CDSLDPDetails();
                    {
                        if (dtDPdtl.Rows[i]["Default"].ToString() == "Y" && Strings.Left(dtDPdtl.Rows[i]["DPID"].ToString(), 2) == "IN")
                        {
                            strSQL = "Select cm_sech_name,cb_stele,cm_secondemail,cm_thih_name,cb_ttele,cm_thirdemail,cb_nominee,cm_bankname,cm_bankactno,cm_bankacttype,cm_micr,cm_bankbranch,cb_sech_panno,cb_thih_panno,cb_tadd4,cb_spin From  " + Estro[0] + "." + Estro[1] + "." + Estro[2] + ".client_master," + Estro[0] + "." + Estro[1] + "." + Estro[2] + ".client_backoffice," + Estro[0] + "." + Estro[1] + "." + Estro[2] + ".sysParameter " +
                            " where cm_cd = cb_cmcd and sp_sysvalue+cm_cd ='" + dtDPdtl.Rows[i]["DPID"].ToString() + dtDPdtl.Rows[i]["ClientID"].ToString() + "'" +
                            " and sp_parmcd = 'DPID' and sp_sysvalue = '" + dtDPdtl.Rows[i]["DPID"].ToString() + "' and cm_active = '01'";
                            // strSQL = "Select cm_sech_name,cb_stele,cm_secondemail,cm_thih_name,cb_ttele,cm_thirdemail,cb_nominee,cm_bankname,cm_bankactno,cm_bankacttype,cm_micr,cm_bankbranch,cb_sech_panno,cb_thih_panno,cb_tadd4,cb_spin From  " + Estro[1] + "." + Estro[2] + ".client_master," + Estro[1] + "." + Estro[2] + ".client_backoffice," + Estro[1] + "." + Estro[2] + ".sysParameter " +
                            // " where cm_cd = cb_cmcd and sp_sysvalue+cm_cd ='" + dtDPdtl.Rows[i]["DPID"].ToString() + dtDPdtl.Rows[i]["ClientID"].ToString() + "'" +
                            // " and sp_parmcd = 'DPID' and sp_sysvalue = '" + dtDPdtl.Rows[i]["DPID"].ToString() + "' and cm_active = '01'";


                            DataTable dtEstroDtl = myLib.OpenDataTable(strSQL);
                            if (dtEstroDtl.Rows.Count > 0)
                            {
                                cdsl.SecHName = dtEstroDtl.Rows[0]["cm_sech_name"].ToString();
                                cdsl.SecHPANNo = dtEstroDtl.Rows[0]["cb_sech_panno"].ToString();
                                cdsl.SecHMobNo = dtEstroDtl.Rows[0]["cb_stele"].ToString();
                                cdsl.SecHEmail = dtEstroDtl.Rows[0]["cm_secondemail"].ToString();
                                cdsl.ThrdHName = dtEstroDtl.Rows[0]["cm_thih_name"].ToString();
                                cdsl.ThrdHPANNo = dtEstroDtl.Rows[0]["cb_thih_panno"].ToString();
                                cdsl.ThrdHMobNo = dtEstroDtl.Rows[0]["cb_ttele"].ToString();
                                cdsl.ThrdHEmail = dtEstroDtl.Rows[0]["cm_thirdemail"].ToString();

                                // strSQL = "select name from " + Estro[0] + "." + Estro[1] + "." + Estro[2] + ".SysObjects where name = 'Client_NomineeDetails'";
                                strSQL = "select name from " + Estro[1] + "." + Estro[2] + ".SysObjects where name = 'Client_NomineeDetails'";
                                DataTable dtNM = myLib.OpenDataTable(strSQL);
                                if (dtNM.Rows.Count > 0)
                                {
                                    strSQL = "select cn_NomName from " + Estro[0] + "." + Estro[1] + "." + Estro[2] + ".Client_NomineeDetails where  cn_PurposeCd = '3' and  cn_cd='" + dtDPdtl.Rows[i]["ClientID"].ToString() + "'";
                                    // strSQL = "select cn_NomName from " + Estro[1] + "." + Estro[2] + ".Client_NomineeDetails where  cn_PurposeCd = '3' and  cn_cd='" + dtDPdtl.Rows[i]["ClientID"].ToString() + "'";
                                    DataTable dtNomNameEstro = myLib.OpenDataTable(strSQL);
                                    if (dtNomNameEstro.Rows.Count > 0)
                                        cdsl.NomineeNm = dtNomNameEstro.Rows[0]["cn_NomName"].ToString();
                                    else
                                        cdsl.NomineeNm = dtEstroDtl.Rows[0]["cb_nominee"].ToString();
                                }

                                cdsl.BankName = dtEstroDtl.Rows[0]["cm_bankname"].ToString();
                                cdsl.AcctNo = dtEstroDtl.Rows[0]["cm_bankactno"].ToString();
                                cdsl.MICR = dtEstroDtl.Rows[0]["cm_micr"].ToString();
                                cdsl.IFSC = dtEstroDtl.Rows[0]["cm_bankbranch"].ToString();


                                strSQL = "select ba_description from " + Estro[0] + "." + Estro[1] + "." + Estro[2] + ".Bankaccount_type where ba_code ='" + dtEstroDtl.Rows[0]["cm_bankacttype"].ToString() + "'";
                                //  strSQL = "select ba_description from " + Estro[1] + "." + Estro[2] + ".Bankaccount_type where ba_code ='" + dtEstroDtl.Rows[0]["cm_bankacttype"].ToString() + "'";

                                DataTable dtBank = myLib.OpenDataTable(strSQL);
                                if (dtBank.Rows.Count > 0)
                                {
                                    cdsl.AcctType = dtBank.Rows[0]["ba_description"].ToString();
                                }
                                CDSLDPview.Add(cdsl);
                            }
                        }
                    };
                }
            }


            strSQL = "select CK_BSECashUCC,CK_NSECashUCC,CK_NSEFNoUCC from Client_kyc where CK_Clientcd='" + Code + "'";

            DataTable dtUCC = myLib.OpenDataTable(strSQL);
            List<UCCStatus> UCCview = new List<UCCStatus>();
            UCCview = dtUCC.AsEnumerable()

            .Select(row => new UCCStatus
            {
                BseCashUCC = row.Field<string>("CK_BSECashUCC"),
                NseCashUCC = row.Field<string>("CK_NSECashUCC"),
                NseFnOUCC = row.Field<string>("CK_NSEFNoUCC"),
            }).ToList();





            strSQL = "select *, fm_desc as cmfamily,cm_pwd,gr_desc as cmgroup, bm_branchname as cmbranch ,";
            strSQL += " case when left(cm_sex,1)='M' then 'Male' when left(cm_sex,1)='F' then 'Female' else '' end as cm_sex1,";
            strSQL += " case cm_type when 'N' then 'Investor' when 'S' then 'Speculator' when 'I' then 'Institute' when 'B' then 'Sub-Broker' when 'J' then 'Jobber' when 'C' then 'Broker' when 'P' then 'Proprietor' when 'T' then 'Trading Member' else '' end as cm_type1, ";
            strSQL += " case cm_opendt when '' then '' else convert(char(10),convert(datetime,cm_opendt),103) end as cm_open1, ";
            strSQL += " case cm_stampdutyyn when 'Y' then 'true' else 'false' end as cm_stamp, ";
            strSQL += " case cm_confirmemailyn when 'Y' then 'true' else 'false' end as cm_confirmemail, ";
            strSQL += " case cm_confirmwebyn when 'Y' then 'true' else 'false' end as cm_confirmweb, ";
            strSQL += " (CASE WHEN ISDATE (cn_kradate) = 1 THEN convert(char(10),convert(datetime,cn_kradate),103) else '' END) as cn_kradate1,";
            strSQL += " case cm_billflag when 'Y' then 'Pre-Printed/Blank' when 'B' then 'Blank' when 'P' then 'Pre-printed' else 'No' end as cm_billflag1, ";
            strSQL += " case cm_contractflag when 'Y' then 'Yes' when 'A' then 'At Branch' else 'No' end as cm_contractflag1, ";
            strSQL += " case cm_contractprint when 'N' then 'Normal' when 'P' then 'Principal to Principal' when 'S' then 'Summarise' when 'I' then 'Item Wise' when 'Order Wise' then 'O' else '' end as cm_contractprint1, ";
            strSQL += " case cm_poa when 'Y' then 'Yes' else 'No' end as cm_poa1, ";
            strSQL += " case cm_dob when '' then '' else convert(char(10),convert(datetime,cm_dob),103) end as cm_dob1, ";
            strSQL += " isnull(rm_name,'Direct') SubBrkNm ";
            strSQL += " , case cm_fundpayout when 'O' then 'On Demand' when 'A' then 'Auto' else '' end as cm_fundpayout1  , case cm_bankacttype when 'C' then 'Cheque' when 'D' then 'DD' when 'T' then 'Transfer' else '' end as cm_bankacttype1 ";
            strSQL += " , case cm_directpayout when 'Y' then 'Direct' when 'N' then 'On Demand' when 'W' then 'Weekly' when 'A' then 'Always Hold' when 'D' then 'Daily' when 'M' then 'Monthly' else '' end as cm_directpayout1, ";
            strSQL += " case isNull(cn_krastatus,'') when 'Y' then 'Registered' when 'N' then 'Not Registered' end as cn_krastatus1 , isnull((Select rtrim(rm_name) from RM_master where rm_cd = cm_dpactno) + ' (' + rtrim(cm_dpactno) + ')','') cm_dpactnoRM ,( select cc_descrip from Client_Category where cc_cd = cm_constitution ) as constitution,cm_internalrefno ,cm_uid,";
            strSQL += " case cm_freezeyn when 'Y' then 'Freeze for Trades' when 'B' then 'Freeze for Branches' when 'A' then 'Freeze for All'  else 'Active'  end cm_freezestatus,cm_freezereason";
            strSQL += ",cm_grossincomedt,cm_grossincome,cm_networth,cm_networthdt";
            strSQL += " from Client_master a left outer join Client_Nominee on cm_cd=cn_cd left outer join SubBrokers on cm_subbroker=rm_cd , Family_master, Group_master, Branch_master,client_info ";
            strSQL += " where cm_cd=cm2_cd  and cm_cd='" + Code + "'  ";
            //strSQL += " and cm_schedule =" & Application("CMSCHEDULE") & objApplicationUser.fnLoginFilter();
            strSQL += " and cm_schedule = 49843750 and exists " + myutil.LoginAccess("cm2_cd") + "";
            strSQL += " and cm_groupcd= gr_cd and cm_familycd= fm_cd and cm_brboffcode = bm_branchcd ";


            DataTable dtCLDetails = myLib.OpenDataTable(strSQL);
            if (dtCLDetails.Rows.Count > 0)
            {
                DataRow dr = dtCLDetails.Rows[0];
                ClientMasterDetails CLMasterview = new ClientMasterDetails()
                {
                    ClientCd = dr["cm_cd"].ToString().Trim(),
                    ClientName = dr["cm_name"].ToString().Trim(),
                    Address1 = dr["cm_add1"].ToString().Trim(),
                    Address2 = dr["cm_add2"].ToString().Trim(),
                    Address3 = dr["cm_add3"].ToString().Trim(),
                    City = dr["cm_add4"].ToString().Trim(),
                    State = dr["cm_state"].ToString().Trim(),
                    Country = dr["cm_BankActNo"].ToString().Trim(),
                    PinCd = dr["cm_pincode"].ToString().Trim(),
                    StdCode = (dr["cm_std"].ToString().Trim() != "" ? dr["cm_std"].ToString().Trim() + ' ' + "(STD)" : ""),
                    TeleOff = (dr["cm_tele1"].ToString().Trim() != "" ? dr["cm_tele1"].ToString().Trim() + ' ' + "(Off)" : ""),
                    TeleResi = (dr["cm_tele2"].ToString().Trim() != "" ? dr["cm_tele2"].ToString().Trim() + ' ' + "(Resi)" : ""),
                    Mobile = dr["cm_mobile"].ToString().Trim(),
                    Fax = dr["cm_fax"].ToString().Trim(),
                    PAN = dr["cm_panno"].ToString().Trim(),
                    DOB = dr["cm_dob1"].ToString().Trim(),
                    Occupation = dr["cm_occup"].ToString().Trim(),
                    Remarks = dr["cm_remarks"].ToString().Trim(),
                    UID = dr["cm_uid"].ToString().Trim(),
                    DepositAC = dr["cm_brkggroup"].ToString().Trim(),
                    KRAStatus = GetKRAStatus(dr["cm_cd"].ToString().Trim(), "Y"),
                    KRAAddress = dr["cn_kradate1"].ToString().Trim(),
                    Remissier = dr["cm_subbroker"].ToString().Trim(),
                    Constitution = dr["constitution"].ToString().Trim(),
                    Status = dr["cm_freezestatus"].ToString().Trim(),
                    networthdt = dr["cm_networthdt"].ToString().Trim(),
                    networth = dr["cm_networth"].ToString().Trim(),
                    grossincome = dr["cm_grossincome"].ToString().Trim(),
                    grossincomedt = dr["cm_grossincomedt"].ToString().Trim(),
                    Introducer = dr["cm_introducer"].ToString().Trim(),
                    Group = dr["cmgroup"].ToString().Trim(),
                    Family = dr["cmfamily"].ToString().Trim(),
                    Type = dr["cm_type1"].ToString().Trim(),
                    Branch = dr["cmbranch"].ToString().Trim(),
                    Sex = dr["cm_sex1"].ToString().Trim(),
                    EmailId = dr["cm_email"].ToString().Trim(),
                    BillPrinting = dr["cm_billflag1"].ToString().Trim(),
                    ContractPrinting = dr["cm_contractflag1"].ToString().Trim(),
                    POA = dr["cm_poa1"].ToString().Trim(),
                    AcctOpenDt = dr["cm_open1"].ToString().Trim(),
                    LedgerBal = getbilldt(dr["cm_cd"].ToString().Trim()),
                    OverallLedgerBal = decimal.Parse(getLedBal(0, dr["cm_cd"].ToString().Trim())),
                    GetFamily = getFamilyStatus(dr["cm_cd"].ToString()),
                    LastBillDt = getbilldt(dr["cm_cd"].ToString().Trim()),
                    RM = dr["cm_dpactnoRM"].ToString().Trim(),
                    FormNo = dr["cm_internalrefno"].ToString().Trim(),
                    Password = dr["cm_pwd"].ToString().Trim(),
                    FreezeReason = dr["cm_freezereason"].ToString().Trim(),
                    GetCLDPDetails = DPview,
                    GetCLBankDetails = Bankview,
                    GetCDSLDPDetails = CDSLDPview,
                    GetUCCStatus = UCCview,
                };
                return CLMasterview;
            }
            return null;
        }

        public string GetKRAStatus(string strCltCd, string strdesc = "N")
        {
            LibraryModel myLib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            UtilityDBModel mydbutil = new UtilityDBModel();
            DataTable dtTemp = new DataTable();

            strSQL = "select cn_krastatus, isnull(cn_filler5,'') cn_filler5  from client_nominee where cn_cd='" + strCltCd + "'";
            dtTemp = myLib.OpenDataTable(strSQL);


            if (dtTemp.Rows.Count > 0)
            {
                DataRow dr = dtTemp.Rows[0];
                if (strdesc == "Y")
                {
                    if (dr["cn_krastatus"].ToString() == "Y" && dr["cn_filler5"].ToString() != "")
                        return "Registered [ " + dr["cn_filler5"].ToString() + " ]";
                    else
                        return "Registered ";
                }
                else
                    return dr["cn_krastatus"].ToString();
            }
            else
            {
                return "N";
            }
        }

        public string getbilldt(string strCltCd)
        {
            string strbilldt = "";
            LibraryModel myLib = new LibraryModel();
            DataTable dtBilldt = new DataTable();

            strSQL = "select top 1 ld_dpid,max(ld_dt) ld_dt from ledger where ld_documenttype='B' and ";
            strSQL = strSQL + " ld_clientcd='" + strCltCd + "' group by ld_dpid order by max(ld_dt) desc";
            dtBilldt = myLib.OpenDataTable(strSQL);
            if (dtBilldt.Rows.Count > 0)
            {
                DataRow dr = dtBilldt.Rows[0];
                strbilldt = GetSlashDateNew(dr["ld_dt"].ToString()) + " (" + dr["ld_dpid"].ToString() + ")";
            }

            return strbilldt;

        }

        public string GetSlashDateNew(string Date)
        {
            if (Date.ToString().Trim() == "")
                return string.Empty;
            int Year = int.Parse(Date.Substring(0, 4));
            int Month = int.Parse(Date.Substring(4, 2));
            int Day = int.Parse(Date.Substring(6, 2));
            return new DateTime(Year, Month, Day).ToString("dd/MM/yyyy", new System.Globalization.CultureInfo("en-GB"));
        }

        public string getLedBal(int intj, string strCltCd)
        {
            string ledbal = "";
            LibraryModel myLib = new LibraryModel();
            DataTable dtledbal = new DataTable();
            if (intj == 0)
            {
                strSQL = "select isnull(sum(ld_amount),0) from ledger ";
                strSQL += " where ltrim(ld_clientcd) ='" + strCltCd + "'";
            }
            else if (intj == 1)
            {
                strSQL = "select isnull(sum(ld_amount),0) from ledger ";
                strSQL += " where ltrim(ld_clientcd) ='" + strCltCd + "'";
            }

            dtledbal = myLib.OpenDataTable(strSQL);
            if (dtledbal.Rows.Count > 0)
            {
                DataRow dr = dtledbal.Rows[0];
                ledbal = dr[0].ToString();
            }

            return ledbal;


        }

        public List<FamilyStatus> getFamilyStatus(string strCltCd)
        {

            string strfamilycd;
            LibraryModel myLib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            UtilityDBModel mydbutil = new UtilityDBModel();
            // StringBuilder sbsql = new StringBuilder();
            DataTable dt = null;

            string strUcc = "";

            string strSQL = "";

            strfamilycd = myLib.fnFireQuery("Client_Master", "CM_FamilyCd", "CM_CD", strCltCd, true);
            if (Convert.ToInt32(myLib.fnFireQuery("Client_Master", "count(0)", "cm_freezeyn <> 'A' and cm_Familycd ", strfamilycd, true)) > 10)
            {
                strfamilycd = "ZZZ";
            }
            strSQL = "Select Client_KYC.*,cm_cd, cm_name, cm_Freezeyn,'' Frezereason,ces_cd,'Pending' UCC,'Pending' Aadhar,'Pending' CKYC,'Pending' KRA,cm_uid,";
            strSQL += " case (select count(*) from entity_master) when 1 then '' else rtrim(ces_ShortNm)+' ' end+' '+rtrim(ces_Exchange)+' '+rtrim(ces_Segment) CES_Nm";
            strSQL += " from Client_Master,Client_info,CompanyExchangeSegments B,Client_KYC";
            strSQL += " where cm_cd=cm2_cd and cm_cd=ck_clientcd and CES_CD in ('" + HttpContext.Current.Session["CompanyCode"] + "BC" + "','" + HttpContext.Current.Session["CompanyCode"] + "NC" + "','" + HttpContext.Current.Session["CompanyCode"] + "NF" + "','" + HttpContext.Current.Session["CompanyCode"] + "NK" + "','" + HttpContext.Current.Session["CompanyCode"] + "MC" + "','" + HttpContext.Current.Session["CompanyCode"] + "MF" + "','" + HttpContext.Current.Session["CompanyCode"] + "MK" + "','" + HttpContext.Current.Session["CompanyCode"] + "BK" + "')";
            strSQL += " and " + (strfamilycd == "ZZZ" ? "cm_cd = '" + strCltCd : " cm_Familycd='" + strfamilycd) + "'";
            strSQL += " order by cm_name, cm_cd, ces_cd";
            dt = myLib.OpenDataTable(strSQL);
            if (dt.Rows.Count > 0)
            {
                for (int i = 0; i <= dt.Rows.Count - 1; i++)
                {
                    dt.Rows[i]["Frezereason"] = (dt.Rows[i]["cm_Freezeyn"].ToString() == "Y" ? "For Trades" : (dt.Rows[i]["Frezereason"].ToString() == "B" ? "at Branch" : "None"));
                    if (Strings.InStr(1, dt.Rows[i]["ces_cd"].ToString(), "BC") > 0)
                    {
                        strUcc = "CK_BSECashUCC";
                    }
                    else if (Strings.InStr(1, dt.Rows[i]["ces_cd"].ToString(), "NC") > 0)
                    {
                        strUcc = "CK_NSECashUCC";
                    }
                    else if (Strings.InStr(1, dt.Rows[i]["ces_cd"].ToString(), "NF") > 0)
                    {
                        strUcc = "CK_NSEFNoUCC";
                    }
                    else if (Strings.InStr(1, dt.Rows[i]["ces_cd"].ToString(), "MC") > 0)
                    {
                        strUcc = "CK_MCXCASHUCC";
                    }
                    else if (Strings.InStr(1, dt.Rows[i]["ces_cd"].ToString(), "MF") > 0)
                    {
                        strUcc = "CK_MCXFOUCC";
                    }
                    else if (Strings.InStr(1, dt.Rows[i]["ces_cd"].ToString(), "MK") > 0)
                    {
                        strUcc = "CK_MCXFXUCC";
                    }
                    else if (Strings.InStr(1, dt.Rows[i]["ces_cd"].ToString(), "BK") > 0)
                    {
                        strUcc = "CK_BSEFXUCC";
                    }

                    if (dt.Rows[i][strUcc].ToString() == "S")
                    {
                        dt.Rows[i]["UCC"] = "Success";
                    }

                    else if (dt.Rows[i][strUcc].ToString() == "E")
                    {
                        dt.Rows[i]["UCC"] = "Exported";
                    }
                    else if (dt.Rows[i][strUcc].ToString() == "I")
                    {
                        dt.Rows[i]["UCC"] = "Pending";
                    }

                    dt.Rows[i]["Aadhar"] = (dt.Rows[i]["cm_uid"].ToString() == "" ? "Pending" : "Received");

                    DataTable dtStatus = null;
                    strSQL = "Select cm_cd,case ck_status when 'Y' then 'Pending' when 'E' then 'Exported' when 'S' then 'Success' else 'Pending' end as ck_status";
                    strSQL += " from Client_ckyc, Client_master where cm_freezeyn <> 'A' and cm_panno=ck_panno and cm_cd = '" + dt.Rows[i]["cm_cd"] + "'";
                    dtStatus = myLib.OpenDataTable(strSQL);
                    if (dtStatus.Rows.Count > 0)
                    {
                        dt.Rows[i]["CKYC"] = dtStatus.Rows[0]["ck_status"];
                    }
                    dtStatus = myLib.OpenDataTable("Select cn_cd,cn_krastatus from Client_nominee, Client_master where cm_freezeyn <> 'A' and cm_cd=cn_cd and cm_cd = '" + dt.Rows[i]["cm_cd"] + "'");
                    if (dtStatus.Rows.Count > 0)
                    {

                        dt.Rows[i]["KRA"] = (dtStatus.Rows[0]["cn_krastatus"].ToString() == "Y" ? "Done" : "Pending");
                    }
                }
                // dt = myLib.OpenDataTable(strSQL);
                List<FamilyStatus> familylist = new List<FamilyStatus>();
                familylist = dt.AsEnumerable()

                .Select(row => new FamilyStatus
                {
                    cmcd = row.Field<string>("cm_cd"),
                    cmname = row.Field<string>("cm_name"),
                    Frezereason = row.Field<string>("Frezereason"),
                    cesnm = row.Field<string>("ces_nm"),
                    UCC = row.Field<string>("UCC"),
                    Aadhar = row.Field<string>("Aadhar"),
                    CKYC = row.Field<string>("CKYC"),
                    KRA = row.Field<string>("KRA")
                }).ToList();

                return familylist;
            }
            return null;
        }
        public ClientMasterDetails GetComClientMasterDetails(string Code)
        {

            string strSQL = "";
            LibraryModel myLib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            UtilityDBModel mydbutil = new UtilityDBModel();
            SqlConnection SQLConnComex = mydbutil.commexTemp_conn("Commex");


            strSQL = "select isnull(da_clientcd,'') 'Code',isnull(da_dpid,'') 'DPID', isnull(da_actno,'') 'ClientID',";
            strSQL = strSQL + " isnull(da_name,'') 'AccountName',da_defaultyn 'Default',dp_name 'DpName'";
            strSQL = strSQL + " from Dematact,Dps ";
            strSQL = strSQL + " where dp_dpid=da_dpid and da_clientcd= '" + Code + "' order by da_defaultyn desc";


            DataTable dtDPdtl = myLib.OpenDataTable(strSQL, SQLConnComex);
            List<CLDPDetails> DPview = new List<CLDPDetails>();
            DPview = dtDPdtl.AsEnumerable()
            .Select(row => new CLDPDetails
            {
                Code = row.Field<string>("Code"),
                DPID = row.Field<string>("DPID"),
                ClientID = row.Field<string>("ClientID"),
                AcctName = row.Field<string>("AccountName"),
                Default = row.Field<string>("Default"),
                DpName = row.Field<string>("DpName"),
            }).ToList();


            strSQL = " select bk_name 'Bank Name',bk_add1 'Branch',Bankact.*";
            strSQL += " from Bankact, Bank_master";
            strSQL += " where bk_micr=ba_micr and ba_clientcd = '" + Code + "'";
            strSQL += " and ba_ifsccode=bk_branch ";
            // strSQL +=   myLib.fnFireQuery("client_info", "case cm_fundpayout when 'O' then 'On Demand' when 'A' then 'Auto' else '' end as cm_fundpayout1 ", "cm2_cd", "'+ Code +'", true);
            // strSQL +=   myLib.fnFireQuery("client_master", "case cm_bankacttype when 'C' then 'Cheque' when 'D' then 'Demand Draft' when 'T' then 'Transfer' else '' end as cm_bankacttype1 ", "cm_cd", "'+ Code +'", true);

            DataTable dtBankdtl = myLib.OpenDataTable(strSQL, SQLConnComex);
            List<CLBankDetails> Bankview = new List<CLBankDetails>();
            Bankview = dtBankdtl.AsEnumerable()
            .Select(row => new CLBankDetails
            {
                MICR = row.Field<string>("ba_micr"),
                IFSC = row.Field<string>("ba_ifsccode"),
                ActType = row.Field<string>("ba_acttype"),
                ActNO = row.Field<string>("ba_actno"),
                AcctName = row.Field<string>("Bank Name"),
                BankDetail = row.Field<string>("Branch"),
                Default = row.Field<string>("ba_default")
                // cm_fundpayout = row.Field<string>("cm_fundpayout"),
                //cm_bankacttype = row.Field<string>("cm_bankacttype")

            }).ToList();

            //strSQL = "select CK_BSECashUCC,CK_NSECashUCC,CK_NSEFNoUCC from Client_kyc where CK_Clientcd='" + Code + "'";

            //DataTable dtUCC = myLib.OpenDataTable(strSQL, SQLConnComex);
            //List<UCCStatus> UCCview = new List<UCCStatus>();
            //UCCview = dtUCC.AsEnumerable()

            //.Select(row => new UCCStatus
            //{
            //    BseCashUCC = row.Field<string>("CK_BSECashUCC"),
            //    NseCashUCC = row.Field<string>("CK_NSECashUCC"),
            //    NseFnOUCC = row.Field<string>("CK_NSEFNoUCC"),
            //}).ToList();

            strSQL = "select *, fm_desc as cmfamily,cm_pwd,gr_desc as cmgroup, bm_branchname as cmbranch ,";
            strSQL += " case when left(cm_sex,1)='M' then 'Male' when left(cm_sex,1)='F' then 'Female' else '' end as cm_sex1,";
            strSQL += " case cm_type when 'N' then 'Investor' when 'S' then 'Speculator' when 'I' then 'Institute' when 'B' then 'Sub-Broker' when 'J' then 'Jobber' when 'C' then 'Broker' when 'P' then 'Proprietor' when 'T' then 'Trading Member' else '' end as cm_type1, ";
            strSQL += " case cm_opendt when '' then '' else convert(char(10),convert(datetime,cm_opendt),103) end as cm_open1, ";
            strSQL += " case cm_stampdutyyn when 'Y' then 'true' else 'false' end as cm_stamp, ";

            strSQL += " case cm_confirmemailyn when 'Y' then 'true' else 'false' end as cm_confirmemail, ";
            strSQL += "case cm_confirmwebyn when 'Y' then 'true' else 'false' end as cm_confirmweb, ";
            strSQL += " case cn_kradate when '' then '' else convert(char(10),convert(datetime,cn_kradate),103) end as cn_kradate1,";
            strSQL += " case cm_billflag when 'Y' then 'Pre-Printed/Blank' when 'B' then 'Blank' when 'P' then 'Pre-printed' else 'No' end as cm_billflag1, ";
            strSQL += " case cm_contractflag when 'Y' then 'Yes' else 'No' end as cm_contractflag1, ";
            strSQL += " case cm_contractprint when 'N' then 'Normal' when 'P' then 'Principal to Principal' when 'S' then 'Summarise' when 'I' then 'Item Wise' when 'Order Wise' then 'O' else '' end as cm_contractprint1, ";
            strSQL += " case cm_poa when 'Y' then 'Yes' else 'No' end as cm_poa1, ";
            strSQL += " case cm_dob when '' then '' else convert(char(10),convert(datetime,cm_dob),103) end as cm_dob1 ,case isNull(cn_krastatus,'') when 'Y' then 'Registered' when 'N' then 'Not Registered' end as cn_krastatus1,ck_uid,";
            strSQL += " case cm_freezeyn when 'Y' then 'Freeze for Trades' when 'B' then 'Freeze for Branches' when 'A' then 'Freeze for All'  else 'Active'  end cm_freezestatus,cm_freezereason";
            strSQL += " from Client_master a left outer join Client_Nominee on cm_cd=cn_cd left outer join Client_KYC on ck_cmcd=a.cm_cd, Family_master, Group_master, Branch_master where cm_schedule=49843750  and cm_cd='" + Code + "'";
            strSQL += "and cm_groupcd = gr_cd and cm_familycd = fm_cd and cm_brboffcode = bm_branchcd ";



            DataTable dtCLDetails = myLib.OpenDataTable(strSQL, SQLConnComex);
            if (dtCLDetails.Rows.Count > 0)
            {
                DataRow dr = dtCLDetails.Rows[0];
                ClientMasterDetails CLMasterview = new ClientMasterDetails()
                {
                    ClientCd = dr["cm_cd"].ToString().Trim(),
                    ClientName = dr["cm_name"].ToString().Trim(),
                    Address1 = dr["cm_add1"].ToString().Trim(),
                    Address2 = dr["cm_add2"].ToString().Trim(),
                    Address3 = dr["cm_add3"].ToString().Trim(),
                    City = dr["cm_add4"].ToString().Trim(),
                    // State = dr["cm_state"].ToString().Trim(),
                    Country = dr["cm_BankActNo"].ToString().Trim(),
                    PinCd = dr["cm_pincode"].ToString().Trim(),
                    StdCode = (dr["cm_std"].ToString().Trim() != "" ? dr["cm_std"].ToString().Trim() + "(STD)" : ""),
                    TeleOff = (dr["cm_tele1"].ToString().Trim() != "" ? dr["cm_tele1"].ToString().Trim() + "(Off)" : ""),
                    TeleResi = (dr["cm_tele2"].ToString().Trim() != "" ? dr["cm_tele2"].ToString().Trim() + "(Resi)" : ""),
                    Mobile = dr["cm_mobile"].ToString().Trim(),
                    Fax = dr["cm_fax"].ToString().Trim(),
                    PAN = dr["cm_panno"].ToString().Trim(),
                    DOB = dr["cm_dob1"].ToString().Trim(),
                    Occupation = dr["cm_occup"].ToString().Trim(),
                    Remarks = dr["cm_remarks"].ToString().Trim(),
                    //UID = dr["cm_uid"].ToString().Trim(),
                    DepositAC = dr["cm_brkggroup"].ToString().Trim(),
                    // KRAStatus = GetKRAStatuscom(dr["cm_cd"].ToString().Trim(), "Y"),
                    KRAStatus = dr["cn_Krastatus1"].ToString().Trim(),
                    KRAAddress = dr["cn_kradate1"].ToString().Trim(),
                    Remissier = dr["cm_subbroker"].ToString().Trim(),
                    // Constitution = dr["constitution"].ToString().Trim(),
                    Status = dr["cm_freezestatus"].ToString().Trim(),
                    Introducer = dr["cm_introducer"].ToString().Trim(),
                    Group = dr["cmgroup"].ToString().Trim(),
                    Family = dr["cmfamily"].ToString().Trim(),
                    Type = dr["cm_type1"].ToString().Trim(),
                    Branch = dr["cmbranch"].ToString().Trim(),
                    Sex = dr["cm_sex1"].ToString().Trim(),
                    EmailId = dr["cm_email"].ToString().Trim(),
                    BillPrinting = dr["cm_billflag1"].ToString().Trim(),
                    ContractPrinting = dr["cm_contractflag1"].ToString().Trim(),
                    POA = dr["cm_poa1"].ToString().Trim(),
                    AcctOpenDt = dr["cm_open1"].ToString().Trim(),
                    LedgerBal = getbilldtcom(dr["cm_cd"].ToString().Trim()),
                    OverallLedgerBal = decimal.Parse(getLedBal(0, dr["cm_cd"].ToString())),
                    LastBillDt = getbilldt(dr["cm_cd"].ToString().Trim()),
                    //   RM = dr["cm_dpactnoRM"].ToString().Trim(),
                    FormNo = dr["cm_internalrefno"].ToString().Trim(),
                    Password = dr["cm_pwd"].ToString().Trim(),
                    FreezeReason = dr["cm_freezereason"].ToString().Trim(),
                    GetCLDPDetails = DPview,
                    GetCLBankDetails = Bankview,

                    //GetUCCStatus = UCCview,
                };
                return CLMasterview;
            }
            return null;
        }

        public string GetKRAStatuscom(string strCltCd, string strdesc = "N")
        {
            LibraryModel myLib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            UtilityDBModel mydbutil = new UtilityDBModel();
            DataTable dtTemp = new DataTable();

            SqlConnection SQLConnComex = mydbutil.commexTemp_conn("Commex");
            strSQL = "select cn_krastatus, isnull(cn_filler5,'') cn_filler5  from client_nominee where cn_cd='" + strCltCd + "'";
            dtTemp = myLib.OpenDataTable(strSQL, SQLConnComex);


            if (dtTemp.Rows.Count > 0)
            {
                DataRow dr = dtTemp.Rows[0];
                if (strdesc == "Y")
                {
                    if (dr["cn_krastatus"].ToString() == "Y" && dr["cn_filler5"].ToString() != "")
                        return "Registered [ " + dr["cn_filler5"].ToString() + " ]";
                    else
                        return "Registered ";
                }
                else
                    return dr["cn_krastatus"].ToString();
            }
            else
            {
                return "N";
            }
        }

        public string getbilldtcom(string strCltCd)
        {
            string strbilldt = "";
            LibraryModel myLib = new LibraryModel();
            DataTable dtBilldt = new DataTable();
            UtilityDBModel mydbutil = new UtilityDBModel();

            SqlConnection SQLConnComex = mydbutil.commexTemp_conn("Commex");
            strSQL = "select top 1 ld_dpid,max(ld_dt) ld_dt from ledger where ld_documenttype='B' and ";
            strSQL = strSQL + " ld_clientcd='" + strCltCd + "' group by ld_dpid order by max(ld_dt) desc";
            dtBilldt = myLib.OpenDataTable(strSQL, SQLConnComex);
            if (dtBilldt.Rows.Count > 0)
            {
                DataRow dr = dtBilldt.Rows[0];
                strbilldt = GetSlashDateNew(dr["ld_dt"].ToString()) + " (" + dr["ld_dpid"].ToString() + ")";
            }

            return strbilldt;

        }
        public String GetChangePwdReport(string Code, string Oldpasswod, string Newpasswod)
        {
            string Msg = "";
            DataTable dt = null;
            string strsql = null;
            LibraryModel myLib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();


            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {
                curCon.Open();
                strSQL = "select * from User_master where um_user_id = '" + Code + "'";
                dt = myLib.OpenDataTable(strSQL);
                if (dt.Rows.Count != 0)
                {
                    if (Oldpasswod == myutil.Decrypt(dt.Rows[0]["um_passwd"].ToString()))
                    {
                        strsql = "Update User_master set um_passwd='" + myutil.Encrypt(Newpasswod) + "'where um_user_id = '" + Code + "'";
                        myLib.ExecSQL(strsql, curCon);
                        Msg = "Password Change Successfully.";
                    }
                    else
                    { Msg = "Old password not matched..."; }




                }
                else
                { Msg = "Code is not valid...."; }

            }


            return Msg;
        }

        public DataTable GetClientDetails(string Code, string cmbField, string cmbValue, string date, string pageCondition, string cmbSort)
        {

            DataTable dtClient = new DataTable();
            string strspFltr = "";
            string strClient;
            string strsql = "";
            string chrSpecialClient = "";
            string strOrder = "";
            LibraryModel myLib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();

            if (Code != "")
            {
                Code = " and cm_cd = '" + Code + "'";
            }

            if (cmbSort == "C")
            {
                strOrder = " order by  cm_cd ";
            }
            else if (cmbSort == "N")
            {
                strOrder = " order by  cm_name ";
            }

            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {

                if (cmbField == "N" && cmbValue == "None")
                {
                    DataTable dt = null;
                    string sql = " select count(*) as IdCount from client_master,client_info where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 " + HttpContext.Current.Session["LoginAccessOld"] + "  and cm_specialyn <> 'Y' ";
                    dt = myLib.OpenDataTable(sql);
                    HttpContext.Current.Session["clientpager"] = Math.Ceiling((double)(Convert.ToDecimal(dt.Rows[0]["IdCount"]) / 100));

                    strsql = "select cm_cd, cm_name from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccess("cm2_cd") + " " + Code + " and cm_specialyn <> 'Y' )a where row_num " + pageCondition + strOrder;
                    dtClient = myLib.OpenDataTable(strsql, curCon);
                }
                if (cmbField == "E" && cmbValue == "Available")
                {
                    DataTable dt = null;
                    string sql = " select count(*) as IdCount from client_master,client_info where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 " + HttpContext.Current.Session["LoginAccessOld"] + "  and cm_specialyn <> 'Y' and rtrim(cm_email) <> '' ";
                    dt = myLib.OpenDataTable(sql);
                    HttpContext.Current.Session["clientpager"] = Math.Ceiling((double)(Convert.ToDecimal(dt.Rows[0]["IdCount"]) / 100));

                    strsql = "select cm_cd, cm_name ,cm_email from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name,cm_email from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccess("cm2_cd") + " " + Code + " and cm_specialyn <> 'Y' and rtrim(cm_email) <> '' )a where row_num  " + pageCondition + strOrder;
                    dtClient = myLib.OpenDataTable(strsql, curCon);
                }

                else if (cmbField == "E" && cmbValue == "Not Available")
                {
                    DataTable dt = null;
                    string sql = "select count(*) as IdCount from (select ROW_NUMBER() over(" + strOrder + ")  row_num, cm_cd, cm_name from Client_master , CLient_Info  where cm_cd = cm2_cd and  cm_cd like '%'  and cm_schedule = 49843750 and exists " + myutil.LoginAccess("cm2_cd") + " and cm_specialyn <> 'Y' and  rtrim(cm_email) = '' )a ";
                    dt = myLib.OpenDataTable(sql);
                    HttpContext.Current.Session["clientpager"] = Math.Ceiling((double)(Convert.ToDecimal(dt.Rows[0]["IdCount"]) / 100));

                    strsql = "select cm_cd, cm_name from (select ROW_NUMBER() over(" + strOrder + ")  row_num, cm_cd, cm_name from Client_master , CLient_Info  where cm_cd = cm2_cd and  cm_cd like '%'  and cm_schedule = 49843750 and exists " + myutil.LoginAccess("cm2_cd") + " " + Code + "  and cm_specialyn <> 'Y' and  rtrim(cm_email) = '' )a where row_num  " + pageCondition + strOrder;
                    dtClient = myLib.OpenDataTable(strsql, curCon);
                }

                else if (cmbField == "E" && cmbValue == "Bad")
                {
                    DataTable dt = null;
                    string sql = "select count(*) as IdCount from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name,cm_email from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccess("cm2_cd") + " and cm_specialyn <> 'Y'  and   (cm_email like 'notprovided%' or charindex('@',cm_email)=0 or charindex('.',cm_email)=0) and cm_email <>'')a ";
                    dt = myLib.OpenDataTable(sql);
                    HttpContext.Current.Session["clientpager"] = Math.Ceiling((double)(Convert.ToDecimal(dt.Rows[0]["IdCount"]) / 100));

                    strsql = "select cm_cd, cm_name,cm_email from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name,cm_email from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccess("cm2_cd") + " " + Code + " and cm_specialyn <> 'Y'  and   (cm_email like 'notprovided%' or charindex('@',cm_email)=0 or charindex('.',cm_email)=0) and cm_email <>'')a where row_num  " + pageCondition + strOrder;
                    dtClient = myLib.OpenDataTable(strsql, curCon);
                }
                if (cmbField == "M" && cmbValue == "Available")
                {
                    DataTable dt = null;
                    string sql = "select count(*) as IdCount from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750  and exists " + myutil.LoginAccess("cm2_cd") + " and cm_specialyn <> 'Y' and  rtrim(cm_Mobile)<>'' )a ";
                    dt = myLib.OpenDataTable(sql);
                    HttpContext.Current.Session["clientpager"] = Math.Ceiling((double)(Convert.ToDecimal(dt.Rows[0]["IdCount"]) / 100));


                    strsql = "select cm_cd, cm_name from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750  and exists " + myutil.LoginAccess("cm2_cd") + " " + Code + "  and cm_specialyn <> 'Y' and  rtrim(cm_Mobile)<>'' )a where row_num  " + pageCondition + strOrder;
                    dtClient = myLib.OpenDataTable(strsql, curCon);
                }
                else if (cmbField == "M" && cmbValue == "Not Available")
                {
                    DataTable dt = null;
                    string sql = "select count(*) as IdCount from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750  and  rtrim(cm_Mobile)='' )a ";
                    dt = myLib.OpenDataTable(sql);
                    HttpContext.Current.Session["clientpager"] = Math.Ceiling((double)(Convert.ToDecimal(dt.Rows[0]["IdCount"]) / 100));

                    strsql = "select cm_cd, cm_name from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750  and  rtrim(cm_Mobile)='' )a where row_num  " + pageCondition + strOrder;
                    dtClient = myLib.OpenDataTable(strsql, curCon);
                }
                //else if (cmbField == "M" && cmbValue == "Bad")
                //{
                //    strsql = "select cm_cd, cm_name,cm_mobile from (select ROW_NUMBER() over ( order by cm_name )  row_num,cm_cd, cm_name,cm_mobile from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750  and exists " + myutil.LoginAccess("cm2_cd") + " " + Code + " and cm_specialyn <> 'Y' and  cm_mobile <> '' )a where row_num  " + pageCondition + " order by  cm_cd ";
                //    dtClient = myLib.OpenDataTable(strsql, curCon);
                //}

                if (cmbField == "FS" && cmbValue == "Active")
                {
                    DataTable dt = null;
                    string sql = "select count(*) as IdCount from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccess("cm2_cd") + " and cm_specialyn <> 'Y' and  rtrim(cm_freezeyn)='N' )a ";
                    dt = myLib.OpenDataTable(sql);
                    HttpContext.Current.Session["clientpager"] = Math.Ceiling((double)(Convert.ToDecimal(dt.Rows[0]["IdCount"]) / 100));


                    strsql = "select cm_cd, cm_name from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccess("cm2_cd") + " " + Code + " and cm_specialyn <> 'Y' and  rtrim(cm_freezeyn)='N' )a where row_num  " + pageCondition + strOrder;
                    dtClient = myLib.OpenDataTable(strsql, curCon);
                }

                else if (cmbField == "FS" && cmbValue == "Freeze for Trades")
                {
                    DataTable dt = null;
                    string sql = "select count(*) as IdCount from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccess("cm2_cd") + " and cm_specialyn <> 'Y' and  rtrim(cm_freezeyn)='Y' )a ";
                    dt = myLib.OpenDataTable(sql);
                    HttpContext.Current.Session["clientpager"] = Math.Ceiling((double)(Convert.ToDecimal(dt.Rows[0]["IdCount"]) / 100));


                    strsql = "select cm_cd, cm_name from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccess("cm2_cd") + " " + Code + "and cm_specialyn <> 'Y' and  rtrim(cm_freezeyn)='Y' )a where row_num  " + pageCondition + strOrder;
                    dtClient = myLib.OpenDataTable(strsql, curCon);
                }

                else if (cmbField == "FS" && cmbValue == "Freeze for Branches")
                {
                    DataTable dt = null;
                    string sql = "select count(*) as IdCount from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccess("cm2_cd") + " and cm_specialyn <> 'Y' and  rtrim(cm_freezeyn)='B' )a ";
                    dt = myLib.OpenDataTable(sql);
                    HttpContext.Current.Session["clientpager"] = Math.Ceiling((double)(Convert.ToDecimal(dt.Rows[0]["IdCount"]) / 100));

                    strsql = "select cm_cd, cm_name from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccess("cm2_cd") + " " + Code + " and cm_specialyn <> 'Y' and  rtrim(cm_freezeyn)='B' )a where row_num  " + pageCondition + strOrder;
                    dtClient = myLib.OpenDataTable(strsql, curCon);
                }
                else if (cmbField == "FS" && cmbValue == "Freeze for All")
                {
                    DataTable dt = null;
                    string sql = "select count(*) as IdCount from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccess("cm2_cd") + " and cm_specialyn <> 'Y' and  rtrim(cm_freezeyn)='A' )a ";
                    dt = myLib.OpenDataTable(sql);
                    HttpContext.Current.Session["clientpager"] = Math.Ceiling((double)(Convert.ToDecimal(dt.Rows[0]["IdCount"]) / 100));

                    strsql = "select cm_cd, cm_name from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccess("cm2_cd") + " " + Code + " and cm_specialyn <> 'Y' and  rtrim(cm_freezeyn)='A' )a where row_num " + pageCondition + strOrder;
                    dtClient = myLib.OpenDataTable(strsql, curCon);
                }

                if (cmbField == "U" && cmbValue == "Available")
                {
                    DataTable dt = null;
                    string sql = "select count(*) as IdCount from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccess("cm2_cd") + "  and cm_specialyn <> 'Y' and  rtrim(cm_uid)<>'' )a";
                    dt = myLib.OpenDataTable(sql);
                    HttpContext.Current.Session["clientpager"] = Math.Ceiling((double)(Convert.ToDecimal(dt.Rows[0]["IdCount"]) / 100));

                    strsql = "select cm_cd, cm_name from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccess("cm2_cd") + " " + Code + "  and cm_specialyn <> 'Y' and  rtrim(cm_uid)<>'' )a where row_num " + pageCondition + strOrder;
                    dtClient = myLib.OpenDataTable(strsql, curCon);
                }

                if (cmbField == "NTS")
                {


                    string strnewdate = myutil.dtos(myutil.AddDayDT(myutil.dtos(date), -90).ToString());

                    DataTable dt = null;
                    string sql = " select count(*) as IdCount from(select ROW_NUMBER() over(" + strOrder + ")  row_num, cm_cd, cm_name from Client_master , CLient_Info  where cm_cd = cm2_cd and  cm_name like '%'  and cm_schedule = 49843750 and exists " + myutil.LoginAccess("cm2_cd") + "  and cm_cd not in (Select fb_clientcd from fbills, client_master where fb_clientcd = cm_cd and fb_billdt >= '" + strnewdate + "' Union Select bl_clientcd from bills, client_master where bl_clientcd = cm_cd and bl_billdt >= '" + strnewdate + "'))a";
                    dt = myLib.OpenDataTable(sql);
                    HttpContext.Current.Session["clientpager"] = Math.Ceiling((double)(Convert.ToDecimal(dt.Rows[0]["IdCount"]) / 100));

                    strsql = " select cm_cd, cm_name from(select ROW_NUMBER() over(" + strOrder + ")  row_num, cm_cd, cm_name from Client_master , CLient_Info  where cm_cd = cm2_cd and  cm_name like '%'  and cm_schedule = 49843750 and exists " + myutil.LoginAccess("cm2_cd") + "  and cm_cd not in (Select fb_clientcd from fbills, client_master where fb_clientcd = cm_cd and fb_billdt >= '" + strnewdate + "' Union Select bl_clientcd from bills, client_master where bl_clientcd = cm_cd and bl_billdt >= '" + strnewdate + "'))a where row_num " + pageCondition + strOrder;
                    dtClient = myLib.OpenDataTable(strsql, curCon);
                }
                else if (cmbField == "U" && cmbValue == "Not Available")
                {
                    DataTable dt = null;
                    string sql = "select count(*) as IdCount from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccess("cm2_cd") + " and cm_specialyn <> 'Y' and  rtrim(cm_uid)='' )a ";
                    dt = myLib.OpenDataTable(sql);
                    HttpContext.Current.Session["clientpager"] = Math.Ceiling((double)(Convert.ToDecimal(dt.Rows[0]["IdCount"]) / 100));


                    strsql = "select cm_cd, cm_name from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750  and exists " + myutil.LoginAccess("cm2_cd") + " " + Code + "  and cm_specialyn <> 'Y' and  rtrim(cm_uid)='' )a where row_num " + pageCondition + strOrder;
                    dtClient = myLib.OpenDataTable(strsql, curCon);
                }



                else if (cmbField == "M" && cmbValue == "Bad")
                {
                    strsql = "select cm_cd, cm_name,cm_mobile from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name,cm_mobile from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750  and exists " + myutil.LoginAccess("cm2_cd") + " " + Code + " and cm_specialyn <> 'Y' and  cm_mobile <> '' )a where row_num  " + pageCondition + strOrder;
                    dtClient = myLib.OpenDataTable(strsql, curCon);

                    string pattern = @"^[789]\d{9}$";
                    RegexOptions options = RegexOptions.Compiled | RegexOptions.Singleline | RegexOptions.IgnoreCase;
                    Regex regex = new Regex(pattern, options);
                    DataTable newdt = new DataTable();
                    ArrayList al = new ArrayList();
                    foreach (DataRow row in dtClient.Select())
                    {
                        if (regex.Match(row["cm_mobile"].ToString().Trim()).Success == false)
                        {
                            al.Add(row);
                            DataRow[] results = (DataRow[])al.ToArray(typeof(DataRow));
                            newdt = results.CopyToDataTable();

                        }

                    }

                    dtClient = newdt;
                    HttpContext.Current.Session["clientpager"] = "1";
                }

                return dtClient;
            }
        }

        public DataTable GetComClientDetails(string Code, string cmbField, string cmbValue, string date, string pageCondition, string cmbSort)
        {

            DataTable dtClient = new DataTable();
            string strspFltr = "";
            string strClient;
            string strsql = "";
            string chrSpecialClient = "";
            string strOrder = "";
            LibraryModel myLib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            UtilityDBModel mydbutil = new UtilityDBModel();


            if (Code != "")
            {
                Code = " and cm_cd = '" + Code + "'";
            }

            if (cmbSort == "C")
            {
                strOrder = " order by  cm_cd ";
            }
            else if (cmbSort == "N")
            {
                strOrder = " order by  cm_name ";
            }

            SqlConnection SQLConnComex = mydbutil.commexTemp_conn("Commex");


            if (cmbField == "N" && cmbValue == "None")
            {
                DataTable dt = null;
                string sql = " select count(*) as IdCount from client_master,client_info where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 " + HttpContext.Current.Session["LoginAccessOld"] + "  and cm_specialyn <> 'Y' ";
                dt = myLib.OpenDataTable(sql, SQLConnComex);
                HttpContext.Current.Session["clientpager"] = Math.Ceiling((double)(Convert.ToDecimal(dt.Rows[0]["IdCount"]) / 100));

                strsql = "select cm_cd, cm_name from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccessCommex("cm2_cd") + " " + Code + " and cm_specialyn <> 'Y' )a where row_num " + pageCondition + strOrder;
            }
            if (cmbField == "E" && cmbValue == "Available")
            {
                DataTable dt = null;
                string sql = " select count(*) as IdCount from client_master,client_info where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 " + HttpContext.Current.Session["LoginAccessOld"] + "  and cm_specialyn <> 'Y' and rtrim(cm_email) <> '' ";
                dt = myLib.OpenDataTable(sql, SQLConnComex);
                HttpContext.Current.Session["clientpager"] = Math.Ceiling((double)(Convert.ToDecimal(dt.Rows[0]["IdCount"]) / 100));

                strsql = "select cm_cd, cm_name from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccessCommex("cm2_cd") + " " + Code + " and cm_specialyn <> 'Y' and rtrim(cm_email) <> '' )a where row_num " + pageCondition + strOrder;
            }

            else if (cmbField == "E" && cmbValue == "Not Available")
            {
                DataTable dt = null;
                string sql = "select count(*) as IdCount from (select ROW_NUMBER() over(" + strOrder + ")  row_num, cm_cd, cm_name from Client_master , CLient_Info  where cm_cd = cm2_cd and  cm_cd like '%'  and cm_schedule = 49843750 and exists " + myutil.LoginAccessCommex("cm2_cd") + " and cm_specialyn <> 'Y' and  rtrim(cm_email) = '' )a ";
                dt = myLib.OpenDataTable(sql, SQLConnComex);
                HttpContext.Current.Session["clientpager"] = Math.Ceiling((double)(Convert.ToDecimal(dt.Rows[0]["IdCount"]) / 100));

                strsql = "select cm_cd, cm_name from (select ROW_NUMBER() over(" + strOrder + ")  row_num, cm_cd, cm_name from Client_master , CLient_Info  where cm_cd = cm2_cd and  cm_cd like '%'  and cm_schedule = 49843750 and exists " + myutil.LoginAccessCommex("cm2_cd") + " " + Code + "  and cm_specialyn <> 'Y' and  rtrim(cm_email) = '' )a where row_num " + pageCondition + strOrder;

            }

            else if (cmbField == "E" && cmbValue == "Bad")
            {
                DataTable dt = null;
                string sql = "select count(*) as IdCount from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name,cm_email from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccessCommex("cm2_cd") + " and cm_specialyn <> 'Y'  and   (cm_email like 'notprovided%' or charindex('@',cm_email)=0 or charindex('.',cm_email)=0) and cm_email <>'')a ";
                dt = myLib.OpenDataTable(sql, SQLConnComex);
                HttpContext.Current.Session["clientpager"] = Math.Ceiling((double)(Convert.ToDecimal(dt.Rows[0]["IdCount"]) / 100));

                strsql = "select cm_cd, cm_name from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccessCommex("cm2_cd") + " " + Code + " and cm_specialyn <> 'Y' and  (charindex('@',cm_email)=0 or charindex('.',cm_email)=0) and cm_email <>'')a where row_num " + pageCondition + strOrder;
            }
            if (cmbField == "M" && cmbValue == "Available")
            {
                DataTable dt = null;
                string sql = "select count(*) as IdCount from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750  and exists " + myutil.LoginAccessCommex("cm2_cd") + " and cm_specialyn <> 'Y' and  rtrim(cm_Mobile)<>'' )a ";
                dt = myLib.OpenDataTable(sql, SQLConnComex);
                HttpContext.Current.Session["clientpager"] = Math.Ceiling((double)(Convert.ToDecimal(dt.Rows[0]["IdCount"]) / 100));

                strsql = "select cm_cd, cm_name from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750  and exists " + myutil.LoginAccessCommex("cm2_cd") + " " + Code + "  and cm_specialyn <> 'Y' and  rtrim(cm_Mobile)<>'' )a where row_num " + pageCondition + strOrder;
            }
            else if (cmbField == "M" && cmbValue == "Not Available")
            {
                DataTable dt = null;
                string sql = "select count(*) as IdCount from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750  and  rtrim(cm_Mobile)='' )a ";
                dt = myLib.OpenDataTable(sql, SQLConnComex);
                HttpContext.Current.Session["clientpager"] = Math.Ceiling((double)(Convert.ToDecimal(dt.Rows[0]["IdCount"]) / 100));

                strsql = "select cm_cd, cm_name from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccessCommex("cm2_cd") + " " + Code + "  and cm_specialyn <> 'Y' and  rtrim(cm_Mobile)='' )a where row_num " + pageCondition + strOrder;
            }
            else if (cmbField == "M" && cmbValue == "Bad")
            {
                //strsql = "select cm_cd, cm_name from (select ROW_NUMBER() over ( order by cm_name )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccessCommex("cm2_cd") + " " + Code + " and cm_specialyn <> 'Y' and  isnull(case when left(cm_mobile,1) = '0' then case when len(cm_mobile) <> 11 then LTrim (RTrim(cm_mobile)) Else '0' End  Else  case when left(cm_mobile,1) = '9' then  case when len(cm_mobile) <> 10 then  LTrim(RTrim(cm_mobile)) Else '0' End  End End,'0') <> '0')a where row_num between 1 and 100 order by  cm_name ";
                strsql = "select cm_cd, cm_name,cm_mobile from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name,cm_mobile from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750  and exists " + myutil.LoginAccess("cm2_cd") + " " + Code + " and cm_specialyn <> 'Y' and  cm_mobile <> '' )a where row_num  " + pageCondition + strOrder;
                dtClient = myLib.OpenDataTable(strsql, SQLConnComex);

                string pattern = @"^[789]\d{9}$";
                RegexOptions options = RegexOptions.Compiled | RegexOptions.Singleline | RegexOptions.IgnoreCase;
                Regex regex = new Regex(pattern, options);
                DataTable newdt = new DataTable();
                ArrayList al = new ArrayList();
                foreach (DataRow row in dtClient.Select())
                {
                    if (regex.Match(row["cm_mobile"].ToString().Trim()).Success == false)
                    {
                        al.Add(row);
                        DataRow[] results = (DataRow[])al.ToArray(typeof(DataRow));
                        newdt = results.CopyToDataTable();

                    }

                }

                dtClient = newdt;
                HttpContext.Current.Session["clientpager"] = "1";
                return dtClient;
            }

            if (cmbField == "FS" && cmbValue == "Active")
            {
                DataTable dt = null;
                string sql = "select count(*) as IdCount from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccessCommex("cm2_cd") + " and cm_specialyn <> 'Y' and  rtrim(cm_freezeyn)='N' )a ";
                dt = myLib.OpenDataTable(sql, SQLConnComex);
                HttpContext.Current.Session["clientpager"] = Math.Ceiling((double)(Convert.ToDecimal(dt.Rows[0]["IdCount"]) / 100));

                strsql = "select cm_cd, cm_name from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccessCommex("cm2_cd") + " " + Code + " and cm_specialyn <> 'Y' and  rtrim(cm_freezeyn)='N' )a where row_num " + pageCondition + strOrder;
            }

            else if (cmbField == "FS" && cmbValue == "Freeze for Trades")
            {
                DataTable dt = null;
                string sql = "select count(*) as IdCount from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccessCommex("cm2_cd") + " and cm_specialyn <> 'Y' and  rtrim(cm_freezeyn)='Y' )a ";
                dt = myLib.OpenDataTable(sql, SQLConnComex);
                HttpContext.Current.Session["clientpager"] = Math.Ceiling((double)(Convert.ToDecimal(dt.Rows[0]["IdCount"]) / 100));

                strsql = "select cm_cd, cm_name from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccessCommex("cm2_cd") + " " + Code + "and cm_specialyn <> 'Y' and  rtrim(cm_freezeyn)='Y' )a where row_num " + pageCondition + strOrder;
            }

            else if (cmbField == "FS" && cmbValue == "Freeze for Branches")
            {
                DataTable dt = null;
                string sql = "select count(*) as IdCount from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccessCommex("cm2_cd") + " and cm_specialyn <> 'Y' and  rtrim(cm_freezeyn)='B' )a ";
                dt = myLib.OpenDataTable(sql, SQLConnComex);
                HttpContext.Current.Session["clientpager"] = Math.Ceiling((double)(Convert.ToDecimal(dt.Rows[0]["IdCount"]) / 100));

                strsql = "select cm_cd, cm_name from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccessCommex("cm2_cd") + " " + Code + " and cm_specialyn <> 'Y' and  rtrim(cm_freezeyn)='B' )a where row_num " + pageCondition + strOrder;

            }
            else if (cmbField == "FS" && cmbValue == "Freeze for All")
            {
                DataTable dt = null;
                string sql = "select count(*) as IdCount from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccessCommex("cm2_cd") + " and cm_specialyn <> 'Y' and  rtrim(cm_freezeyn)='A' )a ";
                dt = myLib.OpenDataTable(sql, SQLConnComex);
                HttpContext.Current.Session["clientpager"] = Math.Ceiling((double)(Convert.ToDecimal(dt.Rows[0]["IdCount"]) / 100));

                strsql = "select cm_cd, cm_name from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,CLient_Info  where cm_cd=cm2_cd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccessCommex("cm2_cd") + " " + Code + " and cm_specialyn <> 'Y' and  rtrim(cm_freezeyn)='A' )a where row_num " + pageCondition + strOrder;
            }

            if (cmbField == "U" && cmbValue == "Available")
            {
                DataTable dt = null;
                string sql = "select count(*) as IdCount from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,Client_KYC  where cm_cd=ck_cmcd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccessCommex("ck_cmcd") + "  and cm_specialyn <> 'Y' and  rtrim(ck_uid)<>'' )a";
                dt = myLib.OpenDataTable(sql, SQLConnComex);
                HttpContext.Current.Session["clientpager"] = Math.Ceiling((double)(Convert.ToDecimal(dt.Rows[0]["IdCount"]) / 100));

                strsql = "select cm_cd, cm_name from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,Client_KYC  where cm_cd=ck_cmcd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccessCommex("ck_cmcd") + " " + Code + "  and cm_specialyn <> 'Y' and  rtrim(ck_uid)<>'' )a where row_num " + pageCondition + strOrder;
            }
            else if (cmbField == "U" && cmbValue == "Not Available")
            {
                DataTable dt = null;
                string sql = "select count(*) as IdCount from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,Client_KYC  where cm_cd=ck_cmcd and  cm_name like '%'  and cm_schedule=49843750 and exists " + myutil.LoginAccessCommex("ck_cmcd") + " and cm_specialyn <> 'Y' and  rtrim(ck_uid)='' )a ";
                dt = myLib.OpenDataTable(sql, SQLConnComex);
                HttpContext.Current.Session["clientpager"] = Math.Ceiling((double)(Convert.ToDecimal(dt.Rows[0]["IdCount"]) / 100));

                strsql = "select cm_cd, cm_name from (select ROW_NUMBER() over ( " + strOrder + " )  row_num,cm_cd, cm_name from Client_master ,Client_KYC  where cm_cd=ck_cmcd and  cm_name like '%'  and cm_schedule=49843750  and exists " + myutil.LoginAccessCommex("ck_cmcd") + " " + Code + "  and cm_specialyn <> 'Y' and  rtrim(ck_uid)='' )a where row_num " + pageCondition + strOrder;
            }
            if (cmbField == "NTS")
            {
                string strnewdate = myutil.dtos(myutil.AddDayDT(myutil.dtos(date), -90).ToString());

                DataTable dt = null;
                string sql = " select count(*) as IdCount from(select ROW_NUMBER() over(" + strOrder + ")  row_num, cm_cd, cm_name from Client_master , CLient_Info  where cm_cd = cm2_cd and  cm_name like '%'  and cm_schedule = 49843750 and exists " + myutil.LoginAccessCommex("cm2_cd") + "  and cm_cd not in (Select fb_clientcd from fbills, client_master where fb_clientcd = cm_cd and fb_billdt >= '" + strnewdate + "' Union Select bl_clientcd from bills, client_master where bl_clientcd = cm_cd and bl_billdt >= '" + strnewdate + "'))a";
                dt = myLib.OpenDataTable(sql, SQLConnComex);
                HttpContext.Current.Session["clientpager"] = Math.Ceiling((double)(Convert.ToDecimal(dt.Rows[0]["IdCount"]) / 100));

                strsql = " select cm_cd, cm_name from(select ROW_NUMBER() over(" + strOrder + ")  row_num, cm_cd, cm_name from Client_master , CLient_Info  where cm_cd = cm2_cd and  cm_name like '%'  and cm_schedule = 49843750 and exists " + myutil.LoginAccessCommex("cm2_cd") + " " + Code + " and cm_specialyn <> 'Y'  and cm_cd not in (Select fb_clientcd from fbills, client_master where fb_clientcd = cm_cd and fb_billdt >= '" + strnewdate + "' Union Select bl_clientcd from bills, client_master where bl_clientcd = cm_cd and bl_billdt >= '" + strnewdate + "'))a where row_num " + pageCondition + strOrder;

            }


            dtClient = myLib.OpenDataTable(strsql, SQLConnComex);
            return dtClient;


        }


        public DataTable GetBrokScheme(string Code, string strApp = "")
        {
            //string strApp = "";
            string strsql = "";
            LibraryModel myLib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            UtilityDBModel mydbutil = new UtilityDBModel();
            DataTable dt = new DataTable();

            if (strApp == "C")
            {
                strsql = "select left(ces_cd,2)+'X' as ces_cd, rtrim(ces_name)+' / '+rtrim(ces_Exchange)+' / '+rtrim(ces_Segment), ce_brkscheme";
                strsql = strsql + " from client_details , CompanyExchangeSegments where CES_CompanyCd = '" + HttpContext.Current.Session["CompanyCode"] + "' and  ce_companycode=ces_cd and ce_clientcd='" + Code + "'";
                strsql = strsql + " order by ces_companycd, ces_segment,  ces_exchange ";
                SqlConnection SQLConnComex = mydbutil.commexTemp_conn("Commex");
                dt = myLib.OpenDataTable(strsql, SQLConnComex);
            }
            else
            {
                strsql = "select ces_cd, rtrim(ces_name)+' / '+rtrim(ces_Exchange)+' / '+rtrim(ces_Segment), ce_brkscheme";
                strsql = strsql + " from client_details , CompanyExchangeSegments where CES_CompanyCd = '" + HttpContext.Current.Session["CompanyCode"] + "' and  ce_companycode=ces_cd and ce_clientcd='" + Code + "'";
                strsql = strsql + " order by ces_companycd, ces_segment,  ces_exchange ";

                dt = myLib.OpenDataTable(strsql);
            }

            return dt;
        }

        public DataTable Brkschemecash(string ces, string brkscheme)
        {
            string strsql = "";
            LibraryModel myLib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            string msg = "";
            DataTable dt = new DataTable();
            try
            {
                strsql = "select sy_desc 'Settlement Type', case br_type when 'SD1' then ' Same Day 1st Side' ";
                strsql = strsql + " when 'SD2' then ' Same day 2nd Side' when 'DLV' then 'Delivery' else '?' end 'Brokerage Type',";
                strsql = strsql + " convert(decimal (15,0),br_upto) br_upto,convert(decimal (15,4),br_min) br_min,convert(decimal (15,4),br_percent) br_percent,convert(decimal (15,4),br_fixed) br_fixed,convert(decimal (15,4),br_max) br_max,convert(decimal (15,4),br_minpercontract) br_minpercontract  from brokerages , settlement_type ";
                strsql = strsql + " where sy_maptype=br_settgroup and sy_exchange=substring(br_companycode,2,1) and br_scheme='" + brkscheme + "'";
                strsql = strsql + " and br_companycode='" + ces + "'";
                strsql = strsql + " order by sy_maptype desc, [Brokerage Type] , br_upto";
                dt = myLib.OpenDataTable(strsql);
                HttpContext.Current.Session["dtbrks2cash"] = dt;
                if (dt.Rows.Count <= 0)

                {
                    msg = "no records found";
                }
                else
                {
                    strsql = "select top 1 Case isNull(br_sdremove,'N') When 'B' then 'Buy Trades'";
                    strsql = strsql + " When 'S' then 'Sell Trades' When 'L' then 'Lower Quantity' ";
                    strsql = strsql + " When 'R' then 'Rate Based' else 'No Reduced Brokerage' end br_sdremove ,  ";
                    strsql = strsql + " Case isNull(br_ssremove,'N') When 'B' then 'Buy Trades'  ";
                    strsql = strsql + " When 'S' then 'Sell Trades' When 'L' then 'Lower Quantity'  ";
                    strsql = strsql + " When 'R' then 'Rate Based' else 'No Reduced Brokerage' end br_ssremove ,br_minsqroffqty,  ";
                    strsql = strsql + " Case isNull(br_delvbrk,'N') When 'C' then 'Change Trade Rate' When 'D' then 'Debit As Charge' When 'S' then 'Scripwise Charge Debit' else 'No Delivery Brokerage' end br_delvbrk ,  ";
                    strsql = strsql + " convert(decimal (15,4),br_roffnearest) br_roffnearest, Case isNull(br_roffadvantage,'N') When 'C' then 'Client' When 'B' then 'Broker' else 'Normal' end br_roffadvantage  ";
                    strsql = strsql + " From Brokerages  ";
                    strsql = strsql + " where br_companycode = '" + ces + "' and br_scheme = '" + brkscheme + "'  ";
                    dt = myLib.OpenDataTable(strsql);
                    HttpContext.Current.Session["dtbrks1cash"] = dt;
                }

            }
            catch (Exception ex)
            {

            }
            return dt;

        }
        public DataTable BrkschemeFO(string ces, string brkscheme)
        {
            string strApp = "";
            string strsql = "";
            LibraryModel myLib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();
            UtilityDBModel mydbutil = new UtilityDBModel();
            string msg = "";
            string max1, max2, max3;
            string perlot1, perlot2, perlot3;
            SqlConnection SQLConnComex = mydbutil.commexTemp_conn("Commex");
            DataTable dt = new DataTable();
            try
            {

                if (Strings.Right(ces.Trim(), 1) == "X")
                {
                    strsql = " select case isnull( fb_sdremove,'N')when 'B' then 'Buy Trades' when 'S'then 'Sell Trades' when 'L' then 'Lower Quantity' ";
                    strsql = strsql + " when 'R' then 'Rate Based'  else 'No reduced Brokerage' end fb_sdremove, ";
                    strsql = strsql + " case isnull (fb_adremove,'N') when 'B' then 'Buy Trades' when 'S' then 'Sell Trades' when 'L' then 'Lower Quantity' ";
                    strsql = strsql + " when 'R' then 'Rate Based' else 'No reduced Brokerage' end fb_adremove, ";
                    strsql = strsql + " fb_roffnearest, ";
                    strsql = strsql + " case isnull(fb_roundoffadvantage,'N') when 'C' then 'Client' when 'B' then 'Broker' else 'Normal' end fb_roundoffadvantage,fb_minpercontract ";
                    strsql = strsql + " from FBrokerage_master where fb_companycode='" + Strings.Left(ces, 2) + "F' and fb_scheme='" + brkscheme + "' ";
                    if (SQLConnComex != null)
                    {
                        dt = myLib.OpenDataTable(strsql, SQLConnComex);

                    }

                    HttpContext.Current.Session["dtbrks1FO"] = dt;

                }
                else
                {
                    strsql = " select case isnull( fb_sdremove,'N')when 'B' then 'Buy Trades' when 'S'then 'Sell Trades' when 'L' then 'Lower Quantity' ";
                    strsql = strsql + " when 'R' then 'Rate Based'  else 'No reduced Brokerage' end fb_sdremove, ";
                    strsql = strsql + " case isnull (fb_adremove,'N') when 'B' then 'Buy Trades' when 'S' then 'Sell Trades' when 'L' then 'Lower Quantity' ";
                    strsql = strsql + " when 'R' then 'Rate Based' else 'No reduced Brokerage' end fb_adremove, ";
                    strsql = strsql + " fb_roffnearest,convert(decimal(15,0),fb_minpercontract) fb_minpercontract,convert (decimal (15,0),fb_minpercontractopt) fb_minpercontractopt,case isnull(fb_minPerLotSquarOff,'N') when 'Y' then 'Sameday & Anyday Sqroff' when 'S' then 'Sameday Sqroff' ";
                    strsql = strsql + " when 'A' then 'Anyday Sqroff' else 'None' end fb_minPerLotSquarOff, ";
                    strsql = strsql + " case isnull(fb_roundoffadvantage,'N') when 'C' then 'Client' when 'B' then 'Broker' else 'Normal' end fb_roundoffadvantage ";
                    strsql = strsql + " from FBrokerage_master where fb_companycode='" + ces + "' and fb_scheme='" + brkscheme + "' ";
                    dt = myLib.OpenDataTable(strsql);
                    HttpContext.Current.Session["dtbrks1FO"] = dt;
                }




                if (dt.Rows.Count <= 0)

                {
                    msg = "no records found";
                }

                else
                {
                    if (Strings.Right(ces.Trim(), 1) == "X")
                    {
                        strApp = "C";
                        strsql = " select bt_brokdesc ,convert (decimal(15,0),br_upto) br_upto,convert (decimal(15,4),br_min1) br_min1,convert (decimal(15,4),br_percent1) br_percent1, ";
                        strsql = strsql + " convert (decimal(15,4),br_max1)br_max1, convert (decimal(15,4),br_min2) br_min2,convert (decimal(15,4),br_percent2) br_percent2, ";
                        strsql = strsql + " convert (decimal(15,4),br_max2)br_max2,convert (decimal(15,4),br_min3) br_min3,convert (decimal(15,4),br_percent3) br_percent3, ";
                        strsql = strsql + " convert (decimal(15,4),br_max3)br_max3,br_brokgroup, ";
                        strsql = strsql + " convert (decimal(15,2),0) br_perlot1 ,convert (decimal(15,2),0) br_perlot2 ,convert (decimal(15,2),0) br_perlot3 ";
                        strsql = strsql + " from fbrokerages a, fbrokerage_types ";
                        strsql = strsql + " where br_companycode='" + Strings.Left((ces.Trim()), 2) + "F' and br_scheme='" + brkscheme + "'";
                        strsql = strsql + " and bt_brokgroup=br_brokgroup order by bt_order, br_brokgroup, br_upto";
                        if (SQLConnComex != null)
                        {
                            dt = myLib.OpenDataTable(strsql, SQLConnComex);

                        }
                        HttpContext.Current.Session["dtbrks2FO"] = dt;
                    }

                    else
                    {
                        strsql = " select bt_brokdesc ,convert (decimal(15,0),br_upto) br_upto,convert (decimal(15,4),br_min1) br_min1,convert (decimal(15,4),br_percent1) br_percent1, ";
                        strsql = strsql + " convert (decimal(15,4),br_max1)br_max1, convert (decimal(15,4),br_min2) br_min2,convert (decimal(15,4),br_percent2) br_percent2, ";
                        strsql = strsql + " convert (decimal(15,4),br_max2)br_max2,convert (decimal(15,4),br_min3) br_min3,convert (decimal(15,4),br_percent3) br_percent3, ";
                        strsql = strsql + " convert (decimal(15,4),br_max3)br_max3,br_brokgroup, ";
                        strsql = strsql + " convert (decimal(15,2),br_perlot1) br_perlot1 ,convert (decimal(15,2),br_perlot2) br_perlot2 ,convert (decimal(15,2),br_perlot3) br_perlot3 ";
                        strsql = strsql + " from fbrokerages a, fbrokerage_types ";
                        strsql = strsql + " where br_companycode='" + ces + "' and br_scheme='" + brkscheme + "'";
                        strsql = strsql + " and bt_brokgroup=br_brokgroup order by bt_order, br_brokgroup, br_upto";
                        dt = myLib.OpenDataTable(strsql);
                        HttpContext.Current.Session["dtbrks2FO"] = dt;




                    }
                    //'------------------- Product Brokerage--------------------------
                    DataTable dtproduct = new DataTable();

                    if (Strings.Right(ces.Trim(), 1) == "X")
                    {
                        strApp = "C";
                        strsql = "if (select count(*) from sysobjects where name='Product_brokerages')>0 ";
                        strsql = strsql + "select pb_Product Product,bt_brokdesc Descpn,pb_fixed1 fixed1,pb_fixed2 fixed2 ,pb_fixed3 fixed3 ,pb_fixed4 fixed4,";
                        strsql = strsql + " pb_fixedPerc1 Perc1, pb_fixedPerc2 Perc2,pb_fixedPerc3 Perc3,pb_fixedPerc4 Perc4";
                        strsql = strsql + " from Product_brokerages,fbrokerage_types ";
                        strsql = strsql + " where bt_brokgroup = pb_brokgroup ";
                        strsql = strsql + " and pb_company_code='" + ces + "F' ";
                        strsql = strsql + " and pb_scheme='" + brkscheme.Trim() + "' else select * from group_master where 1=2";
                        dtproduct = myLib.OpenDataTable(strsql, SQLConnComex);
                        HttpContext.Current.Session["dtbrks3FO"] = dtproduct;
                    }
                    else
                    {
                        strApp = "";
                        strsql = "if (select count(*) from sysobjects where name='Product_brokerages')>0 ";
                        strsql = strsql + "select pb_Product Product,case pb_brokgroup When 'F' Then'Futures' else 'Options' end Descpn ,pb_fixed1 fixed1,pb_fixed2 fixed2,";
                        strsql = strsql + " pb_fixed3 fixed3,pb_Per1 Perc1,pb_Per2 Perc2,pb_Per3 Perc3, '' fixed4,'' Perc4";
                        strsql = strsql + " from Product_brokerages where";
                        strsql = strsql + " pb_company_code='" + ces + "'";
                        strsql = strsql + " and pb_scheme='" + brkscheme.Trim() + "' else select * from group_master where 1=2";
                        dtproduct = myLib.OpenDataTable(strsql);
                        HttpContext.Current.Session["dtbrks3FO"] = dtproduct;
                    }



                    dt.Columns.Add("Groupby", typeof(String));
                    for (int j = 0; j < dt.Rows.Count; j++)
                    {
                        string strReturn = "";
                        string str = "";
                        string str1 = "";
                        string str2 = "";
                        int i;
                        i = dt.Rows[j]["br_brokgroup"].ToString().Length;
                        str1 = Strings.Mid(dt.Rows[j]["br_brokgroup"].ToString(), i, 1);
                        if ((str1 ?? "") == "B" | (str1 ?? "") == "S")
                        {
                            dt.Rows[j]["Groupby"] = "Trading";
                        }
                        else if ((str1 ?? "") == "A")
                        {
                            dt.Rows[j]["Groupby"] = "Assignment";
                        }
                        else if ((str1 ?? "") == "E")
                        {
                            dt.Rows[j]["Groupby"] = "Exercise";
                        }


                    }

                }


            }
            catch (Exception ex)
            {

            }
            return (dt);

        }
        public DataTable GetECommissionRep(string Select, string cmbGroupBy, string Code, string FromDate, string ToDate, string strDPID = "", string ClientType = "")
        {
            string StrGroup1 = "";
            string strGroup2 = "";
            string strTable = "";
            string strTable1 = "";
            string strsqlComm = "";
            string strwhere1 = "";
            string strGroupBy = "";
            string strSql = "";
            string strWhere = "";
            string strExchCash = "";
            string strGrpBy = "";
            string strOrderBy = "";
            string ConnComex = null;
            int i = 0;
            string strwhere = "";
            string strCommexDB = "";
            DataTable dtSum = null;
            LibraryModel mylib = new LibraryModel(true);
            UtilityModel myutil = new UtilityModel();
            UtilityDBModel mydbutil = new UtilityDBModel();

            SqlConnection SQLConnComex = mydbutil.commexTemp_conn("Commex");

            string ExCommex = "";
            string Exchng = "";
            string[] strArray = strDPID.Split(',');
            bool first = true;
            foreach (string obj in strArray)
            {
                if (obj.Length >= 2)
                {
                    if (first)
                    {
                        Exchng = obj;
                        first = false;
                    }
                    else
                    {
                        Exchng = obj + "," + Exchng;
                    }
                }

                //your insert query
            }
            bool Cofirst = true;
            foreach (string obj in strArray)
            {
                if ((string)HttpContext.Current.Session["IsTplusCommex"] == "Y")
                {
                    if (obj.Substring(1, 1) == "X")
                    {
                        if (Cofirst)
                        {
                            ExCommex = obj;
                            Cofirst = false;
                        }
                        else
                        {
                            ExCommex = obj + "," + ExCommex;
                        }
                    }
                }
                else
                {
                    if (obj.Length < 2)
                    {
                        if (Cofirst)
                        {
                            ExCommex = obj;
                            Cofirst = false;
                        }
                        else
                        {
                            ExCommex = obj + "," + ExCommex;
                        }
                    }

                }

                //your insert query
            }




            using (SqlConnection curCon = new SqlConnection(connectionstring))
            {
                curCon.Open();
                try
                {
                    mylib.ExecSQL("Drop Table #TmpPerformance", curCon);
                }
                catch (Exception)
                {

                }
                finally
                {
                    //------------------------------Start create Tempdates11 table------------------------------------


                    strSQL = " Create Table #TmpPerformance  ( ";
                    strSQL += " tmpcode varchar(60) not null, ";
                    strSQL += " tmpclientcd varchar(8) not null, ";
                    strSQL += " tmpname varchar(50) not null, ";
                    strSQL += " tmpCD varchar(10) not null, ";
                    strSQL += " tmpNM varchar(50) not null, ";
                    strSQL += " tmpExchange varchar(10) not null, ";
                    strSQL += " tmpSegment varchar(10) not null, ";
                    strSQL += " tmpBrkg numeric(26) not null, ";
                    strSQL += " tmpShare1 numeric(26) not null)";
                    mylib.ExecSQL(strSQL, curCon);

                    //------------------------------Start create Condition table------------------------------------

                    var switchExpr = Strings.Left(ClientType.Trim().ToUpper(), 2);
                    switch (switchExpr)
                    {
                        case "CL":
                            {
                                StrGroup1 = "rs_clientcd Code, rs_clientcd , cm_name  ";
                                break;
                            }

                        case "GR":
                            {
                                StrGroup1 = "rtrim(gr_desc)+' ['+cm_groupcd+']' Code,cm_groupcd rs_clientcd , gr_desc cm_name ";
                                break;
                            }

                        case "FA":
                            {
                                StrGroup1 = "rtrim(fm_desc)+' ['+cm_familycd+']' Code ,cm_familycd rs_clientcd , fm_desc cm_name ";
                                break;
                            }

                        case "SU":
                            {
                                StrGroup1 = "rtrim(sb.rm_name)+' ['+cm_subbroker+']' Code ,cm_subbroker rs_clientcd , sb.rm_name cm_name  ";
                                break;
                            }

                        case "BR":
                            {
                                StrGroup1 = "rtrim(bm_branchname)+' ['+cm_brboffcode+']' Code,cm_brboffcode rs_clientcd , bm_branchname cm_name ";
                                break;
                            }

                        case "RM":
                            {
                                StrGroup1 = "isnull(rtrim(rm.rm_name),'')+' ['+cm_dpactno +']' Code,cm_dpactno rs_clientcd , rm.rm_name cm_name ";
                                break;
                            }
                    }




                    //------------------------------End create Condition table------------------------------------




                    //------------------------------First Insert Start------------------------------------
                    var switchExpr1 = Strings.Left(cmbGroupBy.Trim().ToUpper(), 2);
                    switch (switchExpr1)
                    {
                        case "NO":
                            {
                                strGroup2 = ",'' cd, '' names";
                                break;
                            }

                        case "CL":
                            {
                                strGroup2 = " , rs_clientcd cd, cm_name names";
                                strGrpBy = " , rs_clientcd , cm_name ";
                                strOrderBy = "  cm_name, ";
                                break;
                            }

                        case "GR":
                            {
                                strGroup2 = " ,cm_groupcd cd, gr_desc names ";
                                strTable1 = " ,Group_master";
                                strwhere1 = " and cm_groupcd=gr_cd ";
                                strGrpBy = " ,cm_groupcd , gr_desc ";
                                strOrderBy = "  gr_desc, ";
                                break;
                            }

                        case "FA":
                            {
                                strGroup2 = "  ,cm_familycd cd, fm_desc names ";
                                strTable1 = " ,Family_master ";
                                strwhere1 = " and cm_familycd=fm_cd ";
                                strGrpBy = "  ,cm_familycd , fm_desc ";
                                strOrderBy = " fm_desc, ";
                                break;
                            }

                        case "RE":
                            {
                                strGroup2 = "  ,cm_subbroker cd,sb.rm_name names ";
                                strTable1 = " ,subbrokers sb ";
                                strwhere1 = " and cm_subbroker=sb.rm_Cd ";
                                strGrpBy = "  ,cm_subbroker , sb.rm_name ";
                                strOrderBy = " sb.rm_name, ";
                                break;
                            }

                        case "BR":
                            {
                                strGroup2 = "  ,cm_brboffcode cd, bm_branchname names ";
                                strTable1 = " ,branch_master ";
                                strwhere1 = " and cm_brboffcode=bm_branchcd  ";
                                strGrpBy = "  ,cm_brboffcode , bm_branchname ";
                                strOrderBy = " bm_branchname, ";
                                break;
                            }

                        case "RM":
                            {
                                strGroup2 = " ,cm_dpactno cd, rm.rm_name names ";
                                strTable1 = " ,RM_master rm ";
                                strwhere1 = " and rtrim(cm_dpactno)=rm.rm_cd ";
                                strGrpBy = " ,cm_dpactno , rm.rm_name ";
                                strOrderBy = " rm.rm_name, ";
                                break;
                            }

                    }
                    if ((Strings.Left(ClientType.ToString().ToUpper(), 1)) == "C") // Client
                    {
                        strGroupBy = "  rs_clientcd , cm_name  ";
                    }
                    else if ((Strings.Left(ClientType.ToString().ToUpper(), 1)) == "G") // Group
                    {
                        strTable = " ,group_master ";
                        strWhere = " and cm_groupcd=gr_cd ";
                        strGroupBy = "  cm_groupcd, gr_desc ";
                    }
                    else if ((Strings.Left(ClientType.ToString().ToUpper(), 1)) == "F") // Family
                    {
                        strTable = " ,family_master ";
                        strWhere = " and cm_familycd=fm_cd ";
                        strGroupBy = "  cm_familycd, fm_desc ";
                    }
                    else if ((Strings.Left(ClientType.ToString().ToUpper(), 1)) == "S") // subbrokers
                    {
                        strTable = " ,subbrokers sb ";
                        strWhere = " and cm_subbroker=sb.rm_Cd ";
                        strGroupBy = "  cm_subbroker, sb.rm_name ";
                    }
                    else if ((Strings.Left(ClientType.ToString().ToUpper(), 1)) == "B")   // Branch
                    {
                        strTable = " ,branch_master ";
                        strWhere = " and cm_brboffcode=bm_branchcd  ";
                        strGroupBy = "  cm_brboffcode, bm_branchname ";
                    }
                    else if ((Strings.Left(ClientType

                        .ToString().ToUpper(), 1)) == "R")   // RM
                    {
                        strTable = " ,RM_master rm ";
                        strWhere = " and rtrim(cm_dpactno)=rm.rm_cd ";
                        strGroupBy = "  cm_dpactno, rm.rm_name ";
                    }


                    //- FOR COMMODITY---------------------------------------------------------------------------------- -
                    if (SQLConnComex != null)

                    {
                        strsqlComm = " insert into #TmpPerformance(tmpcode,tmpclientcd,tmpname,tmpCD,tmpNM,tmpExchange,tmpSegment,tmpBrkg,tmpShare1)";
                        strsqlComm = strsqlComm + " select " + StrGroup1 + strGroup2 + ",";
                        strsqlComm = strsqlComm + " CES_Exchange , CES_Segment , ";
                        strsqlComm = strsqlComm + " cast( Sum(rs_qty*rs_brokerage*sm_multiplier) as decimal(15,2)) Brkg ,";
                        strsqlComm = strsqlComm + " cast( Sum(rs_hisShare) as decimal(15,2)) Share1 ";
                        strsqlComm = strsqlComm + " from " + "[" + SQLConnComex.DataSource + "]" + "." + SQLConnComex.Database + ".dbo.Frevenue_sharing, " + "[" + SQLConnComex.DataSource + "]" + "." + SQLConnComex.Database + ".dbo.Series_master," + "[" + SQLConnComex.DataSource + "]" + "." + SQLConnComex.Database + ".dbo.CompanyExchangeSegments , Client_master ";
                        strsqlComm = strsqlComm + strTable + strTable1;
                        strsqlComm = strsqlComm + " Where rs_exchange = sm_exchange And rs_seriesid = sm_Seriesid and rs_clientcd = cm_cd";
                        if (Code != "")
                        {
                            if (Select == "CL")
                                strsqlComm += " and cm_Cd = '" + Code.Trim() + "' ";
                            else if (Select == "FM")
                                strsqlComm += " and cm_familycd = '" + Code.Trim() + "'"; // and cm_familycd= fm_cd "
                            else if (Select == "GR")
                                strsqlComm += " and cm_groupcd = '" + Code.Trim() + "' "; // and cm_groupcd=gr_cd "
                            else if (Select == "SB")
                                strsqlComm += " and cm_subbroker = '" + Code.Trim() + "' "; // and cm_subbroker=rm_Cd "
                            else if (Select == "RM")
                                strsqlComm += " and rtrim(cm_dpactno) = '" + Code.Trim() + "'";
                            else if (Select == "BR")
                                strsqlComm += " and cm_brboffcode = '" + Code.Trim() + "'";
                            else if (Select == "ALL")
                                strsqlComm += " ";
                        }

                        strsqlComm = strsqlComm + " and rs_dt between '" + FromDate + "' and '" + ToDate + "'   ";
                        strsqlComm = strsqlComm + " and substring(ces_cd,2,1) in ('" + ExCommex.Replace(",", "','").Replace("X", "") + "') ";
                        strsqlComm = strsqlComm + " and rs_companyCode+rs_exchange+'F'= CES_Cd " + " and exists " + myutil.LoginAccess("rs_clientcd") + strWhere + strwhere1;
                        strsqlComm = strsqlComm + " Group By CES_Exchange , CES_Segment ";
                        strsqlComm = strsqlComm + "," + strGroupBy + strGrpBy;
                        strsqlComm = strsqlComm + " Order by rs_clientcd , CES_Exchange , CES_Segment  ";
                        mylib.ExecSQL(strsqlComm, curCon);
                    }

                    //  ''---------------------------------------------------------------------------------------------- -

                    strSql = " select  " + StrGroup1 + strGroup2 + ",";
                    strSql += " CES_Exchange , CES_Segment , ";
                    strSql += " cast(Sum(rs_qty*rs_brokerage) as decimal(15,2)) Brkg, ";
                    strSql += " cast(Sum(rs_hisShare) as decimal(15,2)) Share1, ";
                    strSql += " cast(Sum(rs_qty*rs_brokerage) - Sum(rs_hisShare) as decimal(15,2)) Net ";
                    strSql += " from CRevenue_sharing, CompanyExchangeSegments , client_master ";
                    strSql += strTable + strTable1;
                    strSql += " Where CES_CompanyCd = '" + HttpContext.Current.Session["CompanyCode"] + "' and rs_companycode+Left(rs_stlmnt,1)+'C' = CES_Cd and rs_clientcd = cm_cd and exists " + myutil.LoginAccess("rs_clientcd");
                    if (Code != "")
                    {
                        if (Select == "CL")
                            strSql += " and cm_Cd = '" + Code.Trim() + "' ";
                        else if (Select == "FM")
                            strSql += " and cm_familycd = '" + Code.Trim() + "'"; // and cm_familycd= fm_cd "
                        else if (Select == "GR")
                            strSql += " and cm_groupcd = '" + Code.Trim() + "' "; // and cm_groupcd=gr_cd "
                        else if (Select == "SB")
                            strSql += " and cm_subbroker = '" + Code.Trim() + "' "; // and cm_subbroker=rm_Cd "
                        else if (Select == "RM")
                            strSql += " and rtrim(cm_dpactno) = '" + Code.Trim() + "'";
                        else if (Select == "BR")
                            strSql += " and cm_brboffcode = '" + Code.Trim() + "'";
                        else if (Select == "ALL")
                            strSql += " ";
                    }
                    strSql += " and rs_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                    strSql += " and rs_dt between '" + FromDate + "' and '" + ToDate + "'";
                    if (strDPID != "")
                    {
                        strSql += " and substring(ces_cd,2,2) in ('" + Exchng.Replace(",", "','") + "') ";
                    }
                    else
                    {
                        strSql += " and substring(ces_cd,2,2) in ('') ";
                    }
                    strSql += strWhere + strwhere1;
                    strSql += " Group By " + strGroupBy + strGrpBy + ",CES_Exchange , CES_Segment  ";
                    strSql += " union ";
                    strSql += " select " + StrGroup1 + strGroup2 + ",";
                    strSql += " CES_Exchange , CES_Segment , ";
                    strSql += " cast( Sum(rs_qty*rs_brokerage*sm_multiplier) as decimal(15,2)) Brkg ,";
                    strSql += " cast( Sum(rs_hisShare) as decimal(15,2)) Share1 ,";
                    strSql += " cast(Sum(rs_qty*rs_brokerage*sm_multiplier) - Sum(rs_hisShare) as decimal(15,2)) Net ";
                    strSql += " from FRevenue_sharing, Series_master, CompanyExchangeSegments , client_master ";
                    strSql += strTable + strTable1;
                    strSql += " Where CES_CompanyCd = '" + HttpContext.Current.Session["CompanyCode"] + "' and rs_exchange = sm_exchange and rs_Segment = sm_Segment And rs_seriesid = sm_Seriesid ";
                    if (Code != "")
                    {
                        if (Select == "CL")
                            strSql += " and cm_Cd = '" + Code.Trim() + "' ";
                        else if (Select == "FM")
                            strSql += " and cm_familycd = '" + Code.Trim() + "'"; // and cm_familycd= fm_cd "
                        else if (Select == "GR")
                            strSql += " and cm_groupcd = '" + Code.Trim() + "' "; // and cm_groupcd=gr_cd "
                        else if (Select == "SB")
                            strSql += " and cm_subbroker = '" + Code.Trim() + "' "; // and cm_subbroker=rm_Cd "
                        else if (Select == "RM")
                            strSql += " and rtrim(cm_dpactno) = '" + Code.Trim() + "'";
                        else if (Select == "BR")
                            strSql += " and cm_brboffcode = '" + Code.Trim() + "'";
                        else if (Select == "ALL")
                            strSql += " ";
                    }
                    strSql += " and rs_companycode+rs_exchange+rs_Segment = CES_Cd and rs_clientcd = cm_cd " + " and exists " + myutil.LoginAccess("rs_clientcd");
                    strSql += " and rs_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
                    strSql += " and rs_dt between '" + FromDate + "' and '" + ToDate + "'";
                    if (strDPID != "")
                        strSql += " and substring(ces_cd,2,2) in ('" + Exchng.Replace(",", "','") + "') ";
                    else
                        strSql += " and substring(ces_cd,2,2) in ('') ";

                    strSql += strWhere + strwhere1;
                    strSql += " Group By " + strGroupBy + strGrpBy + " ,CES_Exchange , CES_Segment ";
                    strSql += " union ";
                    strSql += "  Select tmpcode, Tmpclientcd , Tmpname,tmpCD,tmpNM, TmpExchange , 'Comm' TmpSegment ,";
                    strSql += " tmpBrkg,tmpshare1,(tmpbrkg-tmpshare1)  net";
                    strSql += " from [#TmpPerformance] ";

                    strSql += " Order by code,names,CES_Exchange , CES_Segment  ";

                    dtSum = mylib.OpenDataTable(strSql, curCon);


                }
            }
            return dtSum;
        }

        public DataTable GetCommunicationREP(string strDepartment, string cmb)
        {
            strDepartment = strDepartment.Replace(",", "','");
            //string segment = chkCash + "," + chkFO + "," + chkCurrency + "," + chkComm + "," + chkDeposit + "," + chkDebt;

            //string[] tokens = segment.Split(',');

            //for (int i = 0; i < tokens.Length; i++)
            //{
            //    if (i == 0)
            //    {
            //        segment = tokens[i];
            //    }

            //    else
            //    {
            //        segment = segment + ",'" + tokens[i] + "'";
            //    }

            //}

            //string segment = "";
            //int count = 0;
            //if (chkCash != "")
            //{if (count == 0)
            //    { }
            //    else
            //    { }

            //}
            //if (chkFO != "")
            //{
            //    if (count == 0)
            //    { }
            //    else
            //    { }
            //    segment = segment + "'" + chkFO + "'";
            //}
            //if (chkCurrency != "")
            //{
            //    if (count == 0)
            //    { }
            //    else
            //    { }
            //    segment = segment + "'" + chkCurrency + "'";
            //}
            //if (chkComm != "")
            //{
            //    if (count == 0)
            //    { }
            //    else
            //    { }
            //    segment = segment + "'" + chkComm + "'";
            //}
            //if (chkDeposit != "")
            //{
            //    if (count == 0)
            //    { }
            //    else
            //    { }
            //    segment = segment + "'" + chkDeposit + "'";
            //}
            //if (chkDebt != "")
            //{
            //    if (count == 0)
            //    { }
            //    else
            //    { }
            //    segment = segment + "'" + chkDebt + "'";
            //}

            //string segment = "(" + chkCash + chkFO + chkCurrency + chkComm + chkDeposit + chkDebt + ")";


            string strsql = "";
            LibraryModel myLib = new LibraryModel();
            DataTable dt = new DataTable();
            string user = HttpContext.Current.Session["gstrUsercd"].ToString();
            strsql = "";
            strsql = "select ec_SrNo,ec_Segment,qd_name,convert(datetime,convert(DATETIME,ec_IssuseDt,103)) as 'ec_IssuseDt',ec_Subject ";
            strsql += " FROM ExchCircular,QDepartments ";
            strsql += " WHERE qd_cd=ec_deptcd ";

            if (cmb == "Unread")
            {
                strsql += " and ec_SrNo not in (select cr_circularId from CIRCULAR_READ,ExchCircular where ec_SrNo = CR_CircularID and CR_LoginID = '" + user + "') and ec_DeptCd in ('" + strDepartment + "') order by ec_IssuseDt desc";
            }
            else
            {
                strsql += " and ec_DeptCd in ('" + strDepartment + "') order by ec_IssuseDt desc";
            }
            if (strDepartment != "")

            { dt = myLib.OpenDataTable(strsql); }

            return dt;

        }

        public IEnumerable<CommMasterDetails> GetCommData(string Id)
        {
            DataTable dt = new DataTable();
            LibraryModel myLib = new LibraryModel();
            CommMasterDetails ObjMaster = new CommMasterDetails();

            List<CommMasterDetails> CommObj = new List<CommMasterDetails>();

            string strsql = "";
            strsql = "Select ec_Details,convert(datetime,convert(DATETIME,ec_IssuseDt,103)) as 'ec_IssuseDt' from ExchCircular WHERE ec_SrNo = " + Id.Trim();

            dt = myLib.OpenDataTable(strsql);

            ObjMaster.CommExchCircular = (from DataRow dr in dt.Rows
                                          select new CommExchCircular()
                                          {
                                              ec_Details = dr["ec_Details"].ToString(),
                                              ec_IssuseDt = dr["ec_IssuseDt"].ToString()

                                          }).ToList();

            strsql = "Select ea_filename,ea_document,ea_srno FROM ECircular_attach WHERE ea_refno = " + Id.Trim();

            dt = myLib.OpenDataTable(strsql);

            ObjMaster.CommECircular_attach = (from DataRow dr in dt.Rows
                                              select new CommECircular_attach()
                                              {
                                                  ea_filename = dr["ea_filename"].ToString(),
                                                  ea_document = (byte[])dr["ea_document"],
                                                  ea_srno = dr["ea_srno"].ToString()

                                              }).ToList();

            strsql = "Select FAQ_Question,FAQ_Answer FROM FAQs WHERE FAQ_CircularRef = " + Id.Trim();

            dt = myLib.OpenDataTable(strsql);

            ObjMaster.CommFAQs = (from DataRow dr in dt.Rows
                                  select new CommFAQs()
                                  {
                                      FAQ_Question = dr["FAQ_Question"].ToString(),
                                      FAQ_Answer = dr["FAQ_Answer"].ToString()


                                  }).ToList();


            CommObj.Add(ObjMaster);

            return CommObj;

        }

        public string GetcmdFaq(string id, string faqstring)
        {
            string strsql = "";
            string outstr = "";
            string msg = "";
            LibraryModel mylib = new LibraryModel();

            //faqstring = System.Web.HttpContext.Current.Request["txtFaq"];
            string cmid = id;
            string todaydate = DateTime.Now.ToString("yyyyMMdd");
            string timenow = DateTime.Now.ToString(DateAndTime.TimeOfDay.ToString("HH:mm:ss"));
            string ipaddress;
            string mkrid = (HttpContext.Current.Session["gstrUsercd"]).ToString();
            ipaddress = HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"];
            if (string.IsNullOrEmpty(ipaddress) | ipaddress == null)
            {
                ipaddress = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
            }

            if (faqstring.Length > 10)
            {
                if (!faqstring.EndsWith("?"))
                {
                    faqstring += "?";
                }

                //using (SqlConnection con = new SqlConnection())
                //{
                // con.Open();
                strsql = "insert into FAQs " + Constants.vbNewLine;
                strsql += "Select " + cmid + " FAQ_CircularRef,'" + faqstring + "' FAQ_Question, '' FAQ_Answer, '" + mkrid + "' FAQ_MKRID, '" + todaydate + "' FAQ_MKRDT, '" + timenow + "' FAQ_Time,'" + ipaddress + "' FAQ_IP";
                mylib.ExecSQL(strsql);
                //GetCommData(id);
                //}
                msg = "Your question saved successfully";

            }
            else
            {
                msg = "please enter proper question..";
            }
            return msg;
        }

        public string GetcmdAgree(string id)
        {
            string msg = "";
            DataTable dt = new DataTable();
            LibraryModel myLib = new LibraryModel();

            string ipadd = "";
            string strsql = "";
            string nowtime = DateTime.Now.ToString(Conversions.ToString(DateAndTime.TimeOfDay));
            ipadd = HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"];
            if (string.IsNullOrEmpty(ipadd) | ipadd == null)
            {
                ipadd = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
            }

            strsql = "select * from CIRCULAR_READ WHERE CR_LoginID='" + HttpContext.Current.Session["gstrUsercd"] + "' AND CR_CircularID= " + id;
            dt = myLib.OpenDataTable(strsql);
            if (dt.Rows.Count > 0)
            {
                msg = "Already read";
            }
            else
            {
                strsql = "Insert into CIRCULAR_READ  ";
                strsql += " Select " + id + " CR_CircularID,'" + HttpContext.Current.Session["gstrUsercd"] + "' CR_LoginID," + DateTime.Now.ToString("yyyyMMdd") + " CR_ReadDt,'" + DateTime.Now.ToString(DateAndTime.TimeOfDay.ToString("HH:mm:ss")) + "' CR_ReadTm,'" + ipadd + "' CR_IPAddress ";
                myLib.ExecSQL(strsql);
                msg = "Susssss";
            }



            return msg;

        }

        public DataTable GetComConfirmationReport(string Code, string date, string RdTrade, string RdContract, string cmbSelect, string cmbExchSeg, string chkBranchClient, string chkSep)
        {
            string strMode = "";
            string strWhere = "";
            string strExc = "";
            string strcondition = "";
            string strCondition2 = "";
            string strCondition3 = "";
            string mcxncdxTD = "";
            string mcxncdxFC = "";
            string mcxncdxST = "";
            string mcxncdxCD = "";
            string strsql = "";
            string strsqldel = "";

            DataTable dt = new DataTable();
            DataTable ServTax = new DataTable();
            DataTable FSpecialCharges = new DataTable();
            UtilityModel myutil = new UtilityModel();
            UtilityDBModel mydbutil = new UtilityDBModel();
            LibraryModel mylib = new LibraryModel();
            date = myutil.dtos(date);
            if (strMode == "") { strMode = "V"; }

            SqlConnection SQLConnComex = mydbutil.commexTemp_conn("Commex");
            if (SQLConnComex.State == ConnectionState.Closed)
            {
                SQLConnComex.Open();
            }
            mcxncdxTD = strExc;
            mcxncdxFC = strcondition;
            mcxncdxST = strCondition2;
            mcxncdxCD = strCondition3;
            if (cmbExchSeg != "All")
            {
                strExc = " and td_exchange='" + myutil.mfnGetExchangeDesc2Code(cmbExchSeg) + "'";
                strcondition = " and fc_exchange = '" + myutil.mfnGetExchangeDesc2Code(cmbExchSeg) + "'";
                strCondition2 = " and st_exchange = '" + myutil.mfnGetExchangeDesc2Code(cmbExchSeg) + "'";
                strCondition3 = " and cd_exchange = '" + myutil.mfnGetExchangeDesc2Code(cmbExchSeg) + "'";
                mcxncdxTD = strExc;
                mcxncdxFC = strcondition;
                mcxncdxST = strCondition2;
                mcxncdxCD = strCondition3;
            }

            strsql = "select * ,replicate('0',8-len(ltrim(rtrim(cm_cd)))) + ltrim(rtrim(cm_cd)) as cmnumeric , ";
            strsql = strsql + "  bm_contact,bm_add1,bm_add2,bm_add3,bm_city,bm_pin,bm_phone,bm_dialup, ISNULL(cm_ptele2,'')cm_ptele2 ,isnull(bm_pwd,'') bm_pwd"; // isNull(cm_rbipermissionno,'') cm_rbipermissionno ,
            strsql = strsql + " from vwFtradeconfirmationWeb  ";
            strsql = strsql + " , Client_info , Branch_master  ";
            strsql = strsql + " where cm_Brboffcode = bm_branchcd and cm_cd = cm2_cd ";
            strsql = strsql + " and td_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
            strsql = strsql + " " + strExc + " ";
            strsql = strsql + " and td_dt = '" + date + "'";
            strsql = strsql + HttpContext.Current.Session["LoginAccessOld"];
            strsql = strsql + " and cm_type <> 'C' ";
            if (Code.Trim() != "")
            {
                {
                    switch (cmbSelect)
                    {
                        case "CL":
                            {
                                strWhere = strWhere + " and cm_cd = '" + Code + "'";
                                break;
                            }

                        case "GR":
                            {
                                strWhere = strWhere + " and cm_groupcd = '" + Code + "'";
                                break;
                            }

                        case "FM":
                            {
                                strWhere = strWhere + " and cm_familycd = '" + Code + "'";
                                break;
                            }

                        case "SB":
                            {
                                strWhere = strWhere + " and cm_subbroker = '" + Code + "'";
                                break;
                            }

                    }
                }
            }
            if (strWhere != "")
            {
                if (chkBranchClient == "1")
                {
                    strWhere = strWhere + " and cm_contractflag = 'A' ";
                }
                else
                {
                    strWhere = strWhere + " and (cm_contractflag = 'Y' or cm_contractflag = 'A') ";
                }
            }
            else
            {
                if (chkBranchClient == "1")
                {
                    strWhere = strWhere + " and cm_contractflag = 'A' ";
                }
                else
                {
                    strWhere = strWhere + " and (cm_contractflag = 'Y' or cm_contractflag = 'A') ";
                }
            }
            if (chkBranchClient == "1")
            {
                strWhere = strWhere + " and cm_contractflag = 'A' ";
            }
            else
            {
                strWhere = strWhere + " and (cm_contractflag = 'Y' or cm_contractflag = 'A') ";
            }
            strsql = strsql + strWhere + " order by cm_cd,listorder,rectype,sm_underlying,sm_seriesid,td_time";


            dt = mylib.OpenDataTable(strsql, SQLConnComex);

            strsqldel = "Drop Table #tmpFSpecialCharges";
            mylib.ExecSQL(strsqldel, SQLConnComex);


            strsql = " Create Table #tmpFSpecialCharges ";
            strsql = strsql + " ( fc_clientcd VarChar(8) ,  ";
            strsql = strsql + " fc_chargecode VarChar(3) ,  ";
            strsql = strsql + " fc_desc VarChar(40) , ";
            strsql = strsql + " fc_amount Money , ";
            strsql = strsql + " fc_servicetax Money,";
            strsql = strsql + " fc_exchange char (1),";
            strsql = strsql + " fc_companycode char (1)) ";
            mylib.ExecSQL(strsql, SQLConnComex);

            strsqldel = "Drop Table #tmpServTax";
            mylib.ExecSQL(strsqldel, SQLConnComex);

            strsql = " Create Table #tmpServTax ";
            strsql = strsql + " ( ts_Clientcd Char(8) ,  ";
            strsql = strsql + " ts_Amount Money , ";
            strsql = strsql + " ts_StaxOnChg Money ) ";
            mylib.ExecSQL(strsql, SQLConnComex);



            // strsql = " Insert Into #tmpFSpecialCharges ";
            strsql = " Select fc_clientcd , fc_chargecode , fc_desc , fc_amount , fc_servicetax ,fc_companycode,fc_exchange ";
            strsql = strsql + " From Client_Master , FSpecialCharges ,  Branch_master  ";
            strsql = strsql + " where fc_clientcd = cm_Cd and cm_Brboffcode = bm_branchcd ";
            strsql = strsql + " and fc_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
            strsql = strsql + " " + strcondition + " " + strWhere;
            strsql = strsql + " and fc_dt = '" + date + "'";
            strsql = strsql + HttpContext.Current.Session["LoginAccessOld"];
            strsql = strsql + " and cm_type <> 'C' ";
            FSpecialCharges = mylib.OpenDataTable(strsql, SQLConnComex);
            HttpContext.Current.Session["FSpecialCharges"] = FSpecialCharges;

            //strsql = " Insert Into #tmpServTax ";
            strsql = " Select cm_cd  , isnull(sum(td_servicetax),0) 'sertax' , 0  ";
            strsql = strsql + " From vwFtradeconfirmationWeb ,  Branch_master  ";
            strsql = strsql + " where cm_Brboffcode = bm_branchcd ";
            strsql = strsql + " and td_companycode = '" + HttpContext.Current.Session["CompanyCode"] + "'";
            strsql = strsql + " " + strExc + " ";
            strsql = strsql + " and td_dt = '" + date + "'";
            strsql = strsql + HttpContext.Current.Session["LoginAccessOld"];
            strsql = strsql + " and cm_type <> 'C' ";
            strsql = strsql + " Group By cm_cd ";
            mylib.ExecSQL(strsql, SQLConnComex);

            //strsql = " Insert Into #tmpServTax ";
            strsql = " Select fc_clientcd  , 0 , isnull(sum(fc_servicetax),0) 'sertax' ";
            strsql = strsql + " From #tmpFSpecialCharges ";
            strsql = strsql + " Group By fc_clientcd  ";

            ServTax = mylib.OpenDataTable(strsql, SQLConnComex);
            HttpContext.Current.Session["ServTax"] = ServTax;
            return dt;

        }
    }
    public class modDashBoard
    {
        public DataTable GetMenuDetails(string ModuleCd = "")
        {
            LibraryModel lib = new Models.LibraryModel();
            string strSQL = "Select Ltrim(Rtrim(wmn_modulecd)) wmn_modulecd,wmn_visibleyn from Wmenu_master ";
            strSQL += " Where wmn_login = '000' ";
            if (ModuleCd.Trim() == "H0000000")
            {
                strSQL += " and wmn_modulecd in ('H0000000','H0100000','H0200000','H0300000','H0400000','H0500000','H0600000','H0601000','H0602000','H0603000','H0604000')";
            }
            else
            {
                strSQL += " and left(wmn_modulecd,1) in ('B','C','D','E','F','G','H','I')";
            }
            strSQL += " and wmn_groupcd in ( ";
            strSQL += " Select um_group_id  from user_master where um_user_id = '" + HttpContext.Current.User.Identity.Name + "' ";
            strSQL += " ) ";
            strSQL += " Order By wmn_modulecd ";
            DataTable dtMenu = lib.OpenDataTable(strSQL);
            return dtMenu;
        }



    }

    public class AfterLoginExecution
    {

        public void insertlastlogindate(string userid)
        {
            LibraryModel mylib = new LibraryModel();
            UtilityModel myutil = new UtilityModel();

            string SQL = "Update user_master set um_loginflag='Y', um_lastlogin='" + myutil.dtos(DateTime.Now.ToString()) + "', um_computername='" + Environment.MachineName + "' where um_user_id = '" + userid.Trim() + "'";

            mylib.ExecSQL(SQL);

        }





    }

    public class modIPO : ConnectionModel
    {
        public string encrypt(string pInput, string strKey)
        {
            string result = "";
            Byte[] bytesToBeEncrypted = Encoding.UTF8.GetBytes(GenerateSHA256String(pInput));
            Byte[] passwordBytes = Encoding.UTF8.GetBytes(strKey);
            passwordBytes = SHA256.Create().ComputeHash(passwordBytes);
            Byte[] encryptedBytes = null;
            Byte[] saltBytes = new Byte[] { 1, 2, 3, 4, 5, 6, 7, 8 };
            using (System.IO.MemoryStream ms = new System.IO.MemoryStream())
            {
                using (RijndaelManaged AES = new RijndaelManaged())
                {
                    AES.KeySize = 256;
                    AES.BlockSize = 128;
                    Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(passwordBytes, saltBytes, 1000);
                    AES.Key = key.GetBytes(AES.KeySize / 8);
                    AES.IV = key.GetBytes(AES.BlockSize / 8);
                    AES.Mode = CipherMode.CBC;
                    using (CryptoStream cs = new CryptoStream(ms, AES.CreateEncryptor(), CryptoStreamMode.Write))
                    {
                        cs.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);
                        cs.Close();
                    }
                    encryptedBytes = ms.ToArray();
                    result = Convert.ToBase64String(encryptedBytes);
                }
            }
            return result;
        }
        public string GenerateSHA256String(string inputString)
        {
            SHA256 sha256 = SHA256Managed.Create();
            Byte[] bytes = Encoding.UTF8.GetBytes(inputString);
            Byte[] hash = sha256.ComputeHash(bytes);
            StringBuilder stringBuilder = new StringBuilder();
            for (int i = 0; i <= hash.Length - 1; i++)
            {
                stringBuilder.Append(hash[i].ToString("X2"));
            }
            return stringBuilder.ToString();
        }
    }





}





